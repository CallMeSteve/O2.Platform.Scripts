using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Reflection;
using System.IO;

namespace O2.AutoGeneratedExe
{
    class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        
        static void Main(string[] args)
        {
            setAssemblyResolver();                        
            new Program().invokeMain(args);
            
        }

        public void invokeMain(string[] args)
        {            

            mainInvoker.Main(args);
        }

        public static void setAssemblyResolver()
        {
            AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(AssemblyResolve);			
        }

        public static Assembly AssemblyResolve(object sender, ResolveEventArgs args)
        {
            var nameToFind = args.Name;
            if (nameToFind.IndexOf(",") > -1)
                nameToFind = nameToFind.Substring(0,nameToFind.IndexOf(","));
            var targetAssembly = Assembly.GetExecutingAssembly();
            //var nameToFind = "O2_FluentSharp_CoreLib.dll";
            foreach (var resourceName in targetAssembly.GetManifestResourceNames())
                if (resourceName.Contains(nameToFind))
                {
                    var assemblyStream = targetAssembly.GetManifestResourceStream(resourceName);
                    byte[] data = new BinaryReader(assemblyStream).ReadBytes((int)assemblyStream.Length);
                    return Assembly.Load(data);
                }
            return null;
            /*
            var name = args.prop("Name").str();
            var nameToFind = (name.isAssemblyName())
                    ? name.assemblyName().Name
                    : name.lower();

            foreach (var currentAssembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                if(currentAssembly.name().starts("O2"))
                    foreach (var resourceName in currentAssembly.GetManifestResourceNames())
                    {
                        if (resourceName.lower().contains(nameToFind.lower()))
                        {
                            "Found resource for {0} at {1} in {2}".info(name, resourceName, currentAssembly.name());
                            var assemblyStream = currentAssembly.GetManifestResourceStream(resourceName);
                            byte[] data = new BinaryReader(assemblyStream).ReadBytes((int)assemblyStream.Length);                            
                            return Assembly.Load(data);
                        }
                    }
            }
            return null;                    */
        }

/*        private static void loadCoreLibFromEmbedded()
        {
            var assembly = getCoreLib();            
        }

        public static Assembly getCoreLib()
        {
            var targetAssembly =  Assembly.GetExecutingAssembly();
            var nameToFind = "O2_FluentSharp_CoreLib.dll";
            foreach (var resourceName in targetAssembly.GetManifestResourceNames())
                if (resourceName.Contains(nameToFind))
                {
                    var assemblyStream = targetAssembly.GetManifestResourceStream(resourceName);
                    byte[] data = new BinaryReader(assemblyStream).ReadBytes((int)assemblyStream.Length);
                    return Assembly.Load(data);
                }
            return null;
        }*/
        
    }
}
