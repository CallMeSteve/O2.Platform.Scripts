<?xml version="1.0"?>
<H2>
  <SourceCode>var testFile = "Web_SQL_Injection.cs".local();//@"E:\O2_V4\_O2_V4_TempDir\6_6_2012\tmp57D7.tmp.cs";

var visualStudio = new API_VisualStudio_2010();
var panel = visualStudio.VsAddIn.add_WinForm_Panel("TeamMentor Guidance",500,400);
var browser = panel.add_Chrome().add_NavigationBar(); 
//chrome.open("http://local");
 
var topPanel = visualStudio.VsAddIn.add_WinForm_Panel("PoC - CatNet Scan on Local File (with Findings)",500,400)
					.add_Panel();

var editor = visualStudio.VsAddIn.add_WinForm_Panel("SourceCode File",500,400)
						 .add_Panel().add_SourceCodeEditor().load(testFile);;

var vulnsPopup = visualStudio.VsAddIn.add_WinForm_Panel("Current Vulnerabilities",500,400)
					.add_Panel().add_TextArea();
"tm_browser".o2Cache(browser);
"tm_CarNet".o2Cache(topPanel);
"tm_Editor".o2Cache(editor);

//var topPanel = "PoC - CatNet Scan on Local File (with Findings)".popupWindow(1000,500);
//topPanel.insert_LogViewer();
var actionsPanel = topPanel.insert_Above(40,"Actions");
var findingsPanel = topPanel.add_FindingsViewer();//.insert_Right(250,"Findings");

//var browser = findingsPanel.parent().insert_Below("TeamMentor Guidance").add_Chrome();

//var editor = topPanel.add_SourceCodeEditor().load(testFile);

var tempDir = "_catNet_reports".tempDir(false);			  

var reportFile = tempDir.pathCombine("tempScan.xml");

Action updateErrorsPopup = 
	()=&gt; {										
					var vulns = new Dictionary&lt;string,List&lt;IO2Finding&gt;&gt;();
					foreach(IO2Finding finding in findingsPanel.currentO2Findings) 
						vulns.add(finding.vulnType, finding);
					vulnsPopup.set_Text("");					
					vulnsPopup.invokeOnThread(
						()=&gt;{
								var text = "";
								vulnsPopup.font_bold();
								vulnsPopup.Font = new Font(vulnsPopup.Font.Name, 20);
								vulnsPopup.TextAlign = HorizontalAlignment.Center;
								//textBox.Font.field("fontSize", 10); 			
								if (vulns.size() &gt; 0)
								{
									vulnsPopup.pink();
									foreach(var vuln in vulns)		
									vulnsPopup.append_Line("{0}: {1}".format(vuln.Key, vuln.Value.Count));	
								}
								else
									vulnsPopup.green();
							});
				 };

Action&lt;IO2Finding&gt; showFindingGuidance = 
	(finding)=&gt; {
					var showFindingCallback = "showFinding".o2Cache&lt;Action&lt;IO2Finding&gt;&gt;();
					if(showFindingCallback.notNull())
					{
						"Invoking showFindingCallback".info();
						showFindingCallback(finding);
						return ;
					}
					var teamMentorUrl = "http://localhost:12110/article/{0}";
					Action&lt;string&gt; openArticle = 
						(article)=&gt; browser.open(teamMentorUrl.format(article));
						
					switch(finding.vulnType)
					{
						case "SQL Injection":
							//openArticle("SQL Injection Attack"); break;
							openArticle("How to Protect From SQL Injection in ASP.NET");break;
						case "Cross-Site Scripting":	
							//openArticle("Cross Site Scripting Attack"); break;
							//openArticle("afda96a3-d516-4acd-904e-54c974d88932"); break;							
							openArticle("How to Prevent Cross-Site Scripting in ASP.NET"); break;
						default:
							openArticle(finding.vulnType); break;
							
					}
				};

findingsPanel._onFindingSelected += (finding) =&gt; showFindingGuidance(finding);			

//O2Ref:O2_FluentSharp_Roslyn.dll
//O2Ref:Roslyn.Compilers.dll
//O2Ref:Roslyn.Compilers.CSharp.dll
//O2File_Extra_methods_Roslyn_API.cs

Action scanCodeInEditor = 
	()=&gt;{			
			if (editor.getSourceCode().fileContents().tree().errors().size() &gt; 0)
				return;
			findingsPanel.enabled(false);
			"in eDocumentDataChanged".info();
			O2Thread.mtaThread(
				()=&gt;{
						var catNet = new API_CatNet().loadRules();
						catNet.save_Report_To(reportFile);  
						var compiledAssembly = editor.compileCSSharpFile();
												
						var findingsViewer = catNet.scan(compiledAssembly.Location)
												   .show(findingsPanel.parent(), editor);												   
						//findingsViewer.showTraces();
						findingsViewer.expandAllNodes();
						findingsPanel.enabled(true);
						foreach(var finding in findingsViewer.currentO2Findings)
						{
							var traces =finding.allTraces();
							foreach(var trace in traces)
							{
								editor.setSelectedText((int)trace.lineNumber,(int)trace.columnNumber,true);								
							}
						}
						updateErrorsPopup();																		
					});
		};

var autoScan = false;
var codeChanged = false;
editor.eDocumentDataChanged+= (data)=&gt; codeChanged = true;
Action autoScanThread = 
	()=&gt;{
			O2Thread.mtaThread(
				()=&gt;{
						while(autoScan)
						{							
							if (codeChanged)
							{
								"[autoScanThread] Code Changed so triggering scan ".debug(); 
								scanCodeInEditor();
								codeChanged = false;
							}
							this.sleep(2000, false);
						} 
						"[autoScanThread] stop".info();
					});
		};

actionsPanel.onClosed(
				()=&gt;{
						"In form closed".info();
						autoScan = false;
					});
					
actionsPanel.add_Link("Compile and Scan", ()=&gt;scanCodeInEditor())
			.append_CheckBox("AutoScan file", (value)=&gt;{ autoScan = value; autoScanThread(); })
			.append_Link("Open TeamMentor", ()=&gt; browser.open("http://localhost:12110"));
				//.tick()
				;

scanCodeInEditor();
autoScanThread();
  
//using O2.XRules.Database.Findings
//using O2.Interfaces.O2Findings;
//O2File:API_CatNet.cs
//O2File:API_Chrome.cs
//O2File:Findings_ExtensionMethods.cs
//O2Tag_DontAddExtraO2Files

//using O2.FluentSharp.VisualStudio
//O2File:API_VisualStudio_2010.cs
//O2File:API_Chrome.cs
//O2File:O2_VS_AddIn.cs
//O2Tag_DontAddExtraO2Files

//O2Ref:CefSharp\CefSharp-0.11-bin\CefSharp.WinForms.dll
//O2Ref:CefSharp\CefSharp-0.11-bin\CefSharp.dll

</SourceCode>
  <ReferencedAssemblies />
</H2>