//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;


/// <summary>
/// <para>
/// Regular expression: (Views, Categories, Weaknesses, Compound_Elements)
/// </para>
/// </summary>
public partial class Weakness_Catalog : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Weakness_Catalog(XElement xe) { return XTypedServices.ToXTypedElement<Weakness_Catalog>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Weakness_Catalog() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Views", "")), new NamedContentModelEntity(XName.Get("Categories", "")), new NamedContentModelEntity(XName.Get("Weaknesses", "")), new NamedContentModelEntity(XName.Get("Compound_Elements", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Views, Categories, Weaknesses, Compound_Elements)
    /// </para>
    /// </summary>
    public Weakness_Catalog() {
    }
    
    /// <summary>
    /// <para>
    ///  The Views structure contains zero or more View elements.
    ///							Each View element represents a perspective with which one might look at
    ///							the weaknesses in CWE. CWE-699 Development View and CWE-1000 Research
    ///							View are two examples of Views. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Views, Categories, Weaknesses, Compound_Elements)
    /// </para>
    /// </summary>
    public ViewsLocalType Views {
        get {
            XElement x = this.GetElement(XName.Get("Views", ""));
            return ((ViewsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Views", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Categories structure contains zero or more Category
    ///							elements. Each Category element represents what used to be referred to
    ///							in CWE as a "Grouping" entry. That is, a category is now a collection of
    ///							weaknesses based on a common attribute, such as CWE-310 Cryptographic
    ///							Issues or CWE-355 User Interface Security Issues. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Views, Categories, Weaknesses, Compound_Elements)
    /// </para>
    /// </summary>
    public CategoriesLocalType Categories {
        get {
            XElement x = this.GetElement(XName.Get("Categories", ""));
            return ((CategoriesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Categories", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Weaknesses structure contains zero or more Weakness
    ///							elements. Each Weakness element represents an actual weakness entry in
    ///							CWE, such as CWE-311 Failure to Encrypt Sensitive Data or CWE-326 Weak
    ///							Encryption. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Views, Categories, Weaknesses, Compound_Elements)
    /// </para>
    /// </summary>
    public WeaknessesLocalType Weaknesses {
        get {
            XElement x = this.GetElement(XName.Get("Weaknesses", ""));
            return ((WeaknessesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Weaknesses", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Compound_Elements structure contains zero or more
    ///							Compound_Element elements. Each Compound_Element represents a meaningful
    ///							aggregation of several weaknesses, as in a chain like CWE-690: CWE-252
    ///							Unchecked Return Value can result in CWE-476 NULL Pointer Dereference or
    ///							as in a composite like CWE-352 Cross-Site Request Forgery.
    ///						
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Views, Categories, Weaknesses, Compound_Elements)
    /// </para>
    /// </summary>
    public Compound_ElementsLocalType Compound_Elements {
        get {
            XElement x = this.GetElement(XName.Get("Compound_Elements", ""));
            return ((Compound_ElementsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Compound_Elements", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  Catalog_Name is a required attribute of Weakness_Catalog
    ///						which identifies the collection of Weaknesses, Views, Categories and
    ///						Compound_Elements represented by this XML document. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Catalog_Name {
        get {
            XAttribute x = this.Attribute(XName.Get("Catalog_Name", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Catalog_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  Catalog_Version is a required attribute of Weakness_Catalog
    ///						which identifies what version of @Catalog_Name this XML document represents.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Catalog_Version {
        get {
            XAttribute x = this.Attribute(XName.Get("Catalog_Version", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Catalog_Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  Catalog_Date is an optional attribute of Weakness_Catalog
    ///						which identifies the date when this catalog was created or last updated.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public System.Nullable<System.DateTime> Catalog_Date {
        get {
            XAttribute x = this.Attribute(XName.Get("Catalog_Date", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Catalog_Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Weakness_Catalog", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Weakness_Catalog Load(string xmlFile) {
        return XTypedServices.Load<Weakness_Catalog>(xmlFile);
    }
    
    public static Weakness_Catalog Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Weakness_Catalog>(xmlFile);
    }
    
    public static Weakness_Catalog Parse(string xml) {
        return XTypedServices.Parse<Weakness_Catalog>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Weakness_Catalog>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Views", ""), typeof(ViewsLocalType));
        localElementDictionary.Add(XName.Get("Categories", ""), typeof(CategoriesLocalType));
        localElementDictionary.Add(XName.Get("Weaknesses", ""), typeof(WeaknessesLocalType));
        localElementDictionary.Add(XName.Get("Compound_Elements", ""), typeof(Compound_ElementsLocalType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (View*)
    /// </para>
    /// </summary>
    public partial class ViewsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<View> ViewField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ViewsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ViewsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ViewsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("View", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (View*)
        /// </para>
        /// </summary>
        public ViewsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (View*)
        /// </para>
        /// </summary>
        public IList<View> View {
            get {
                if ((this.ViewField == null)) {
                    this.ViewField = new XTypedList<View>(this, LinqToXsdTypeManager.Instance, XName.Get("View", ""));
                }
                return this.ViewField;
            }
            set {
                if ((value == null)) {
                    this.ViewField = null;
                }
                else {
                    if ((this.ViewField == null)) {
                        this.ViewField = XTypedList<View>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("View", ""));
                    }
                    else {
                        XTypedServices.SetList<View>(this.ViewField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Views", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("View", ""), typeof(View));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Category*)
    /// </para>
    /// </summary>
    public partial class CategoriesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Category> CategoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategoriesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CategoriesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategoriesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Category", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Category*)
        /// </para>
        /// </summary>
        public CategoriesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Category*)
        /// </para>
        /// </summary>
        public IList<Category> Category {
            get {
                if ((this.CategoryField == null)) {
                    this.CategoryField = new XTypedList<Category>(this, LinqToXsdTypeManager.Instance, XName.Get("Category", ""));
                }
                return this.CategoryField;
            }
            set {
                if ((value == null)) {
                    this.CategoryField = null;
                }
                else {
                    if ((this.CategoryField == null)) {
                        this.CategoryField = XTypedList<Category>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Category", ""));
                    }
                    else {
                        XTypedServices.SetList<Category>(this.CategoryField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Categories", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategoriesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Category", ""), typeof(Category));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Weakness*)
    /// </para>
    /// </summary>
    public partial class WeaknessesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Weakness> WeaknessField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator WeaknessesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WeaknessesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WeaknessesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Weakness", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Weakness*)
        /// </para>
        /// </summary>
        public WeaknessesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Weakness*)
        /// </para>
        /// </summary>
        public IList<Weakness> Weakness {
            get {
                if ((this.WeaknessField == null)) {
                    this.WeaknessField = new XTypedList<Weakness>(this, LinqToXsdTypeManager.Instance, XName.Get("Weakness", ""));
                }
                return this.WeaknessField;
            }
            set {
                if ((value == null)) {
                    this.WeaknessField = null;
                }
                else {
                    if ((this.WeaknessField == null)) {
                        this.WeaknessField = XTypedList<Weakness>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Weakness", ""));
                    }
                    else {
                        XTypedServices.SetList<Weakness>(this.WeaknessField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Weaknesses", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WeaknessesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Weakness", ""), typeof(Weakness));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Compound_Element*)
    /// </para>
    /// </summary>
    public partial class Compound_ElementsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Compound_Element> Compound_ElementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Compound_ElementsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Compound_ElementsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Compound_ElementsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Compound_Element", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Compound_Element*)
        /// </para>
        /// </summary>
        public Compound_ElementsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Compound_Element*)
        /// </para>
        /// </summary>
        public IList<Compound_Element> Compound_Element {
            get {
                if ((this.Compound_ElementField == null)) {
                    this.Compound_ElementField = new XTypedList<Compound_Element>(this, LinqToXsdTypeManager.Instance, XName.Get("Compound_Element", ""));
                }
                return this.Compound_ElementField;
            }
            set {
                if ((value == null)) {
                    this.Compound_ElementField = null;
                }
                else {
                    if ((this.Compound_ElementField == null)) {
                        this.Compound_ElementField = XTypedList<Compound_Element>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Compound_Element", ""));
                    }
                    else {
                        XTypedServices.SetList<Compound_Element>(this.Compound_ElementField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Compound_Elements", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Compound_ElementsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Compound_Element", ""), typeof(Compound_Element));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
/// </para>
/// </summary>
public partial class View : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator View(XElement xe) { return XTypedServices.ToXTypedElement<View>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static View() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("View_Structure", "")), new NamedContentModelEntity(XName.Get("View_Objective", "")), new NamedContentModelEntity(XName.Get("View_Audience", "")), new NamedContentModelEntity(XName.Get("Relationships", "")), new NamedContentModelEntity(XName.Get("Relationship_Notes", "")), new NamedContentModelEntity(XName.Get("Maintenance_Notes", "")), new NamedContentModelEntity(XName.Get("Other_Notes", "")), new NamedContentModelEntity(XName.Get("Alternate_Terms", "")), new NamedContentModelEntity(XName.Get("Research_Gaps", "")), new NamedContentModelEntity(XName.Get("References", "")), new NamedContentModelEntity(XName.Get("View_Filter", "")), new NamedContentModelEntity(XName.Get("Content_History", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public View() {
    }
    
    /// <summary>
    /// <para>
    /// The View_Structure element describes how this view is being
    ///						constructed. Valid values are: Implicit Slice = a slice based on a filter
    ///						criteria; Explicit Slice = a slice based on arbitrary membership, as defined
    ///						by specific relationships between entries; Graph = a bounded graphical slice
    ///						based on ChildOf relationships.
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public string View_Structure {
        get {
            XElement x = this.GetElement(XName.Get("View_Structure", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("View_Structure", ""), value, "View_Structure", View_StructureLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The View_Objective element describes the perspective from
    ///						which this View is constructed. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public Structured_Text_Type View_Objective {
        get {
            XElement x = this.GetElement(XName.Get("View_Objective", ""));
            return ((Structured_Text_Type)(x));
        }
        set {
            this.SetElement(XName.Get("View_Objective", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The View_Audience element provides a reference to the
    ///						targeted audiences or groups for this view. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public View_AudienceLocalType View_Audience {
        get {
            XElement x = this.GetElement(XName.Get("View_Audience", ""));
            return ((View_AudienceLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("View_Audience", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public Relationships Relationships {
        get {
            XElement x = this.GetElement(XName.Get("Relationships", ""));
            return ((Relationships)(x));
        }
        set {
            this.SetElement(XName.Get("Relationships", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public Relationship_Notes Relationship_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Relationship_Notes", ""));
            return ((Relationship_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Relationship_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public Maintenance_Notes Maintenance_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Maintenance_Notes", ""));
            return ((Maintenance_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Maintenance_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public Other_Notes Other_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Other_Notes", ""));
            return ((Other_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Other_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public Alternate_Terms Alternate_Terms {
        get {
            XElement x = this.GetElement(XName.Get("Alternate_Terms", ""));
            return ((Alternate_Terms)(x));
        }
        set {
            this.SetElement(XName.Get("Alternate_Terms", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public Research_Gaps Research_Gaps {
        get {
            XElement x = this.GetElement(XName.Get("Research_Gaps", ""));
            return ((Research_Gaps)(x));
        }
        set {
            this.SetElement(XName.Get("Research_Gaps", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// The References element contains one or more Reference
    ///						elements, each of which provide further reading and insight into this view.
    ///						This should be filled out when the view is based on sources or projects that
    ///						are external to the CWE project.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public Reference_List_Type References {
        get {
            XElement x = this.GetElement(XName.Get("References", ""));
            return ((Reference_List_Type)(x));
        }
        set {
            this.SetElement(XName.Get("References", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// The View_Filter element holds an XSL query for identifying
    ///						which elements are members of an implicit slice. This should only be present
    ///						for implicit slices.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public string View_Filter {
        get {
            XElement x = this.GetElement(XName.Get("View_Filter", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("View_Filter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (View_Structure, View_Objective, View_Audience?, Relationships?, Relationship_Notes?, Maintenance_Notes?, Other_Notes?, Alternate_Terms?, Research_Gaps?, References?, View_Filter?, Content_History)
    /// </para>
    /// </summary>
    public Content_History Content_History {
        get {
            XElement x = this.GetElement(XName.Get("Content_History", ""));
            return ((Content_History)(x));
        }
        set {
            this.SetElement(XName.Get("Content_History", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The ID attribute provides a unique identifier for the entry.
    ///						It will be static for the lifetime of the entry. In the event that this
    ///						entry becomes deprecated, the ID will not be reused and a pointer will be
    ///						left in this entry to the replacement. This is required for all Views.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public decimal ID {
        get {
            XAttribute x = this.Attribute(XName.Get("ID", ""));
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Name is a descriptive attribute used to give the reader
    ///						an idea of what perspective this view represents. All words in the name
    ///						should be capitalized except for articles and prepositions unless they begin
    ///						or end the name. Subsequent words in a hyphenated chain are also not
    ///						capitalized. This is required for all Views. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Name {
        get {
            XAttribute x = this.Attribute(XName.Get("Name", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Status attribute defines the status level for this view.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Status {
        get {
            XAttribute x = this.Attribute(XName.Get("Status", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("View", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static View Load(string xmlFile) {
        return XTypedServices.Load<View>(xmlFile);
    }
    
    public static View Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<View>(xmlFile);
    }
    
    public static View Parse(string xml) {
        return XTypedServices.Parse<View>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<View>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("View_Structure", ""), typeof(string));
        localElementDictionary.Add(XName.Get("View_Objective", ""), typeof(Structured_Text_Type));
        localElementDictionary.Add(XName.Get("View_Audience", ""), typeof(View_AudienceLocalType));
        localElementDictionary.Add(XName.Get("Relationships", ""), typeof(Relationships));
        localElementDictionary.Add(XName.Get("Relationship_Notes", ""), typeof(Relationship_Notes));
        localElementDictionary.Add(XName.Get("Maintenance_Notes", ""), typeof(Maintenance_Notes));
        localElementDictionary.Add(XName.Get("Other_Notes", ""), typeof(Other_Notes));
        localElementDictionary.Add(XName.Get("Alternate_Terms", ""), typeof(Alternate_Terms));
        localElementDictionary.Add(XName.Get("Research_Gaps", ""), typeof(Research_Gaps));
        localElementDictionary.Add(XName.Get("References", ""), typeof(Reference_List_Type));
        localElementDictionary.Add(XName.Get("View_Filter", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Content_History", ""), typeof(Content_History));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    private class View_StructureLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Implicit_Slice",
                        "Explicit_Slice",
                        "Graph"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private View_StructureLocalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Audience+)
    /// </para>
    /// </summary>
    public partial class View_AudienceLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AudienceLocalType> AudienceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator View_AudienceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<View_AudienceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static View_AudienceLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Audience", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Audience+)
        /// </para>
        /// </summary>
        public View_AudienceLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  The Audience element provides a reference to the
        ///									target audience or group for this view. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Audience+)
        /// </para>
        /// </summary>
        public IList<View.View_AudienceLocalType.AudienceLocalType> Audience {
            get {
                if ((this.AudienceField == null)) {
                    this.AudienceField = new XTypedList<AudienceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Audience", ""));
                }
                return this.AudienceField;
            }
            set {
                if ((value == null)) {
                    this.AudienceField = null;
                }
                else {
                    if ((this.AudienceField == null)) {
                        this.AudienceField = XTypedList<AudienceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Audience", ""));
                    }
                    else {
                        XTypedServices.SetList<AudienceLocalType>(this.AudienceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("View_Audience", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<View_AudienceLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Audience", ""), typeof(AudienceLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Stakeholder, Stakeholder_Description?)
        /// </para>
        /// </summary>
        public partial class AudienceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator AudienceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AudienceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AudienceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Stakeholder", "")), new NamedContentModelEntity(XName.Get("Stakeholder_Description", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Stakeholder, Stakeholder_Description?)
            /// </para>
            /// </summary>
            public AudienceLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  The Stakeholder element specifies
            ///												what types of members of the CWE community might be
            ///												interested in this view. 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Stakeholder, Stakeholder_Description?)
            /// </para>
            /// </summary>
            public string Stakeholder {
                get {
                    XElement x = this.GetElement(XName.Get("Stakeholder", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Stakeholder", ""), value, "Stakeholder", StakeholderLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            ///  The Stakeholder_Description element
            ///												provides some text describing what properties of
            ///												this View this particular Stakeholder might find
            ///												useful.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Stakeholder, Stakeholder_Description?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Stakeholder_Description {
                get {
                    XElement x = this.GetElement(XName.Get("Stakeholder_Description", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Stakeholder_Description", ""), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Audience", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AudienceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Stakeholder", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Stakeholder_Description", ""), typeof(Structured_Text_Type));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class StakeholderLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Developers",
                                "Software_Vendors",
                                "Assessment_Vendors",
                                "Educators",
                                "OWGV",
                                "SAMATE",
                                "CWE_Formalization",
                                "CWE_Team",
                                "Software_Customers",
                                "Assessment_Customers",
                                "Academic_Researchers",
                                "Applied_Researchers",
                                "Information_Providers"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private StakeholderLocalType() {
                }
            }
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
/// </para>
/// </summary>
public partial class Category : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Category(XElement xe) { return XTypedServices.ToXTypedElement<Category>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Category() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description", "")), new NamedContentModelEntity(XName.Get("Relationships", "")), new NamedContentModelEntity(XName.Get("Relationship_Notes", "")), new NamedContentModelEntity(XName.Get("Weakness_Ordinalities", "")), new NamedContentModelEntity(XName.Get("Applicable_Platforms", "")), new NamedContentModelEntity(XName.Get("Maintenance_Notes", "")), new NamedContentModelEntity(XName.Get("Background_Details", "")), new NamedContentModelEntity(XName.Get("Other_Notes", "")), new NamedContentModelEntity(XName.Get("Alternate_Terms", "")), new NamedContentModelEntity(XName.Get("Terminology_Notes", "")), new NamedContentModelEntity(XName.Get("Time_of_Introduction", "")), new NamedContentModelEntity(XName.Get("Modes_of_Introduction", "")), new NamedContentModelEntity(XName.Get("Enabling_Factors_for_Exploitation", "")), new NamedContentModelEntity(XName.Get("Likelihood_of_Exploit", "")), new NamedContentModelEntity(XName.Get("Common_Consequences", "")), new NamedContentModelEntity(XName.Get("Detection_Methods", "")), new NamedContentModelEntity(XName.Get("Potential_Mitigations", "")), new NamedContentModelEntity(XName.Get("Causal_Nature", "")), new NamedContentModelEntity(XName.Get("Demonstrative_Examples", "")), new NamedContentModelEntity(XName.Get("Observed_Examples", "")), new NamedContentModelEntity(XName.Get("Theoretical_Notes", "")), new NamedContentModelEntity(XName.Get("Functional_Areas", "")), new NamedContentModelEntity(XName.Get("Relevant_Properties", "")), new NamedContentModelEntity(XName.Get("Affected_Resources", "")), new NamedContentModelEntity(XName.Get("Research_Gaps", "")), new NamedContentModelEntity(XName.Get("References", "")), new NamedContentModelEntity(XName.Get("Taxonomy_Mappings", "")), new NamedContentModelEntity(XName.Get("White_Box_Definitions", "")), new NamedContentModelEntity(XName.Get("Black_Box_Definitions", "")), new NamedContentModelEntity(XName.Get("Related_Attack_Patterns", "")), new NamedContentModelEntity(XName.Get("Content_History", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Category() {
    }
    
    /// <summary>
    /// <para>
    ///  This field provides a description of this Structure, whether
    ///						it is a Weakness, Category or Compound Element. Its primary subelement is
    ///						Description_Summary which is intended to serve as a minimalistic description
    ///						which provides the information necessary to understand the primary focus of
    ///						this entry. Additionally, it has the subelement Extended_Description which
    ///						is optional and is used to provide further information pertaining to this
    ///						weakness. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public DescriptionLocalType Description {
        get {
            XElement x = this.GetElement(XName.Get("Description", ""));
            return ((DescriptionLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Description", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Relationships Relationships {
        get {
            XElement x = this.GetElement(XName.Get("Relationships", ""));
            return ((Relationships)(x));
        }
        set {
            this.SetElement(XName.Get("Relationships", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Relationship_Notes Relationship_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Relationship_Notes", ""));
            return ((Relationship_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Relationship_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains one or more Weakness_Ordinality
    ///						elements, each of which describes when this entry is primary - where the
    ///						weakness exists independent of other weaknesses, or when this entry might be
    ///						resultant - where the weakness is typically related to the presence of some
    ///						other weaknesses. This should be filled out for all Weakness Base and
    ///						Variant entries. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Weakness_OrdinalitiesLocalType Weakness_Ordinalities {
        get {
            XElement x = this.GetElement(XName.Get("Weakness_Ordinalities", ""));
            return ((Weakness_OrdinalitiesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Weakness_Ordinalities", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains the Languages, Operatingy_Systems,
    ///						Hardware_Architectures, Architectural_Paradigms, Environments,
    ///						Technology_Classes or Common Platforms on which this entry may exist. This
    ///						should be filled out as much as possible for all Compound_Element and
    ///						Weakness entries.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Applicable_PlatformsLocalType Applicable_Platforms {
        get {
            XElement x = this.GetElement(XName.Get("Applicable_Platforms", ""));
            return ((Applicable_PlatformsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Applicable_Platforms", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Maintenance_Notes Maintenance_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Maintenance_Notes", ""));
            return ((Maintenance_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Maintenance_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Background_Detail
    ///						elements, each of which holds information regarding the entry or any
    ///						technologies that are related to it, where the background information is not
    ///						related to the nature of the entry itself. It should be filled out where
    ///						appropriate. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Background_DetailsLocalType Background_Details {
        get {
            XElement x = this.GetElement(XName.Get("Background_Details", ""));
            return ((Background_DetailsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Background_Details", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Other_Notes Other_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Other_Notes", ""));
            return ((Other_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Other_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Alternate_Terms Alternate_Terms {
        get {
            XElement x = this.GetElement(XName.Get("Alternate_Terms", ""));
            return ((Alternate_Terms)(x));
        }
        set {
            this.SetElement(XName.Get("Alternate_Terms", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// This element contains one or more Terminology_Note elements
    ///						that each contain a discussion of terminology issues related to this
    ///						weakness. It is different from the Alternate_Terms element, which is focused
    ///						on discussion of specific terms that are commonly used. It should be filled
    ///						out in any entry for which there is no established terminology, or if there
    ///						are multiple uses of the same key term.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Terminology_NotesLocalType Terminology_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Terminology_Notes", ""));
            return ((Terminology_NotesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Terminology_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Time_of_Introduction element contains the points of time
    ///						in the software life cycle at which the weakness may be introduced. If there
    ///						are multiple points of time at which the weakness may be introduced, then
    ///						separate Introduction elements should be included for each. This element
    ///						should be populated for all weakness bases and variants. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Time_of_IntroductionLocalType Time_of_Introduction {
        get {
            XElement x = this.GetElement(XName.Get("Time_of_Introduction", ""));
            return ((Time_of_IntroductionLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Time_of_Introduction", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element describes the typical scenarios under which this
    ///						weakness can be introduced into the software. It should be filled out as
    ///						needed. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Modes_of_IntroductionLocalType Modes_of_Introduction {
        get {
            XElement x = this.GetElement(XName.Get("Modes_of_Introduction", ""));
            return ((Modes_of_IntroductionLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Modes_of_Introduction", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains one or more
    ///						Enabling_Factor_for_Exploitation, each of which points out conditions or
    ///						factors that could increase the likelihood of exploit for this weakness.
    ///						This should be filled out for most weakness bases. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Enabling_Factors_for_ExploitationLocalType Enabling_Factors_for_Exploitation {
        get {
            XElement x = this.GetElement(XName.Get("Enabling_Factors_for_Exploitation", ""));
            return ((Enabling_Factors_for_ExploitationLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Enabling_Factors_for_Exploitation", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains a rough estimate at the likelihood of
    ///						exploitation of an exposed weakness. Many factors can impact this value
    ///						which is why it should only be regarded as an approximation.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public string Likelihood_of_Exploit {
        get {
            XElement x = this.GetElement(XName.Get("Likelihood_of_Exploit", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("Likelihood_of_Exploit", ""), value, "Likelihood_of_Exploit", Likelihood_of_ExploitLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains the common consequences associated with
    ///						this weakness. It is populated by one or more individual Common_Consequence
    ///						subelements. This should be included and completed as much as possible for
    ///						all weaknesses. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Common_ConsequencesLocalType Common_Consequences {
        get {
            XElement x = this.GetElement(XName.Get("Common_Consequences", ""));
            return ((Common_ConsequencesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Common_Consequences", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Detection_Methods element is comprised of one or more
    ///						Detection_Method elements which identify methods that may be employed to
    ///						detect this weakness. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Detection_MethodsLocalType Detection_Methods {
        get {
            XElement x = this.GetElement(XName.Get("Detection_Methods", ""));
            return ((Detection_MethodsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Detection_Methods", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains the potential mitigations associated
    ///						with this weakness. It contains one or more mitigation subelements which
    ///						each represent individual mitigations for this weakness. This should be
    ///						included and completed to the extent possible for all weakness bases and
    ///						variants. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Potential_MitigationsLocalType Potential_Mitigations {
        get {
            XElement x = this.GetElement(XName.Get("Potential_Mitigations", ""));
            return ((Potential_MitigationsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Potential_Mitigations", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// This element describes the nature of the underlying cause of
    ///						the weakness. Is it an implicit underlying weakness or is it an issue of
    ///						behavior on the part of the software developer? Appropriate values are
    ///						either Implicit, occurring regardless of developer behavior, or Explicit, an
    ///						explicit weakness resulting from behavior of the developer.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public string Causal_Nature {
        get {
            XElement x = this.GetElement(XName.Get("Causal_Nature", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("Causal_Nature", ""), value, "Causal_Nature", Causal_NatureLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Demonstrative_Examples,
    ///						each of which should contain an example illustrating the problem being
    ///						described in this weakness. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Demonstrative_ExamplesLocalType Demonstrative_Examples {
        get {
            XElement x = this.GetElement(XName.Get("Demonstrative_Examples", ""));
            return ((Demonstrative_ExamplesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Demonstrative_Examples", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Observed_Example
    ///						elements, each of which is a reference to a specific observed instance of
    ///						this weakness in the real world; typically this will be a CVE reference.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Observed_ExamplesLocalType Observed_Examples {
        get {
            XElement x = this.GetElement(XName.Get("Observed_Examples", ""));
            return ((Observed_ExamplesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Observed_Examples", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// This element contains one or more Theoretical_Note elements
    ///						that each describe the weakness using vulnerability theory concepts. It
    ///						should be filled out as needed, especially in cases where the application of
    ///						vulnerability theory is not necessarily obvious for the
    ///						weakness.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Theoretical_NotesLocalType Theoretical_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Theoretical_Notes", ""));
            return ((Theoretical_NotesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Theoretical_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Functional_Area elements,
    ///						each of which identifies the functional area of the software in which the
    ///						weakness is most likely to occur. For example, CWE-178 Failure to Resolve
    ///						Case Sensitivity is likely to occur in functional areas of software related
    ///						to file processing and credentials. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Functional_AreasLocalType Functional_Areas {
        get {
            XElement x = this.GetElement(XName.Get("Functional_Areas", ""));
            return ((Functional_AreasLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Functional_Areas", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Relevant_Property
    ///						elements. Each Relevant_Property element identifies a property that is
    ///						required by the code or a resource in order to function as specified.
    ///						Correctly labeling all of the relevant properties can help to figure out
    ///						what the root cause of a vulnerability might be. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Relevant_PropertiesLocalType Relevant_Properties {
        get {
            XElement x = this.GetElement(XName.Get("Relevant_Properties", ""));
            return ((Relevant_PropertiesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Relevant_Properties", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element identifies system resources affected by this
    ///						entry. It is populated by Affected_Resource elements. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Affected_ResourcesLocalType Affected_Resources {
        get {
            XElement x = this.GetElement(XName.Get("Affected_Resources", ""));
            return ((Affected_ResourcesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Affected_Resources", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Research_Gaps Research_Gaps {
        get {
            XElement x = this.GetElement(XName.Get("Research_Gaps", ""));
            return ((Research_Gaps)(x));
        }
        set {
            this.SetElement(XName.Get("Research_Gaps", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The References element contains one or more Reference
    ///						elements, each of which provide further reading and insight into this
    ///						weakness. This may include an alternate interpretation of this weakness, a
    ///						deeper technical breakdown of this weakness such as a research paper, deeper
    ///						information on mitigations, or background details on this technical area.
    ///						This should be filled out for all weakness bases and some variants.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Reference_List_Type References {
        get {
            XElement x = this.GetElement(XName.Get("References", ""));
            return ((Reference_List_Type)(x));
        }
        set {
            this.SetElement(XName.Get("References", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// The Taxonomy_Mappings element contains one or more
    ///						Taxonomy_Mapping structures which provide a mapping from this entry to an
    ///						entry in a different taxonomy.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Taxonomy_MappingsLocalType Taxonomy_Mappings {
        get {
            XElement x = this.GetElement(XName.Get("Taxonomy_Mappings", ""));
            return ((Taxonomy_MappingsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Taxonomy_Mappings", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more White_Box_Definition
    ///						elements, each of which describes the weakness from a white box perspective,
    ///						meaning that the view includes the knowledge of control flow, data flow, and
    ///						all other inner workings of the software in which the weakness exists.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public White_Box_DefinitionsLocalType White_Box_Definitions {
        get {
            XElement x = this.GetElement(XName.Get("White_Box_Definitions", ""));
            return ((White_Box_DefinitionsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("White_Box_Definitions", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Black_Box_Definition
    ///						elements, each of which describes the weakness from an external perspective,
    ///						meaning that the view includes no knowledge of how the software is
    ///						processing data other than what can be inferred from observing the
    ///						software's behavior. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Black_Box_DefinitionsLocalType Black_Box_Definitions {
        get {
            XElement x = this.GetElement(XName.Get("Black_Box_Definitions", ""));
            return ((Black_Box_DefinitionsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Black_Box_Definitions", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Related_Attack_Patterns element contains all references
    ///						to CAPEC which will identify related attack patterns to this weakness. It
    ///						has one or more Related_Attack_Pattern elements as children and each child
    ///						will point to a single CAPEC entry which is associated with this weakness.
    ///						This should be filled out to the extent possible for most weaknesses.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Related_Attack_PatternsLocalType Related_Attack_Patterns {
        get {
            XElement x = this.GetElement(XName.Get("Related_Attack_Patterns", ""));
            return ((Related_Attack_PatternsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Related_Attack_Patterns", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Content_History Content_History {
        get {
            XElement x = this.GetElement(XName.Get("Content_History", ""));
            return ((Content_History)(x));
        }
        set {
            this.SetElement(XName.Get("Content_History", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This attribute provides a unique identifier for the entry. It
    ///						will be static for the lifetime of the entry. In the event that this entry
    ///						becomes deprecated, the ID will not be reused and a pointer will be left in
    ///						this entry to the replacement. This is required for all Categories.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public decimal ID {
        get {
            XAttribute x = this.Attribute(XName.Get("ID", ""));
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Name is a descriptive name used to give the reader an
    ///						idea of what the commonality is amongst the children of this category. All
    ///						words in the name should be capitalized except for articles and prepositions
    ///						unless they begin or end the name. Subsequent words in a hyphenated chain
    ///						are also not capitalized. This is required for all Categories.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Name {
        get {
            XAttribute x = this.Attribute(XName.Get("Name", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Status attribute defines the status level for this
    ///						category. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Status {
        get {
            XAttribute x = this.Attribute(XName.Get("Status", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Category", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Category Load(string xmlFile) {
        return XTypedServices.Load<Category>(xmlFile);
    }
    
    public static Category Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Category>(xmlFile);
    }
    
    public static Category Parse(string xml) {
        return XTypedServices.Parse<Category>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Category>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Description", ""), typeof(DescriptionLocalType));
        localElementDictionary.Add(XName.Get("Relationships", ""), typeof(Relationships));
        localElementDictionary.Add(XName.Get("Relationship_Notes", ""), typeof(Relationship_Notes));
        localElementDictionary.Add(XName.Get("Weakness_Ordinalities", ""), typeof(Weakness_OrdinalitiesLocalType));
        localElementDictionary.Add(XName.Get("Applicable_Platforms", ""), typeof(Applicable_PlatformsLocalType));
        localElementDictionary.Add(XName.Get("Maintenance_Notes", ""), typeof(Maintenance_Notes));
        localElementDictionary.Add(XName.Get("Background_Details", ""), typeof(Background_DetailsLocalType));
        localElementDictionary.Add(XName.Get("Other_Notes", ""), typeof(Other_Notes));
        localElementDictionary.Add(XName.Get("Alternate_Terms", ""), typeof(Alternate_Terms));
        localElementDictionary.Add(XName.Get("Terminology_Notes", ""), typeof(Terminology_NotesLocalType));
        localElementDictionary.Add(XName.Get("Time_of_Introduction", ""), typeof(Time_of_IntroductionLocalType));
        localElementDictionary.Add(XName.Get("Modes_of_Introduction", ""), typeof(Modes_of_IntroductionLocalType));
        localElementDictionary.Add(XName.Get("Enabling_Factors_for_Exploitation", ""), typeof(Enabling_Factors_for_ExploitationLocalType));
        localElementDictionary.Add(XName.Get("Likelihood_of_Exploit", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Common_Consequences", ""), typeof(Common_ConsequencesLocalType));
        localElementDictionary.Add(XName.Get("Detection_Methods", ""), typeof(Detection_MethodsLocalType));
        localElementDictionary.Add(XName.Get("Potential_Mitigations", ""), typeof(Potential_MitigationsLocalType));
        localElementDictionary.Add(XName.Get("Causal_Nature", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Demonstrative_Examples", ""), typeof(Demonstrative_ExamplesLocalType));
        localElementDictionary.Add(XName.Get("Observed_Examples", ""), typeof(Observed_ExamplesLocalType));
        localElementDictionary.Add(XName.Get("Theoretical_Notes", ""), typeof(Theoretical_NotesLocalType));
        localElementDictionary.Add(XName.Get("Functional_Areas", ""), typeof(Functional_AreasLocalType));
        localElementDictionary.Add(XName.Get("Relevant_Properties", ""), typeof(Relevant_PropertiesLocalType));
        localElementDictionary.Add(XName.Get("Affected_Resources", ""), typeof(Affected_ResourcesLocalType));
        localElementDictionary.Add(XName.Get("Research_Gaps", ""), typeof(Research_Gaps));
        localElementDictionary.Add(XName.Get("References", ""), typeof(Reference_List_Type));
        localElementDictionary.Add(XName.Get("Taxonomy_Mappings", ""), typeof(Taxonomy_MappingsLocalType));
        localElementDictionary.Add(XName.Get("White_Box_Definitions", ""), typeof(White_Box_DefinitionsLocalType));
        localElementDictionary.Add(XName.Get("Black_Box_Definitions", ""), typeof(Black_Box_DefinitionsLocalType));
        localElementDictionary.Add(XName.Get("Related_Attack_Patterns", ""), typeof(Related_Attack_PatternsLocalType));
        localElementDictionary.Add(XName.Get("Content_History", ""), typeof(Content_History));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Description_Summary, Extended_Description?)
    /// </para>
    /// </summary>
    public partial class DescriptionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DescriptionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DescriptionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DescriptionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description_Summary", "")), new NamedContentModelEntity(XName.Get("Extended_Description", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Description_Summary, Extended_Description?)
        /// </para>
        /// </summary>
        public DescriptionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This description should be short and should limit
        ///									itself to describing the key points that define this entry.
        ///									Further explanation can be included in the extended description
        ///									element. This is required for all entries. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Description_Summary, Extended_Description?)
        /// </para>
        /// </summary>
        public string Description_Summary {
            get {
                XElement x = this.GetElement(XName.Get("Description_Summary", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Description_Summary", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element provides a place for details
        ///									important to the description of this entry to be included that
        ///									are not necessary to convey the fundamental concept behind the
        ///									entry. This is not required for all entries and should only be
        ///									included where appropriate. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description_Summary, Extended_Description?)
        /// </para>
        /// </summary>
        public Structured_Text_Type Extended_Description {
            get {
                XElement x = this.GetElement(XName.Get("Extended_Description", ""));
                return ((Structured_Text_Type)(x));
            }
            set {
                this.SetElement(XName.Get("Extended_Description", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Description", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DescriptionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Description_Summary", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Extended_Description", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Weakness_Ordinality+)
    /// </para>
    /// </summary>
    public partial class Weakness_OrdinalitiesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Weakness_OrdinalityLocalType> Weakness_OrdinalityField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Weakness_OrdinalitiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Weakness_OrdinalitiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Weakness_OrdinalitiesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Weakness_Ordinality", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Weakness_Ordinality+)
        /// </para>
        /// </summary>
        public Weakness_OrdinalitiesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element describes when this entry is primary
        ///									- where the weakness exists independent of other weaknesses, or
        ///									when this entry might be resultant - where the weakness is
        ///									typically related to the presence of some other weaknesses. The
        ///									Ordinality subelement identifies whether or not we are providing
        ///									context around when this entry is primary, or resultant. The
        ///									Ordinality_Description contains the description of the context
        ///									in which this entry is primary or resultant. It is important to
        ///									note that it is possible for the same entry to be primary in
        ///									some instances and resultant in others.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Weakness_Ordinality+)
        /// </para>
        /// </summary>
        public IList<Category.Weakness_OrdinalitiesLocalType.Weakness_OrdinalityLocalType> Weakness_Ordinality {
            get {
                if ((this.Weakness_OrdinalityField == null)) {
                    this.Weakness_OrdinalityField = new XTypedList<Weakness_OrdinalityLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Weakness_Ordinality", ""));
                }
                return this.Weakness_OrdinalityField;
            }
            set {
                if ((value == null)) {
                    this.Weakness_OrdinalityField = null;
                }
                else {
                    if ((this.Weakness_OrdinalityField == null)) {
                        this.Weakness_OrdinalityField = XTypedList<Weakness_OrdinalityLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Weakness_Ordinality", ""));
                    }
                    else {
                        XTypedServices.SetList<Weakness_OrdinalityLocalType>(this.Weakness_OrdinalityField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Weakness_Ordinalities", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Weakness_OrdinalitiesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Weakness_Ordinality", ""), typeof(Weakness_OrdinalityLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Ordinality, Ordinality_Description?)
        /// </para>
        /// </summary>
        public partial class Weakness_OrdinalityLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Weakness_OrdinalityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Weakness_OrdinalityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Weakness_OrdinalityLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Ordinality", "")), new NamedContentModelEntity(XName.Get("Ordinality_Description", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Ordinality, Ordinality_Description?)
            /// </para>
            /// </summary>
            public Weakness_OrdinalityLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// This element indicates whether this
            ///												weakness exists independent of other weaknesses,
            ///												Primary, or whether it is the result of the presence
            ///												of some other weaknesses,
            ///												Resultant.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Ordinality, Ordinality_Description?)
            /// </para>
            /// </summary>
            public string Ordinality {
                get {
                    XElement x = this.GetElement(XName.Get("Ordinality", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Ordinality", ""), value, "Ordinality", OrdinalityLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// This element describes context in
            ///												which this entry is either Primary or Resultant,
            ///												depending on the corresponding value for
            ///												Ordinality.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Ordinality, Ordinality_Description?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Ordinality_Description {
                get {
                    XElement x = this.GetElement(XName.Get("Ordinality_Description", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Ordinality_Description", ""), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Weakness_Ordinality", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Weakness_OrdinalityLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Ordinality", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Ordinality_Description", ""), typeof(Structured_Text_Type));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class OrdinalityLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Primary",
                                "Resultant"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private OrdinalityLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
    /// </para>
    /// </summary>
    public partial class Applicable_PlatformsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Applicable_PlatformsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Applicable_PlatformsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Applicable_PlatformsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Languages", "")), new NamedContentModelEntity(XName.Get("Operating_Systems", "")), new NamedContentModelEntity(XName.Get("Hardware_Architectures", "")), new NamedContentModelEntity(XName.Get("Architectural_Paradigms", "")), new NamedContentModelEntity(XName.Get("Environments", "")), new NamedContentModelEntity(XName.Get("Technology_Classes", "")), new NamedContentModelEntity(XName.Get("Common_Platform_References", "")), new NamedContentModelEntity(XName.Get("Platform_Notes", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Applicable_PlatformsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This structure contains one or more Language
        ///									elements which each represent a language in which this weakness
        ///									may exist.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Languages_List_Type Languages {
            get {
                XElement x = this.GetElement(XName.Get("Languages", ""));
                return ((Languages_List_Type)(x));
            }
            set {
                this.SetElement(XName.Get("Languages", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more
        ///									Operating_System subelements which each represent an OS in which
        ///									this weakness is likely to exist. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Operating_SystemsLocalType Operating_Systems {
            get {
                XElement x = this.GetElement(XName.Get("Operating_Systems", ""));
                return ((Operating_SystemsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Operating_Systems", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more
        ///									Hardware_Architecture subelements which each represent an
        ///									architecture in which this weakness is likely to exist.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Hardware_ArchitecturesLocalType Hardware_Architectures {
            get {
                XElement x = this.GetElement(XName.Get("Hardware_Architectures", ""));
                return ((Hardware_ArchitecturesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Hardware_Architectures", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more
        ///									Architectural_Paradigm subelements which each represent an
        ///									architecture on which this weakness is likely to exist.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Architectural_ParadigmsLocalType Architectural_Paradigms {
            get {
                XElement x = this.GetElement(XName.Get("Architectural_Paradigms", ""));
                return ((Architectural_ParadigmsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Architectural_Paradigms", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more Environment
        ///									subelements which each represent an environment in which this
        ///									weakness may exist. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public EnvironmentsLocalType Environments {
            get {
                XElement x = this.GetElement(XName.Get("Environments", ""));
                return ((EnvironmentsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Environments", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more individual
        ///									Technology_Class subelements which each represent a technology
        ///									class in which this weakness is likely to exist.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Technology_ClassesLocalType Technology_Classes {
            get {
                XElement x = this.GetElement(XName.Get("Technology_Classes", ""));
                return ((Technology_ClassesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Technology_Classes", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Common_Platforms element contains references
        ///									to the Common Platform Enumeration, CPE, which will identify
        ///									common platforms on which this weakness may occur. It has one or
        ///									more Common_Platform elements as children and each child will
        ///									point to a single CPE entry which is associated with this
        ///									weakness. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Common_Platform_ReferencesLocalType Common_Platform_References {
            get {
                XElement x = this.GetElement(XName.Get("Common_Platform_References", ""));
                return ((Common_Platform_ReferencesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Common_Platform_References", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element provides additional information
        ///									related to the applicable platforms of a weakness if needed.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Structured_Text_Type Platform_Notes {
            get {
                XElement x = this.GetElement(XName.Get("Platform_Notes", ""));
                return ((Structured_Text_Type)(x));
            }
            set {
                this.SetElement(XName.Get("Platform_Notes", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Applicable_Platforms", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Applicable_PlatformsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Languages", ""), typeof(Languages_List_Type));
            localElementDictionary.Add(XName.Get("Operating_Systems", ""), typeof(Operating_SystemsLocalType));
            localElementDictionary.Add(XName.Get("Hardware_Architectures", ""), typeof(Hardware_ArchitecturesLocalType));
            localElementDictionary.Add(XName.Get("Architectural_Paradigms", ""), typeof(Architectural_ParadigmsLocalType));
            localElementDictionary.Add(XName.Get("Environments", ""), typeof(EnvironmentsLocalType));
            localElementDictionary.Add(XName.Get("Technology_Classes", ""), typeof(Technology_ClassesLocalType));
            localElementDictionary.Add(XName.Get("Common_Platform_References", ""), typeof(Common_Platform_ReferencesLocalType));
            localElementDictionary.Add(XName.Get("Platform_Notes", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Operating_System*, Operating_System_Class*)
        /// </para>
        /// </summary>
        public partial class Operating_SystemsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Operating_SystemLocalType> Operating_SystemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Operating_System_ClassLocalType> Operating_System_ClassField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Operating_SystemsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Operating_SystemsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Operating_SystemsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Operating_System", "")), new NamedContentModelEntity(XName.Get("Operating_System_Class", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Operating_System*, Operating_System_Class*)
            /// </para>
            /// </summary>
            public Operating_SystemsLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Operating_System in which this entry may exist and
            ///												with what frequency on the specified OS.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Operating_System*, Operating_System_Class*)
            /// </para>
            /// </summary>
            public IList<Category.Applicable_PlatformsLocalType.Operating_SystemsLocalType.Operating_SystemLocalType> Operating_System {
                get {
                    if ((this.Operating_SystemField == null)) {
                        this.Operating_SystemField = new XTypedList<Operating_SystemLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Operating_System", ""));
                    }
                    return this.Operating_SystemField;
                }
                set {
                    if ((value == null)) {
                        this.Operating_SystemField = null;
                    }
                    else {
                        if ((this.Operating_SystemField == null)) {
                            this.Operating_SystemField = XTypedList<Operating_SystemLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Operating_System", ""));
                        }
                        else {
                            XTypedServices.SetList<Operating_SystemLocalType>(this.Operating_SystemField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												class of operating systems, specified in
            ///												Operating_System_Class_Description, in which this
            ///												entry may exist. Suggested values include: Linux,
            ///												Windows, UNIX, BSD, and Mac OS.
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Operating_System*, Operating_System_Class*)
            /// </para>
            /// </summary>
            public IList<Category.Applicable_PlatformsLocalType.Operating_SystemsLocalType.Operating_System_ClassLocalType> Operating_System_Class {
                get {
                    if ((this.Operating_System_ClassField == null)) {
                        this.Operating_System_ClassField = new XTypedList<Operating_System_ClassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Operating_System_Class", ""));
                    }
                    return this.Operating_System_ClassField;
                }
                set {
                    if ((value == null)) {
                        this.Operating_System_ClassField = null;
                    }
                    else {
                        if ((this.Operating_System_ClassField == null)) {
                            this.Operating_System_ClassField = XTypedList<Operating_System_ClassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Operating_System_Class", ""));
                        }
                        else {
                            XTypedServices.SetList<Operating_System_ClassLocalType>(this.Operating_System_ClassField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Operating_Systems", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Operating_SystemsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Operating_System", ""), typeof(Operating_SystemLocalType));
                localElementDictionary.Add(XName.Get("Operating_System_Class", ""), typeof(Operating_System_ClassLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Operating_SystemLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Operating_SystemLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Operating_SystemLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Operating_SystemLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												operating systems in which this weakness is likely
                ///												to exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Operating_System_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Operating_System_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Operating_System_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified operating
                ///												system.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Operating_System", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Operating_SystemLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class Operating_System_ClassLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Operating_System_ClassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Operating_System_ClassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Operating_System_ClassLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												families or groups of operating systems in which
                ///												this weakness is likely to exist.
                ///												
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Operating_System_Class_Description {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Operating_System_Class_Description", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Operating_System_Class_Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified operating
                ///												system within this operating system
                ///												class.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Operating_System_Class", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Operating_System_ClassLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
        /// </para>
        /// </summary>
        public partial class Hardware_ArchitecturesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Hardware_ArchitectureLocalType> Hardware_ArchitectureField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Hardware_Architecture_ClassLocalType> Hardware_Architecture_ClassField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Hardware_ArchitecturesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Hardware_ArchitecturesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Hardware_ArchitecturesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Hardware_Architecture", "")), new NamedContentModelEntity(XName.Get("Hardware_Architecture_Class", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
            /// </para>
            /// </summary>
            public Hardware_ArchitecturesLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Hardware_Architecture on which this entry may exist
            ///												and with what frequency on the specified
            ///												architecture. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
            /// </para>
            /// </summary>
            public IList<Category.Applicable_PlatformsLocalType.Hardware_ArchitecturesLocalType.Hardware_ArchitectureLocalType> Hardware_Architecture {
                get {
                    if ((this.Hardware_ArchitectureField == null)) {
                        this.Hardware_ArchitectureField = new XTypedList<Hardware_ArchitectureLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Hardware_Architecture", ""));
                    }
                    return this.Hardware_ArchitectureField;
                }
                set {
                    if ((value == null)) {
                        this.Hardware_ArchitectureField = null;
                    }
                    else {
                        if ((this.Hardware_ArchitectureField == null)) {
                            this.Hardware_ArchitectureField = XTypedList<Hardware_ArchitectureLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Hardware_Architecture", ""));
                        }
                        else {
                            XTypedServices.SetList<Hardware_ArchitectureLocalType>(this.Hardware_ArchitectureField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												class of hardware architectures, specified in
            ///												Hardware_Architecture_Class_Name, in which this
            ///												entry may exist. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
            /// </para>
            /// </summary>
            public IList<Category.Applicable_PlatformsLocalType.Hardware_ArchitecturesLocalType.Hardware_Architecture_ClassLocalType> Hardware_Architecture_Class {
                get {
                    if ((this.Hardware_Architecture_ClassField == null)) {
                        this.Hardware_Architecture_ClassField = new XTypedList<Hardware_Architecture_ClassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Hardware_Architecture_Class", ""));
                    }
                    return this.Hardware_Architecture_ClassField;
                }
                set {
                    if ((value == null)) {
                        this.Hardware_Architecture_ClassField = null;
                    }
                    else {
                        if ((this.Hardware_Architecture_ClassField == null)) {
                            this.Hardware_Architecture_ClassField = XTypedList<Hardware_Architecture_ClassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Hardware_Architecture_Class", ""));
                        }
                        else {
                            XTypedServices.SetList<Hardware_Architecture_ClassLocalType>(this.Hardware_Architecture_ClassField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Hardware_Architectures", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Hardware_ArchitecturesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Hardware_Architecture", ""), typeof(Hardware_ArchitectureLocalType));
                localElementDictionary.Add(XName.Get("Hardware_Architecture_Class", ""), typeof(Hardware_Architecture_ClassLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Hardware_ArchitectureLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Hardware_ArchitectureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Hardware_ArchitectureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Hardware_ArchitectureLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												architectures on which this weakness is likely to
                ///												exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Hardware_Architecture_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Hardware_Architecture_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Hardware_Architecture_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified hardware
                ///												architecture.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Hardware_Architecture", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Hardware_ArchitectureLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class Hardware_Architecture_ClassLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Hardware_Architecture_ClassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Hardware_Architecture_ClassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Hardware_Architecture_ClassLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												architectures in which this weakness is likely to
                ///												exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Hardware_Architecture_Class_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Hardware_Architecture_Class_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Hardware_Architecture_Class_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified hardware
                ///												architecture within the specified hardware
                ///												architecture class.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Hardware_Architecture_Class", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Hardware_Architecture_ClassLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Architectural_Paradigm+)
        /// </para>
        /// </summary>
        public partial class Architectural_ParadigmsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Architectural_ParadigmLocalType> Architectural_ParadigmField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Architectural_ParadigmsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Architectural_ParadigmsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Architectural_ParadigmsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Architectural_Paradigm", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Architectural_Paradigm+)
            /// </para>
            /// </summary>
            public Architectural_ParadigmsLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Architectural_Paradigm in which this entry may exist
            ///												and with what frequency in the specified paradigm.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Architectural_Paradigm+)
            /// </para>
            /// </summary>
            public IList<Category.Applicable_PlatformsLocalType.Architectural_ParadigmsLocalType.Architectural_ParadigmLocalType> Architectural_Paradigm {
                get {
                    if ((this.Architectural_ParadigmField == null)) {
                        this.Architectural_ParadigmField = new XTypedList<Architectural_ParadigmLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Architectural_Paradigm", ""));
                    }
                    return this.Architectural_ParadigmField;
                }
                set {
                    if ((value == null)) {
                        this.Architectural_ParadigmField = null;
                    }
                    else {
                        if ((this.Architectural_ParadigmField == null)) {
                            this.Architectural_ParadigmField = XTypedList<Architectural_ParadigmLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Architectural_Paradigm", ""));
                        }
                        else {
                            XTypedServices.SetList<Architectural_ParadigmLocalType>(this.Architectural_ParadigmField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Architectural_Paradigms", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Architectural_ParadigmsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Architectural_Paradigm", ""), typeof(Architectural_ParadigmLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Architectural_ParadigmLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Architectural_ParadigmLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Architectural_ParadigmLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Architectural_ParadigmLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												paradigms in which this weakness is likely to
                ///												exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Architectural_Paradigm_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Architectural_Paradigm_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Architectural_Paradigm_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified
                ///												paradigm.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Architectural_Paradigm", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Architectural_ParadigmLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Environment+)
        /// </para>
        /// </summary>
        public partial class EnvironmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<EnvironmentLocalType> EnvironmentField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator EnvironmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EnvironmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EnvironmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Environment", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Environment+)
            /// </para>
            /// </summary>
            public EnvironmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Environment in which this entry may exist and with
            ///												what frequency in the specified environment.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Environment+)
            /// </para>
            /// </summary>
            public IList<Category.Applicable_PlatformsLocalType.EnvironmentsLocalType.EnvironmentLocalType> Environment {
                get {
                    if ((this.EnvironmentField == null)) {
                        this.EnvironmentField = new XTypedList<EnvironmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Environment", ""));
                    }
                    return this.EnvironmentField;
                }
                set {
                    if ((value == null)) {
                        this.EnvironmentField = null;
                    }
                    else {
                        if ((this.EnvironmentField == null)) {
                            this.EnvironmentField = XTypedList<EnvironmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Environment", ""));
                        }
                        else {
                            XTypedServices.SetList<EnvironmentLocalType>(this.EnvironmentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Environments", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EnvironmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Environment", ""), typeof(EnvironmentLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class EnvironmentLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator EnvironmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EnvironmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public EnvironmentLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This attribute is the name of
                ///												the Environment we are identifying.
                ///												
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Environment_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Environment_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Environment_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified
                ///												environment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Environment", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<EnvironmentLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Technology_Class+)
        /// </para>
        /// </summary>
        public partial class Technology_ClassesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Technology_ClassLocalType> Technology_ClassField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Technology_ClassesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Technology_ClassesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Technology_ClassesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Technology_Class", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Technology_Class+)
            /// </para>
            /// </summary>
            public Technology_ClassesLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Technology_Class in which this entry may exist and
            ///												with what frequency in the specified
            ///												class.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Technology_Class+)
            /// </para>
            /// </summary>
            public IList<Category.Applicable_PlatformsLocalType.Technology_ClassesLocalType.Technology_ClassLocalType> Technology_Class {
                get {
                    if ((this.Technology_ClassField == null)) {
                        this.Technology_ClassField = new XTypedList<Technology_ClassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Technology_Class", ""));
                    }
                    return this.Technology_ClassField;
                }
                set {
                    if ((value == null)) {
                        this.Technology_ClassField = null;
                    }
                    else {
                        if ((this.Technology_ClassField == null)) {
                            this.Technology_ClassField = XTypedList<Technology_ClassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Technology_Class", ""));
                        }
                        else {
                            XTypedServices.SetList<Technology_ClassLocalType>(this.Technology_ClassField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Technology_Classes", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Technology_ClassesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Technology_Class", ""), typeof(Technology_ClassLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Technology_ClassLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Technology_ClassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Technology_ClassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Technology_ClassLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies a
                ///												technology class in which this weakness is likely
                ///												to exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Technology_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Technology_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Technology_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified technology
                ///												class.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Technology_Class", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Technology_ClassLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Common_Platform_Reference+)
        /// </para>
        /// </summary>
        public partial class Common_Platform_ReferencesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Common_Platform_ReferenceLocalType> Common_Platform_ReferenceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Common_Platform_ReferencesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Common_Platform_ReferencesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Common_Platform_ReferencesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Common_Platform_Reference", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Common_Platform_Reference+)
            /// </para>
            /// </summary>
            public Common_Platform_ReferencesLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  The Common_Platform subelement
            ///												identifies a single platform that is associated with
            ///												this weakness. Its only child, CPE_ID is required
            ///												and identifies the related CPE entry. More than one
            ///												Common_Platform_Reference element can exist, but
            ///												they must all be contained within a single
            ///												Common_Platform_References element.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Common_Platform_Reference+)
            /// </para>
            /// </summary>
            public IList<Category.Applicable_PlatformsLocalType.Common_Platform_ReferencesLocalType.Common_Platform_ReferenceLocalType> Common_Platform_Reference {
                get {
                    if ((this.Common_Platform_ReferenceField == null)) {
                        this.Common_Platform_ReferenceField = new XTypedList<Common_Platform_ReferenceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Common_Platform_Reference", ""));
                    }
                    return this.Common_Platform_ReferenceField;
                }
                set {
                    if ((value == null)) {
                        this.Common_Platform_ReferenceField = null;
                    }
                    else {
                        if ((this.Common_Platform_ReferenceField == null)) {
                            this.Common_Platform_ReferenceField = XTypedList<Common_Platform_ReferenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Common_Platform_Reference", ""));
                        }
                        else {
                            XTypedServices.SetList<Common_Platform_ReferenceLocalType>(this.Common_Platform_ReferenceField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Common_Platform_References", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Common_Platform_ReferencesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Common_Platform_Reference", ""), typeof(Common_Platform_ReferenceLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CPE_ID)
            /// </para>
            /// </summary>
            public partial class Common_Platform_ReferenceLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator Common_Platform_ReferenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Common_Platform_ReferenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static Common_Platform_ReferenceLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CPE_ID", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (CPE_ID)
                /// </para>
                /// </summary>
                public Common_Platform_ReferenceLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  The CPE_ID stores the value for
                ///												the related CPE entry identifier as a string. Only
                ///												one CPE_ID element can exist for each
                ///												Common_Platform element. 
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CPE_ID)
                /// </para>
                /// </summary>
                public string CPE_ID {
                    get {
                        XElement x = this.GetElement(XName.Get("CPE_ID", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("CPE_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Common_Platform_Reference", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Common_Platform_ReferenceLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("CPE_ID", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Background_Detail+)
    /// </para>
    /// </summary>
    public partial class Background_DetailsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Background_DetailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Background_DetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Background_DetailsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Background_DetailsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Background_Detail", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Background_Detail+)
        /// </para>
        /// </summary>
        public Background_DetailsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element contains background information
        ///									regarding the entry or any technologies that are related to it,
        ///									where the background information is not related to the nature of
        ///									the weakness itself. It should be filled out where appropriate.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Background_Detail+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Background_Detail {
            get {
                if ((this.Background_DetailField == null)) {
                    this.Background_DetailField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Background_Detail", ""));
                }
                return this.Background_DetailField;
            }
            set {
                if ((value == null)) {
                    this.Background_DetailField = null;
                }
                else {
                    if ((this.Background_DetailField == null)) {
                        this.Background_DetailField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Background_Detail", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Background_DetailField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Background_Details", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Background_DetailsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Background_Detail", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Terminology_Note+)
    /// </para>
    /// </summary>
    public partial class Terminology_NotesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Terminology_NoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Terminology_NotesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Terminology_NotesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Terminology_NotesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Terminology_Note", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Terminology_Note+)
        /// </para>
        /// </summary>
        public Terminology_NotesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element is used for general discussion of
        ///									terminology issues associated with this weakness. It is
        ///									different from the Alternate_Terms element, which is focused on
        ///									discussion of specific terms that are commonly used. It should
        ///									be filled out in any entry for which there is no established
        ///									terminology, or if there are multiple uses of the same key
        ///									term.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Terminology_Note+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Terminology_Note {
            get {
                if ((this.Terminology_NoteField == null)) {
                    this.Terminology_NoteField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Terminology_Note", ""));
                }
                return this.Terminology_NoteField;
            }
            set {
                if ((value == null)) {
                    this.Terminology_NoteField = null;
                }
                else {
                    if ((this.Terminology_NoteField == null)) {
                        this.Terminology_NoteField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Terminology_Note", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Terminology_NoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Terminology_Notes", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Terminology_NotesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Terminology_Note", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Introductory_Phase*)
    /// </para>
    /// </summary>
    public partial class Time_of_IntroductionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Introductory_PhaseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Time_of_IntroductionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Time_of_IntroductionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Time_of_IntroductionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Introductory_Phase", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Introductory_Phase*)
        /// </para>
        /// </summary>
        public Time_of_IntroductionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies the point of time in the
        ///									software life cycle at which the weakness may be introduced.
        ///									Possible values are Architecture and Design, Implementation and
        ///									Operational to name a few. If there are multiple points of time
        ///									at which the weakness may be introduced, then separate
        ///									Introductory_Phase elements should be included for each. This
        ///									element should be populated for all weakness bases and variants.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Introductory_Phase*)
        /// </para>
        /// </summary>
        public IList<string> Introductory_Phase {
            get {
                if ((this.Introductory_PhaseField == null)) {
                    this.Introductory_PhaseField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Introductory_Phase", ""));
                }
                return this.Introductory_PhaseField;
            }
            set {
                if ((value == null)) {
                    this.Introductory_PhaseField = null;
                }
                else {
                    if ((this.Introductory_PhaseField == null)) {
                        this.Introductory_PhaseField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Introductory_Phase", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Introductory_PhaseField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Time_of_Introduction", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Time_of_IntroductionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Introductory_Phase", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Mode_of_Introduction*)
    /// </para>
    /// </summary>
    public partial class Modes_of_IntroductionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Mode_of_IntroductionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Modes_of_IntroductionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Modes_of_IntroductionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Modes_of_IntroductionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mode_of_Introduction", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Mode_of_Introduction*)
        /// </para>
        /// </summary>
        public Modes_of_IntroductionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies the mode by which the
        ///									weakness may be introduced. If there are multiple ways in which
        ///									the weakness may be introduced, then separate
        ///									Mode_of_Introduction elements should be included for each. This
        ///									element should be populated for all weakness bases and variants.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Mode_of_Introduction*)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Mode_of_Introduction {
            get {
                if ((this.Mode_of_IntroductionField == null)) {
                    this.Mode_of_IntroductionField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Mode_of_Introduction", ""));
                }
                return this.Mode_of_IntroductionField;
            }
            set {
                if ((value == null)) {
                    this.Mode_of_IntroductionField = null;
                }
                else {
                    if ((this.Mode_of_IntroductionField == null)) {
                        this.Mode_of_IntroductionField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Mode_of_Introduction", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Mode_of_IntroductionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Modes_of_Introduction", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Modes_of_IntroductionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Mode_of_Introduction", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabling_Factor_for_Exploitation+)
    /// </para>
    /// </summary>
    public partial class Enabling_Factors_for_ExploitationLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Enabling_Factor_for_ExploitationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Enabling_Factors_for_ExploitationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Enabling_Factors_for_ExploitationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Enabling_Factors_for_ExploitationLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Enabling_Factor_for_Exploitation", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabling_Factor_for_Exploitation+)
        /// </para>
        /// </summary>
        public Enabling_Factors_for_ExploitationLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies a condition or factor
        ///									that could increase the likelihood of exploit for this weakness.
        ///									This element should contain structured text with enough detail
        ///									to make the enabling factor clear. This should be filled out for
        ///									most weakness bases. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Enabling_Factor_for_Exploitation+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Enabling_Factor_for_Exploitation {
            get {
                if ((this.Enabling_Factor_for_ExploitationField == null)) {
                    this.Enabling_Factor_for_ExploitationField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Enabling_Factor_for_Exploitation", ""));
                }
                return this.Enabling_Factor_for_ExploitationField;
            }
            set {
                if ((value == null)) {
                    this.Enabling_Factor_for_ExploitationField = null;
                }
                else {
                    if ((this.Enabling_Factor_for_ExploitationField == null)) {
                        this.Enabling_Factor_for_ExploitationField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Enabling_Factor_for_Exploitation", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Enabling_Factor_for_ExploitationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Enabling_Factors_for_Exploitation", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Enabling_Factors_for_ExploitationLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Enabling_Factor_for_Exploitation", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    private class Likelihood_of_ExploitLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Very High",
                        "High to Very High",
                        "High",
                        "Medium to High",
                        "Medium",
                        "Low to Medium",
                        "Low",
                        "Very Low"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Likelihood_of_ExploitLocalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Common_Consequence+)
    /// </para>
    /// </summary>
    public partial class Common_ConsequencesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Common_Consequence> Common_ConsequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Common_ConsequencesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Common_ConsequencesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Common_ConsequencesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Common_Consequence", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Common_Consequence+)
        /// </para>
        /// </summary>
        public Common_ConsequencesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Common_Consequence+)
        /// </para>
        /// </summary>
        public IList<Common_Consequence> Common_Consequence {
            get {
                if ((this.Common_ConsequenceField == null)) {
                    this.Common_ConsequenceField = new XTypedList<Common_Consequence>(this, LinqToXsdTypeManager.Instance, XName.Get("Common_Consequence", ""));
                }
                return this.Common_ConsequenceField;
            }
            set {
                if ((value == null)) {
                    this.Common_ConsequenceField = null;
                }
                else {
                    if ((this.Common_ConsequenceField == null)) {
                        this.Common_ConsequenceField = XTypedList<Common_Consequence>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Common_Consequence", ""));
                    }
                    else {
                        XTypedServices.SetList<Common_Consequence>(this.Common_ConsequenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Common_Consequences", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Common_ConsequencesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Common_Consequence", ""), typeof(Common_Consequence));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Detection_Method+)
    /// </para>
    /// </summary>
    public partial class Detection_MethodsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Detection_MethodLocalType> Detection_MethodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Detection_MethodsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Detection_MethodsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Detection_MethodsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Detection_Method", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Detection_Method+)
        /// </para>
        /// </summary>
        public Detection_MethodsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// The Detection_Method element is intended to
        ///									provide information on different techniques that can be used to
        ///									detect a weakness, including their strengths and limitations.
        ///									This should be filled out for some weakness classes and bases.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Detection_Method+)
        /// </para>
        /// </summary>
        public IList<Category.Detection_MethodsLocalType.Detection_MethodLocalType> Detection_Method {
            get {
                if ((this.Detection_MethodField == null)) {
                    this.Detection_MethodField = new XTypedList<Detection_MethodLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Detection_Method", ""));
                }
                return this.Detection_MethodField;
            }
            set {
                if ((value == null)) {
                    this.Detection_MethodField = null;
                }
                else {
                    if ((this.Detection_MethodField == null)) {
                        this.Detection_MethodField = XTypedList<Detection_MethodLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Detection_Method", ""));
                    }
                    else {
                        XTypedServices.SetList<Detection_MethodLocalType>(this.Detection_MethodField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Detection_Methods", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Detection_MethodsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Detection_Method", ""), typeof(Detection_MethodLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
        /// </para>
        /// </summary>
        public partial class Detection_MethodLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Detection_MethodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Detection_MethodLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Detection_MethodLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Method_Name", "")), new NamedContentModelEntity(XName.Get("Method_Description", "")), new NamedContentModelEntity(XName.Get("Method_Effectiveness", "")), new NamedContentModelEntity(XName.Get("Method_Effectiveness_Notes", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public Detection_MethodLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// The Method_Name element identifies the
            ///												particular weakness detection method to be
            ///												described. This should be filled out for some
            ///												weakness classes and bases. 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public string Method_Name {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Method_Name", ""), value, "Method_Name", Method_NameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// The Method_Description element is
            ///												intended to provide some context of how this
            ///												Detection_Method can be applied to a specific
            ///												weakness. This should be filled out for some
            ///												weakness classes and bases. 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Method_Description {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Description", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Method_Description", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// This element summarizes how effective
            ///												the detection method may be in detecting the
            ///												associated weakness. This assumes the use of
            ///												best-of-breed tools, analysts, and methods. There is
            ///												limited consideration for financial costs, labor, or
            ///												time.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public string Method_Effectiveness {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Effectiveness", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Method_Effectiveness", ""), value, "Method_Effectiveness", Method_EffectivenessLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            ///  The Method_Effectiveness_Notes
            ///												element is intended to discuss the strengths and
            ///												shortcomings of this detection method. This should
            ///												be filled out for some weakness classes and bases.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Method_Effectiveness_Notes {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Effectiveness_Notes", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Method_Effectiveness_Notes", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// The Detection_Method_ID stores the value
            ///											for the related Detection_Method entry identifier as a
            ///											string. Only one Detection_Method_ID element can exist
            ///											for each Detection_Method element (ex: DM-1). However,
            ///											Detection_Methods across CWE with the same ID should
            ///											only vary in small details.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Detection_Method_ID {
                get {
                    XAttribute x = this.Attribute(XName.Get("Detection_Method_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Detection_Method_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Detection_Method", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Detection_MethodLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Method_Name", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Method_Description", ""), typeof(Structured_Text_Type));
                localElementDictionary.Add(XName.Get("Method_Effectiveness", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Method_Effectiveness_Notes", ""), typeof(Structured_Text_Type));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class Method_NameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                                "Automated Analysis",
                                "Automated Dynamic Analysis",
                                "Automated Static Analysis",
                                "Fuzzing",
                                "Manual Analysis",
                                "Manual Dynamic Analysis",
                                "Manual Static Analysis",
                                "Other",
                                "White Box",
                                "Black Box"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                
                private Method_NameLocalType() {
                }
            }
            
            private class Method_EffectivenessLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "None/Rare",
                                "Limited",
                                "Opportunistic",
                                "Moderate",
                                "High"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private Method_EffectivenessLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Mitigation+)
    /// </para>
    /// </summary>
    public partial class Potential_MitigationsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Mitigation> MitigationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Potential_MitigationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Potential_MitigationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Potential_MitigationsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mitigation", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Mitigation+)
        /// </para>
        /// </summary>
        public Potential_MitigationsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Mitigation+)
        /// </para>
        /// </summary>
        public IList<Mitigation> Mitigation {
            get {
                if ((this.MitigationField == null)) {
                    this.MitigationField = new XTypedList<Mitigation>(this, LinqToXsdTypeManager.Instance, XName.Get("Mitigation", ""));
                }
                return this.MitigationField;
            }
            set {
                if ((value == null)) {
                    this.MitigationField = null;
                }
                else {
                    if ((this.MitigationField == null)) {
                        this.MitigationField = XTypedList<Mitigation>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Mitigation", ""));
                    }
                    else {
                        XTypedServices.SetList<Mitigation>(this.MitigationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Potential_Mitigations", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Potential_MitigationsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Mitigation", ""), typeof(Mitigation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    private class Causal_NatureLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Implicit",
                        "Explicit"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Causal_NatureLocalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Demonstrative_Example+)
    /// </para>
    /// </summary>
    public partial class Demonstrative_ExamplesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Demonstrative_ExampleLocalType> Demonstrative_ExampleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Demonstrative_ExamplesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Demonstrative_ExamplesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Demonstrative_ExamplesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Demonstrative_Example", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Demonstrative_Example+)
        /// </para>
        /// </summary>
        public Demonstrative_ExamplesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element illustrates how this weakness may
        ///									look in actual code. It contains an Intro_Text element
        ///									describing the context in which this code should be viewed, an
        ///									Example_Body element which is a mixture of code and explanatory
        ///									text, and Demonstrative_Example_References that provide
        ///									additional information.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Demonstrative_Example+)
        /// </para>
        /// </summary>
        public IList<Category.Demonstrative_ExamplesLocalType.Demonstrative_ExampleLocalType> Demonstrative_Example {
            get {
                if ((this.Demonstrative_ExampleField == null)) {
                    this.Demonstrative_ExampleField = new XTypedList<Demonstrative_ExampleLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Demonstrative_Example", ""));
                }
                return this.Demonstrative_ExampleField;
            }
            set {
                if ((value == null)) {
                    this.Demonstrative_ExampleField = null;
                }
                else {
                    if ((this.Demonstrative_ExampleField == null)) {
                        this.Demonstrative_ExampleField = XTypedList<Demonstrative_ExampleLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Demonstrative_Example", ""));
                    }
                    else {
                        XTypedServices.SetList<Demonstrative_ExampleLocalType>(this.Demonstrative_ExampleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Demonstrative_Examples", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Demonstrative_ExamplesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Demonstrative_Example", ""), typeof(Demonstrative_ExampleLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
        /// </para>
        /// </summary>
        public partial class Demonstrative_ExampleLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Demonstrative_ExampleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Demonstrative_ExampleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Demonstrative_ExampleLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Intro_Text", "")), new NamedContentModelEntity(XName.Get("Example_Body", "")), new NamedContentModelEntity(XName.Get("Demonstrative_Example_References", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public Demonstrative_ExampleLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// This element describes the context and
            ///												setting surrounding the example to add clarity for
            ///												the reader. 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public string Intro_Text {
                get {
                    XElement x = this.GetElement(XName.Get("Intro_Text", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Intro_Text", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element consists of a
            ///												Structured_Text element which should hold the code
            ///												and some explanatory information for the
            ///												reader.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Example_Body {
                get {
                    XElement x = this.GetElement(XName.Get("Example_Body", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Example_Body", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// The Demonstrative_Example_References
            ///												element contains one or more Reference elements,
            ///												each of which provide further reading and insight
            ///												into this demonstrative example. This should be
            ///												filled out when appropriate.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public Reference_List_Type Demonstrative_Example_References {
                get {
                    XElement x = this.GetElement(XName.Get("Demonstrative_Example_References", ""));
                    return ((Reference_List_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Demonstrative_Example_References", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            ///  The Demonstrative_Example_ID stores the
            ///											value for the related Demonstrative_Example entry
            ///											identifier as a string. Only one
            ///											Demonstrative_Example_ID element can exist for each
            ///											Demonstrative_Example element (ex: DX-1). However,
            ///											Demonstrative_Examples across CWE with the same ID
            ///											should only vary in small details.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Demonstrative_Example_ID {
                get {
                    XAttribute x = this.Attribute(XName.Get("Demonstrative_Example_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Demonstrative_Example_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Demonstrative_Example", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Demonstrative_ExampleLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Intro_Text", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Example_Body", ""), typeof(Structured_Text_Type));
                localElementDictionary.Add(XName.Get("Demonstrative_Example_References", ""), typeof(Reference_List_Type));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Observed_Example+)
    /// </para>
    /// </summary>
    public partial class Observed_ExamplesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Observed_ExampleLocalType> Observed_ExampleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Observed_ExamplesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Observed_ExamplesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Observed_ExamplesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Observed_Example", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Observed_Example+)
        /// </para>
        /// </summary>
        public Observed_ExamplesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element specifies a reference to a specific
        ///									observed instance of this weakness in the real-world; Typically
        ///									this will be a CVE reference. Each Observed_Example element
        ///									represents a single example. This element should be filled out
        ///									for as many entries as possible. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Observed_Example+)
        /// </para>
        /// </summary>
        public IList<Category.Observed_ExamplesLocalType.Observed_ExampleLocalType> Observed_Example {
            get {
                if ((this.Observed_ExampleField == null)) {
                    this.Observed_ExampleField = new XTypedList<Observed_ExampleLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Observed_Example", ""));
                }
                return this.Observed_ExampleField;
            }
            set {
                if ((value == null)) {
                    this.Observed_ExampleField = null;
                }
                else {
                    if ((this.Observed_ExampleField == null)) {
                        this.Observed_ExampleField = XTypedList<Observed_ExampleLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Observed_Example", ""));
                    }
                    else {
                        XTypedServices.SetList<Observed_ExampleLocalType>(this.Observed_ExampleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Observed_Examples", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Observed_ExamplesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Observed_Example", ""), typeof(Observed_ExampleLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
        /// </para>
        /// </summary>
        public partial class Observed_ExampleLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> Observed_Example_ReferenceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> Observed_Example_LinkField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Observed_ExampleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Observed_ExampleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Observed_ExampleLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Observed_Example_Reference", "")), new NamedContentModelEntity(XName.Get("Observed_Example_Description", "")), new NamedContentModelEntity(XName.Get("Observed_Example_Link", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public Observed_ExampleLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This field should contain the
            ///												identifier for the example being cited. For example,
            ///												if a CVE is being cited it should be of the standard
            ///												CVE identifier format, such as CVE-2005-1951 or
            ///												CVE-1999-0046. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public IList<string> Observed_Example_Reference {
                get {
                    if ((this.Observed_Example_ReferenceField == null)) {
                        this.Observed_Example_ReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Observed_Example_Reference", ""));
                    }
                    return this.Observed_Example_ReferenceField;
                }
                set {
                    if ((value == null)) {
                        this.Observed_Example_ReferenceField = null;
                    }
                    else {
                        if ((this.Observed_Example_ReferenceField == null)) {
                            this.Observed_Example_ReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Observed_Example_Reference", ""));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.Observed_Example_ReferenceField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            ///  This field should contain a product
            ///												independent description of the example being cited.
            ///												The description should present an unambiguous
            ///												correlation between the example being described and
            ///												the weakness which it is meant to exemplify. It
            ///												should also be short and easy to understand.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public string Observed_Example_Description {
                get {
                    XElement x = this.GetElement(XName.Get("Observed_Example_Description", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Observed_Example_Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This field should provide a valid URL
            ///												where more information regarding this example can be
            ///												obtained. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public IList<string> Observed_Example_Link {
                get {
                    if ((this.Observed_Example_LinkField == null)) {
                        this.Observed_Example_LinkField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Observed_Example_Link", ""));
                    }
                    return this.Observed_Example_LinkField;
                }
                set {
                    if ((value == null)) {
                        this.Observed_Example_LinkField = null;
                    }
                    else {
                        if ((this.Observed_Example_LinkField == null)) {
                            this.Observed_Example_LinkField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Observed_Example_Link", ""));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.Observed_Example_LinkField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Observed_Example", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Observed_ExampleLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Observed_Example_Reference", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Observed_Example_Description", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Observed_Example_Link", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Theoretical_Note+)
    /// </para>
    /// </summary>
    public partial class Theoretical_NotesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Theoretical_NoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Theoretical_NotesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Theoretical_NotesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Theoretical_NotesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Theoretical_Note", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Theoretical_Note+)
        /// </para>
        /// </summary>
        public Theoretical_NotesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This element is used to describe the weakness
        ///									using vulnerability theory concepts, which can be useful in
        ///									understanding the Research view. It should be filled out as
        ///									needed, especially in cases where the application of
        ///									vulnerability theory is not necessarily obvious for the
        ///									weakness.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Theoretical_Note+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Theoretical_Note {
            get {
                if ((this.Theoretical_NoteField == null)) {
                    this.Theoretical_NoteField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Theoretical_Note", ""));
                }
                return this.Theoretical_NoteField;
            }
            set {
                if ((value == null)) {
                    this.Theoretical_NoteField = null;
                }
                else {
                    if ((this.Theoretical_NoteField == null)) {
                        this.Theoretical_NoteField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Theoretical_Note", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Theoretical_NoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Theoretical_Notes", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Theoretical_NotesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Theoretical_Note", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Functional_Area+)
    /// </para>
    /// </summary>
    public partial class Functional_AreasLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Functional_AreaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Functional_AreasLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Functional_AreasLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Functional_AreasLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Functional_Area", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Functional_Area+)
        /// </para>
        /// </summary>
        public Functional_AreasLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies the functional area of
        ///									the software in which the weakness is most likely to occur. For
        ///									example, CWE-178 Failure to Resolve Case Sensitivity is likely
        ///									to occur in functional areas of software related to file
        ///									processing and credentials. Each applicable functional area
        ///									should have a new Functional_Area element and standard title
        ///									capitalization should be applied to each area.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Functional_Area+)
        /// </para>
        /// </summary>
        public IList<string> Functional_Area {
            get {
                if ((this.Functional_AreaField == null)) {
                    this.Functional_AreaField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Functional_Area", ""));
                }
                return this.Functional_AreaField;
            }
            set {
                if ((value == null)) {
                    this.Functional_AreaField = null;
                }
                else {
                    if ((this.Functional_AreaField == null)) {
                        this.Functional_AreaField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Functional_Area", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Functional_AreaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Functional_Areas", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Functional_AreasLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Functional_Area", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Relevant_Property+)
    /// </para>
    /// </summary>
    public partial class Relevant_PropertiesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Relevant_PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Relevant_PropertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Relevant_PropertiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Relevant_PropertiesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Relevant_Property", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Relevant_Property+)
        /// </para>
        /// </summary>
        public Relevant_PropertiesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  Each Relevant_Property element identifies a
        ///									property that is required by the code or a resource in order to
        ///									function as specified. Correctly labeling all of the relevant
        ///									properties can help to figure out what the root cause of a
        ///									vulnerability might be. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Relevant_Property+)
        /// </para>
        /// </summary>
        public IList<string> Relevant_Property {
            get {
                if ((this.Relevant_PropertyField == null)) {
                    this.Relevant_PropertyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Relevant_Property", ""));
                }
                return this.Relevant_PropertyField;
            }
            set {
                if ((value == null)) {
                    this.Relevant_PropertyField = null;
                }
                else {
                    if ((this.Relevant_PropertyField == null)) {
                        this.Relevant_PropertyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Relevant_Property", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Relevant_PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Relevant_Properties", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Relevant_PropertiesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Relevant_Property", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class Relevant_PropertyLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Accessibility",
                            "Mutability",
                            "Trustability",
                            "Validity",
                            "Equivalence",
                            "Uniqueness",
                            "Predictability"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Relevant_PropertyLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Affected_Resource+)
    /// </para>
    /// </summary>
    public partial class Affected_ResourcesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Affected_ResourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Affected_ResourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Affected_ResourcesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Affected_ResourcesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Affected_Resource", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Affected_Resource+)
        /// </para>
        /// </summary>
        public Affected_ResourcesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies system resources affected
        ///									by this entry. Each resource affected by this weakness should be
        ///									given its own Affected_Resource element. For example, CWE-249,
        ///									Path Manipulation has both Memory and File/Directory listed in
        ///									separate Affected_Resource elements. This should be filled out
        ///									in weakness bases and variants where applicable.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Affected_Resource+)
        /// </para>
        /// </summary>
        public IList<string> Affected_Resource {
            get {
                if ((this.Affected_ResourceField == null)) {
                    this.Affected_ResourceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Affected_Resource", ""));
                }
                return this.Affected_ResourceField;
            }
            set {
                if ((value == null)) {
                    this.Affected_ResourceField = null;
                }
                else {
                    if ((this.Affected_ResourceField == null)) {
                        this.Affected_ResourceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Affected_Resource", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Affected_ResourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Affected_Resources", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Affected_ResourcesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Affected_Resource", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class Affected_ResourceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                            "System Process",
                            "Memory",
                            "File/Directory",
                            "CPU"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private Affected_ResourceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Taxonomy_Mapping+)
    /// </para>
    /// </summary>
    public partial class Taxonomy_MappingsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Taxonomy_MappingLocalType> Taxonomy_MappingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Taxonomy_MappingsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Taxonomy_MappingsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Taxonomy_MappingsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Taxonomy_Mapping", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Taxonomy_Mapping+)
        /// </para>
        /// </summary>
        public Taxonomy_MappingsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This structure describes mappings to nodes of
        ///									other taxonomies that are similar in meaning to this node.
        ///									Although this may sound similar to Source_Taxonomy,
        ///									Source_Taxonomy is designed to provide a history and pedigree
        ///									for the entry, whereas Taxonomy_Mapping allows similar nodes in
        ///									other collections to be identified as matching concepts with
        ///									this weakness. For example, Taxonomy_Mapping should be used to
        ///									map the CWE entries to their OWASP Top 10 equivalents. The sole
        ///									attribute is "Mapped_Taxonomy_Name" which is used to identify
        ///									the taxonomy to which this weakness is being mapped.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Taxonomy_Mapping+)
        /// </para>
        /// </summary>
        public IList<Category.Taxonomy_MappingsLocalType.Taxonomy_MappingLocalType> Taxonomy_Mapping {
            get {
                if ((this.Taxonomy_MappingField == null)) {
                    this.Taxonomy_MappingField = new XTypedList<Taxonomy_MappingLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Taxonomy_Mapping", ""));
                }
                return this.Taxonomy_MappingField;
            }
            set {
                if ((value == null)) {
                    this.Taxonomy_MappingField = null;
                }
                else {
                    if ((this.Taxonomy_MappingField == null)) {
                        this.Taxonomy_MappingField = XTypedList<Taxonomy_MappingLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Taxonomy_Mapping", ""));
                    }
                    else {
                        XTypedServices.SetList<Taxonomy_MappingLocalType>(this.Taxonomy_MappingField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Taxonomy_Mappings", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Taxonomy_MappingsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Taxonomy_Mapping", ""), typeof(Taxonomy_MappingLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
        /// </para>
        /// </summary>
        public partial class Taxonomy_MappingLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Taxonomy_MappingLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Taxonomy_MappingLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Taxonomy_MappingLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mapped_Node_Name", "")), new NamedContentModelEntity(XName.Get("Mapped_Node_ID", "")), new NamedContentModelEntity(XName.Get("Mapping_Fit", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public Taxonomy_MappingLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies the name of
            ///												the entry to which this weakness is being mapped in
            ///												taxonomy Taxonomy_Name. 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public string Mapped_Node_Name {
                get {
                    XElement x = this.GetElement(XName.Get("Mapped_Node_Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Mapped_Node_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies the ID of the
            ///												entry to which this weakness is being mapped in
            ///												taxonomy Taxonomy_Name. 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public string Mapped_Node_ID {
                get {
                    XElement x = this.GetElement(XName.Get("Mapped_Node_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Mapped_Node_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies how close to
            ///												the original taxonomy this node was mapped.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public string Mapping_Fit {
                get {
                    XElement x = this.GetElement(XName.Get("Mapping_Fit", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Mapping_Fit", ""), value, "Mapping_Fit", Mapping_FitLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This attribute identifies the taxonomy to
            ///											which this weakness has a similar or equivalent entry.
            ///										
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string Mapped_Taxonomy_Name {
                get {
                    XAttribute x = this.Attribute(XName.Get("Mapped_Taxonomy_Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Mapped_Taxonomy_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Taxonomy_Mapping", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Taxonomy_MappingLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Mapped_Node_Name", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Mapped_Node_ID", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Mapping_Fit", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class Mapping_FitLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Exact",
                                "CWE_More_Abstract",
                                "CWE_More_Specific",
                                "Imprecise",
                                "Perspective"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private Mapping_FitLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (White_Box_Definition+)
    /// </para>
    /// </summary>
    public partial class White_Box_DefinitionsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> White_Box_DefinitionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator White_Box_DefinitionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<White_Box_DefinitionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static White_Box_DefinitionsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("White_Box_Definition", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (White_Box_Definition+)
        /// </para>
        /// </summary>
        public White_Box_DefinitionsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element describes the weakness from a white
        ///									box perspective, meaning that the view includes the knowledge of
        ///									control flow, data flow, and all other inner workings of the
        ///									software in which the weakness exists. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (White_Box_Definition+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> White_Box_Definition {
            get {
                if ((this.White_Box_DefinitionField == null)) {
                    this.White_Box_DefinitionField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("White_Box_Definition", ""));
                }
                return this.White_Box_DefinitionField;
            }
            set {
                if ((value == null)) {
                    this.White_Box_DefinitionField = null;
                }
                else {
                    if ((this.White_Box_DefinitionField == null)) {
                        this.White_Box_DefinitionField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("White_Box_Definition", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.White_Box_DefinitionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("White_Box_Definitions", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<White_Box_DefinitionsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("White_Box_Definition", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Black_Box_Definition+)
    /// </para>
    /// </summary>
    public partial class Black_Box_DefinitionsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Black_Box_DefinitionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Black_Box_DefinitionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Black_Box_DefinitionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Black_Box_DefinitionsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Black_Box_Definition", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Black_Box_Definition+)
        /// </para>
        /// </summary>
        public Black_Box_DefinitionsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element contains elements describes the
        ///									weakness from an external perspective, meaning that the view
        ///									includes no knowledge of how the software is processing data
        ///									other than what can be inferred from observing the software's
        ///									behavior. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Black_Box_Definition+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Black_Box_Definition {
            get {
                if ((this.Black_Box_DefinitionField == null)) {
                    this.Black_Box_DefinitionField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Black_Box_Definition", ""));
                }
                return this.Black_Box_DefinitionField;
            }
            set {
                if ((value == null)) {
                    this.Black_Box_DefinitionField = null;
                }
                else {
                    if ((this.Black_Box_DefinitionField == null)) {
                        this.Black_Box_DefinitionField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Black_Box_Definition", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Black_Box_DefinitionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Black_Box_Definitions", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Black_Box_DefinitionsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Black_Box_Definition", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Related_Attack_Pattern+)
    /// </para>
    /// </summary>
    public partial class Related_Attack_PatternsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Related_Attack_PatternLocalType> Related_Attack_PatternField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Related_Attack_PatternsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Related_Attack_PatternsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Related_Attack_PatternsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Related_Attack_Pattern", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Related_Attack_Pattern+)
        /// </para>
        /// </summary>
        public Related_Attack_PatternsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  The Related_Attack_Pattern subelement identifies
        ///									a single attack pattern that is associated with this weakness.
        ///									Its only child, CAPEC_ID is required and identifies the related
        ///									CAPEC entry. It also has a required attribute, CAPEC_Version,
        ///									which identifies which version of CAPEC is being referenced.
        ///									More than one Related _Attack_Pattern element can exist, but
        ///									they must all be contained within a single
        ///									Related_Attack_Patterns element. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Related_Attack_Pattern+)
        /// </para>
        /// </summary>
        public IList<Category.Related_Attack_PatternsLocalType.Related_Attack_PatternLocalType> Related_Attack_Pattern {
            get {
                if ((this.Related_Attack_PatternField == null)) {
                    this.Related_Attack_PatternField = new XTypedList<Related_Attack_PatternLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Related_Attack_Pattern", ""));
                }
                return this.Related_Attack_PatternField;
            }
            set {
                if ((value == null)) {
                    this.Related_Attack_PatternField = null;
                }
                else {
                    if ((this.Related_Attack_PatternField == null)) {
                        this.Related_Attack_PatternField = XTypedList<Related_Attack_PatternLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Related_Attack_Pattern", ""));
                    }
                    else {
                        XTypedServices.SetList<Related_Attack_PatternLocalType>(this.Related_Attack_PatternField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Related_Attack_Patterns", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Related_Attack_PatternsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Related_Attack_Pattern", ""), typeof(Related_Attack_PatternLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CAPEC_ID)
        /// </para>
        /// </summary>
        public partial class Related_Attack_PatternLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Related_Attack_PatternLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Related_Attack_PatternLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Related_Attack_PatternLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CAPEC_ID", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CAPEC_ID)
            /// </para>
            /// </summary>
            public Related_Attack_PatternLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  The CAPEC_ID stores the value for the
            ///												related CAPEC entry identifier as a string. Only one
            ///												CAPEC_ID element can exist for each
            ///												Related_Attack_Pattern element. 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CAPEC_ID)
            /// </para>
            /// </summary>
            public string CAPEC_ID {
                get {
                    XElement x = this.GetElement(XName.Get("CAPEC_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("CAPEC_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// This attribute identifies which version of
            ///											CAPEC is being referenced.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string CAPEC_Version {
                get {
                    XAttribute x = this.Attribute(XName.Get("CAPEC_Version", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("CAPEC_Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Related_Attack_Pattern", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Related_Attack_PatternLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("CAPEC_ID", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
/// </para>
/// </summary>
public partial class Weakness : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Weakness(XElement xe) { return XTypedServices.ToXTypedElement<Weakness>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Weakness() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description", "")), new NamedContentModelEntity(XName.Get("Relationships", "")), new NamedContentModelEntity(XName.Get("Relationship_Notes", "")), new NamedContentModelEntity(XName.Get("Weakness_Ordinalities", "")), new NamedContentModelEntity(XName.Get("Applicable_Platforms", "")), new NamedContentModelEntity(XName.Get("Maintenance_Notes", "")), new NamedContentModelEntity(XName.Get("Background_Details", "")), new NamedContentModelEntity(XName.Get("Other_Notes", "")), new NamedContentModelEntity(XName.Get("Alternate_Terms", "")), new NamedContentModelEntity(XName.Get("Terminology_Notes", "")), new NamedContentModelEntity(XName.Get("Time_of_Introduction", "")), new NamedContentModelEntity(XName.Get("Modes_of_Introduction", "")), new NamedContentModelEntity(XName.Get("Enabling_Factors_for_Exploitation", "")), new NamedContentModelEntity(XName.Get("Likelihood_of_Exploit", "")), new NamedContentModelEntity(XName.Get("Common_Consequences", "")), new NamedContentModelEntity(XName.Get("Detection_Methods", "")), new NamedContentModelEntity(XName.Get("Potential_Mitigations", "")), new NamedContentModelEntity(XName.Get("Causal_Nature", "")), new NamedContentModelEntity(XName.Get("Demonstrative_Examples", "")), new NamedContentModelEntity(XName.Get("Observed_Examples", "")), new NamedContentModelEntity(XName.Get("Theoretical_Notes", "")), new NamedContentModelEntity(XName.Get("Functional_Areas", "")), new NamedContentModelEntity(XName.Get("Relevant_Properties", "")), new NamedContentModelEntity(XName.Get("Affected_Resources", "")), new NamedContentModelEntity(XName.Get("Research_Gaps", "")), new NamedContentModelEntity(XName.Get("References", "")), new NamedContentModelEntity(XName.Get("Taxonomy_Mappings", "")), new NamedContentModelEntity(XName.Get("White_Box_Definitions", "")), new NamedContentModelEntity(XName.Get("Black_Box_Definitions", "")), new NamedContentModelEntity(XName.Get("Related_Attack_Patterns", "")), new NamedContentModelEntity(XName.Get("Content_History", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Weakness() {
    }
    
    /// <summary>
    /// <para>
    ///  This field provides a description of this Structure, whether
    ///						it is a Weakness, Category or Compound Element. Its primary subelement is
    ///						Description_Summary which is intended to serve as a minimalistic description
    ///						which provides the information necessary to understand the primary focus of
    ///						this entry. Additionally, it has the subelement Extended_Description which
    ///						is optional and is used to provide further information pertaining to this
    ///						weakness. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public DescriptionLocalType Description {
        get {
            XElement x = this.GetElement(XName.Get("Description", ""));
            return ((DescriptionLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Description", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Relationships Relationships {
        get {
            XElement x = this.GetElement(XName.Get("Relationships", ""));
            return ((Relationships)(x));
        }
        set {
            this.SetElement(XName.Get("Relationships", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Relationship_Notes Relationship_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Relationship_Notes", ""));
            return ((Relationship_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Relationship_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains one or more Weakness_Ordinality
    ///						elements, each of which describes when this entry is primary - where the
    ///						weakness exists independent of other weaknesses, or when this entry might be
    ///						resultant - where the weakness is typically related to the presence of some
    ///						other weaknesses. This should be filled out for all Weakness Base and
    ///						Variant entries. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Weakness_OrdinalitiesLocalType Weakness_Ordinalities {
        get {
            XElement x = this.GetElement(XName.Get("Weakness_Ordinalities", ""));
            return ((Weakness_OrdinalitiesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Weakness_Ordinalities", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains the Languages, Operatingy_Systems,
    ///						Hardware_Architectures, Architectural_Paradigms, Environments,
    ///						Technology_Classes or Common Platforms on which this entry may exist. This
    ///						should be filled out as much as possible for all Compound_Element and
    ///						Weakness entries.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Applicable_PlatformsLocalType Applicable_Platforms {
        get {
            XElement x = this.GetElement(XName.Get("Applicable_Platforms", ""));
            return ((Applicable_PlatformsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Applicable_Platforms", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Maintenance_Notes Maintenance_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Maintenance_Notes", ""));
            return ((Maintenance_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Maintenance_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Background_Detail
    ///						elements, each of which holds information regarding the entry or any
    ///						technologies that are related to it, where the background information is not
    ///						related to the nature of the entry itself. It should be filled out where
    ///						appropriate. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Background_DetailsLocalType Background_Details {
        get {
            XElement x = this.GetElement(XName.Get("Background_Details", ""));
            return ((Background_DetailsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Background_Details", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Other_Notes Other_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Other_Notes", ""));
            return ((Other_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Other_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Alternate_Terms Alternate_Terms {
        get {
            XElement x = this.GetElement(XName.Get("Alternate_Terms", ""));
            return ((Alternate_Terms)(x));
        }
        set {
            this.SetElement(XName.Get("Alternate_Terms", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// This element contains one or more Terminology_Note elements
    ///						that each contain a discussion of terminology issues related to this
    ///						weakness. It is different from the Alternate_Terms element, which is focused
    ///						on discussion of specific terms that are commonly used. It should be filled
    ///						out in any entry for which there is no established terminology, or if there
    ///						are multiple uses of the same key term.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Terminology_NotesLocalType Terminology_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Terminology_Notes", ""));
            return ((Terminology_NotesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Terminology_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Time_of_Introduction element contains the points of time
    ///						in the software life cycle at which the weakness may be introduced. If there
    ///						are multiple points of time at which the weakness may be introduced, then
    ///						separate Introduction elements should be included for each. This element
    ///						should be populated for all weakness bases and variants. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Time_of_IntroductionLocalType Time_of_Introduction {
        get {
            XElement x = this.GetElement(XName.Get("Time_of_Introduction", ""));
            return ((Time_of_IntroductionLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Time_of_Introduction", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element describes the typical scenarios under which this
    ///						weakness can be introduced into the software. It should be filled out as
    ///						needed. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Modes_of_IntroductionLocalType Modes_of_Introduction {
        get {
            XElement x = this.GetElement(XName.Get("Modes_of_Introduction", ""));
            return ((Modes_of_IntroductionLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Modes_of_Introduction", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains one or more
    ///						Enabling_Factor_for_Exploitation, each of which points out conditions or
    ///						factors that could increase the likelihood of exploit for this weakness.
    ///						This should be filled out for most weakness bases. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Enabling_Factors_for_ExploitationLocalType Enabling_Factors_for_Exploitation {
        get {
            XElement x = this.GetElement(XName.Get("Enabling_Factors_for_Exploitation", ""));
            return ((Enabling_Factors_for_ExploitationLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Enabling_Factors_for_Exploitation", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains a rough estimate at the likelihood of
    ///						exploitation of an exposed weakness. Many factors can impact this value
    ///						which is why it should only be regarded as an approximation.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public string Likelihood_of_Exploit {
        get {
            XElement x = this.GetElement(XName.Get("Likelihood_of_Exploit", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("Likelihood_of_Exploit", ""), value, "Likelihood_of_Exploit", Likelihood_of_ExploitLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains the common consequences associated with
    ///						this weakness. It is populated by one or more individual Common_Consequence
    ///						subelements. This should be included and completed as much as possible for
    ///						all weaknesses. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Common_ConsequencesLocalType Common_Consequences {
        get {
            XElement x = this.GetElement(XName.Get("Common_Consequences", ""));
            return ((Common_ConsequencesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Common_Consequences", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Detection_Methods element is comprised of one or more
    ///						Detection_Method elements which identify methods that may be employed to
    ///						detect this weakness. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Detection_MethodsLocalType Detection_Methods {
        get {
            XElement x = this.GetElement(XName.Get("Detection_Methods", ""));
            return ((Detection_MethodsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Detection_Methods", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains the potential mitigations associated
    ///						with this weakness. It contains one or more mitigation subelements which
    ///						each represent individual mitigations for this weakness. This should be
    ///						included and completed to the extent possible for all weakness bases and
    ///						variants. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Potential_MitigationsLocalType Potential_Mitigations {
        get {
            XElement x = this.GetElement(XName.Get("Potential_Mitigations", ""));
            return ((Potential_MitigationsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Potential_Mitigations", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// This element describes the nature of the underlying cause of
    ///						the weakness. Is it an implicit underlying weakness or is it an issue of
    ///						behavior on the part of the software developer? Appropriate values are
    ///						either Implicit, occurring regardless of developer behavior, or Explicit, an
    ///						explicit weakness resulting from behavior of the developer.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public string Causal_Nature {
        get {
            XElement x = this.GetElement(XName.Get("Causal_Nature", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("Causal_Nature", ""), value, "Causal_Nature", Causal_NatureLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Demonstrative_Examples,
    ///						each of which should contain an example illustrating the problem being
    ///						described in this weakness. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Demonstrative_ExamplesLocalType Demonstrative_Examples {
        get {
            XElement x = this.GetElement(XName.Get("Demonstrative_Examples", ""));
            return ((Demonstrative_ExamplesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Demonstrative_Examples", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Observed_Example
    ///						elements, each of which is a reference to a specific observed instance of
    ///						this weakness in the real world; typically this will be a CVE reference.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Observed_ExamplesLocalType Observed_Examples {
        get {
            XElement x = this.GetElement(XName.Get("Observed_Examples", ""));
            return ((Observed_ExamplesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Observed_Examples", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// This element contains one or more Theoretical_Note elements
    ///						that each describe the weakness using vulnerability theory concepts. It
    ///						should be filled out as needed, especially in cases where the application of
    ///						vulnerability theory is not necessarily obvious for the
    ///						weakness.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Theoretical_NotesLocalType Theoretical_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Theoretical_Notes", ""));
            return ((Theoretical_NotesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Theoretical_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Functional_Area elements,
    ///						each of which identifies the functional area of the software in which the
    ///						weakness is most likely to occur. For example, CWE-178 Failure to Resolve
    ///						Case Sensitivity is likely to occur in functional areas of software related
    ///						to file processing and credentials. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Functional_AreasLocalType Functional_Areas {
        get {
            XElement x = this.GetElement(XName.Get("Functional_Areas", ""));
            return ((Functional_AreasLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Functional_Areas", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Relevant_Property
    ///						elements. Each Relevant_Property element identifies a property that is
    ///						required by the code or a resource in order to function as specified.
    ///						Correctly labeling all of the relevant properties can help to figure out
    ///						what the root cause of a vulnerability might be. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Relevant_PropertiesLocalType Relevant_Properties {
        get {
            XElement x = this.GetElement(XName.Get("Relevant_Properties", ""));
            return ((Relevant_PropertiesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Relevant_Properties", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element identifies system resources affected by this
    ///						entry. It is populated by Affected_Resource elements. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Affected_ResourcesLocalType Affected_Resources {
        get {
            XElement x = this.GetElement(XName.Get("Affected_Resources", ""));
            return ((Affected_ResourcesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Affected_Resources", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Research_Gaps Research_Gaps {
        get {
            XElement x = this.GetElement(XName.Get("Research_Gaps", ""));
            return ((Research_Gaps)(x));
        }
        set {
            this.SetElement(XName.Get("Research_Gaps", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The References element contains one or more Reference
    ///						elements, each of which provide further reading and insight into this
    ///						weakness. This may include an alternate interpretation of this weakness, a
    ///						deeper technical breakdown of this weakness such as a research paper, deeper
    ///						information on mitigations, or background details on this technical area.
    ///						This should be filled out for all weakness bases and some variants.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Reference_List_Type References {
        get {
            XElement x = this.GetElement(XName.Get("References", ""));
            return ((Reference_List_Type)(x));
        }
        set {
            this.SetElement(XName.Get("References", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// The Taxonomy_Mappings element contains one or more
    ///						Taxonomy_Mapping structures which provide a mapping from this entry to an
    ///						entry in a different taxonomy.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Taxonomy_MappingsLocalType Taxonomy_Mappings {
        get {
            XElement x = this.GetElement(XName.Get("Taxonomy_Mappings", ""));
            return ((Taxonomy_MappingsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Taxonomy_Mappings", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more White_Box_Definition
    ///						elements, each of which describes the weakness from a white box perspective,
    ///						meaning that the view includes the knowledge of control flow, data flow, and
    ///						all other inner workings of the software in which the weakness exists.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public White_Box_DefinitionsLocalType White_Box_Definitions {
        get {
            XElement x = this.GetElement(XName.Get("White_Box_Definitions", ""));
            return ((White_Box_DefinitionsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("White_Box_Definitions", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Black_Box_Definition
    ///						elements, each of which describes the weakness from an external perspective,
    ///						meaning that the view includes no knowledge of how the software is
    ///						processing data other than what can be inferred from observing the
    ///						software's behavior. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Black_Box_DefinitionsLocalType Black_Box_Definitions {
        get {
            XElement x = this.GetElement(XName.Get("Black_Box_Definitions", ""));
            return ((Black_Box_DefinitionsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Black_Box_Definitions", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Related_Attack_Patterns element contains all references
    ///						to CAPEC which will identify related attack patterns to this weakness. It
    ///						has one or more Related_Attack_Pattern elements as children and each child
    ///						will point to a single CAPEC entry which is associated with this weakness.
    ///						This should be filled out to the extent possible for most weaknesses.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Related_Attack_PatternsLocalType Related_Attack_Patterns {
        get {
            XElement x = this.GetElement(XName.Get("Related_Attack_Patterns", ""));
            return ((Related_Attack_PatternsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Related_Attack_Patterns", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Content_History Content_History {
        get {
            XElement x = this.GetElement(XName.Get("Content_History", ""));
            return ((Content_History)(x));
        }
        set {
            this.SetElement(XName.Get("Content_History", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This attribute provides a unique identifier for the entry. It
    ///						will be static for the lifetime of the entry. In the event that this entry
    ///						becomes deprecated, the ID will not be reused and a pointer will be left in
    ///						this entry to the replacement. This is required for all Weaknesses.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public decimal ID {
        get {
            XAttribute x = this.Attribute(XName.Get("ID", ""));
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This attribute is the string which identifies the entry. The
    ///						name should focus on the weakness being described in the entry and should
    ///						avoid focusing on the attack which exploits the weakness or the consequences
    ///						of exploiting the weakness. All words in the entry name should be
    ///						capitalized except for articles and prepositions unless they begin or end
    ///						the name. Subsequent words in a hyphenated chain are also not capitalized.
    ///						This is required for all Weaknesses. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Name {
        get {
            XAttribute x = this.Attribute(XName.Get("Name", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Weakness_Abstraction attribute defines the abstraction
    ///						level for this weakness. Acceptable values are "Class", which is the most
    ///						abstract type of Weakness such as CWE-362 Race Conditions, "Base" which is a
    ///						more specific type of weakness that is still mostly independent of a
    ///						specific resource or technology such as CWE-567 Unsynchronized Access to
    ///						Shared Data, and "Variant" which is a weakness specific to a particular
    ///						resource, technology or context. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Weakness_Abstraction {
        get {
            XAttribute x = this.Attribute(XName.Get("Weakness_Abstraction", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Weakness_Abstraction", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// The Status attribute defines the status level for this
    ///						weakness.
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Status {
        get {
            XAttribute x = this.Attribute(XName.Get("Status", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Weakness", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Weakness Load(string xmlFile) {
        return XTypedServices.Load<Weakness>(xmlFile);
    }
    
    public static Weakness Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Weakness>(xmlFile);
    }
    
    public static Weakness Parse(string xml) {
        return XTypedServices.Parse<Weakness>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Weakness>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Description", ""), typeof(DescriptionLocalType));
        localElementDictionary.Add(XName.Get("Relationships", ""), typeof(Relationships));
        localElementDictionary.Add(XName.Get("Relationship_Notes", ""), typeof(Relationship_Notes));
        localElementDictionary.Add(XName.Get("Weakness_Ordinalities", ""), typeof(Weakness_OrdinalitiesLocalType));
        localElementDictionary.Add(XName.Get("Applicable_Platforms", ""), typeof(Applicable_PlatformsLocalType));
        localElementDictionary.Add(XName.Get("Maintenance_Notes", ""), typeof(Maintenance_Notes));
        localElementDictionary.Add(XName.Get("Background_Details", ""), typeof(Background_DetailsLocalType));
        localElementDictionary.Add(XName.Get("Other_Notes", ""), typeof(Other_Notes));
        localElementDictionary.Add(XName.Get("Alternate_Terms", ""), typeof(Alternate_Terms));
        localElementDictionary.Add(XName.Get("Terminology_Notes", ""), typeof(Terminology_NotesLocalType));
        localElementDictionary.Add(XName.Get("Time_of_Introduction", ""), typeof(Time_of_IntroductionLocalType));
        localElementDictionary.Add(XName.Get("Modes_of_Introduction", ""), typeof(Modes_of_IntroductionLocalType));
        localElementDictionary.Add(XName.Get("Enabling_Factors_for_Exploitation", ""), typeof(Enabling_Factors_for_ExploitationLocalType));
        localElementDictionary.Add(XName.Get("Likelihood_of_Exploit", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Common_Consequences", ""), typeof(Common_ConsequencesLocalType));
        localElementDictionary.Add(XName.Get("Detection_Methods", ""), typeof(Detection_MethodsLocalType));
        localElementDictionary.Add(XName.Get("Potential_Mitigations", ""), typeof(Potential_MitigationsLocalType));
        localElementDictionary.Add(XName.Get("Causal_Nature", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Demonstrative_Examples", ""), typeof(Demonstrative_ExamplesLocalType));
        localElementDictionary.Add(XName.Get("Observed_Examples", ""), typeof(Observed_ExamplesLocalType));
        localElementDictionary.Add(XName.Get("Theoretical_Notes", ""), typeof(Theoretical_NotesLocalType));
        localElementDictionary.Add(XName.Get("Functional_Areas", ""), typeof(Functional_AreasLocalType));
        localElementDictionary.Add(XName.Get("Relevant_Properties", ""), typeof(Relevant_PropertiesLocalType));
        localElementDictionary.Add(XName.Get("Affected_Resources", ""), typeof(Affected_ResourcesLocalType));
        localElementDictionary.Add(XName.Get("Research_Gaps", ""), typeof(Research_Gaps));
        localElementDictionary.Add(XName.Get("References", ""), typeof(Reference_List_Type));
        localElementDictionary.Add(XName.Get("Taxonomy_Mappings", ""), typeof(Taxonomy_MappingsLocalType));
        localElementDictionary.Add(XName.Get("White_Box_Definitions", ""), typeof(White_Box_DefinitionsLocalType));
        localElementDictionary.Add(XName.Get("Black_Box_Definitions", ""), typeof(Black_Box_DefinitionsLocalType));
        localElementDictionary.Add(XName.Get("Related_Attack_Patterns", ""), typeof(Related_Attack_PatternsLocalType));
        localElementDictionary.Add(XName.Get("Content_History", ""), typeof(Content_History));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Description_Summary, Extended_Description?)
    /// </para>
    /// </summary>
    public partial class DescriptionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DescriptionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DescriptionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DescriptionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description_Summary", "")), new NamedContentModelEntity(XName.Get("Extended_Description", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Description_Summary, Extended_Description?)
        /// </para>
        /// </summary>
        public DescriptionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This description should be short and should limit
        ///									itself to describing the key points that define this entry.
        ///									Further explanation can be included in the extended description
        ///									element. This is required for all entries. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Description_Summary, Extended_Description?)
        /// </para>
        /// </summary>
        public string Description_Summary {
            get {
                XElement x = this.GetElement(XName.Get("Description_Summary", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Description_Summary", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element provides a place for details
        ///									important to the description of this entry to be included that
        ///									are not necessary to convey the fundamental concept behind the
        ///									entry. This is not required for all entries and should only be
        ///									included where appropriate. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description_Summary, Extended_Description?)
        /// </para>
        /// </summary>
        public Structured_Text_Type Extended_Description {
            get {
                XElement x = this.GetElement(XName.Get("Extended_Description", ""));
                return ((Structured_Text_Type)(x));
            }
            set {
                this.SetElement(XName.Get("Extended_Description", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Description", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DescriptionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Description_Summary", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Extended_Description", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Weakness_Ordinality+)
    /// </para>
    /// </summary>
    public partial class Weakness_OrdinalitiesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Weakness_OrdinalityLocalType> Weakness_OrdinalityField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Weakness_OrdinalitiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Weakness_OrdinalitiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Weakness_OrdinalitiesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Weakness_Ordinality", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Weakness_Ordinality+)
        /// </para>
        /// </summary>
        public Weakness_OrdinalitiesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element describes when this entry is primary
        ///									- where the weakness exists independent of other weaknesses, or
        ///									when this entry might be resultant - where the weakness is
        ///									typically related to the presence of some other weaknesses. The
        ///									Ordinality subelement identifies whether or not we are providing
        ///									context around when this entry is primary, or resultant. The
        ///									Ordinality_Description contains the description of the context
        ///									in which this entry is primary or resultant. It is important to
        ///									note that it is possible for the same entry to be primary in
        ///									some instances and resultant in others.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Weakness_Ordinality+)
        /// </para>
        /// </summary>
        public IList<Weakness.Weakness_OrdinalitiesLocalType.Weakness_OrdinalityLocalType> Weakness_Ordinality {
            get {
                if ((this.Weakness_OrdinalityField == null)) {
                    this.Weakness_OrdinalityField = new XTypedList<Weakness_OrdinalityLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Weakness_Ordinality", ""));
                }
                return this.Weakness_OrdinalityField;
            }
            set {
                if ((value == null)) {
                    this.Weakness_OrdinalityField = null;
                }
                else {
                    if ((this.Weakness_OrdinalityField == null)) {
                        this.Weakness_OrdinalityField = XTypedList<Weakness_OrdinalityLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Weakness_Ordinality", ""));
                    }
                    else {
                        XTypedServices.SetList<Weakness_OrdinalityLocalType>(this.Weakness_OrdinalityField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Weakness_Ordinalities", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Weakness_OrdinalitiesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Weakness_Ordinality", ""), typeof(Weakness_OrdinalityLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Ordinality, Ordinality_Description?)
        /// </para>
        /// </summary>
        public partial class Weakness_OrdinalityLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Weakness_OrdinalityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Weakness_OrdinalityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Weakness_OrdinalityLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Ordinality", "")), new NamedContentModelEntity(XName.Get("Ordinality_Description", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Ordinality, Ordinality_Description?)
            /// </para>
            /// </summary>
            public Weakness_OrdinalityLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// This element indicates whether this
            ///												weakness exists independent of other weaknesses,
            ///												Primary, or whether it is the result of the presence
            ///												of some other weaknesses,
            ///												Resultant.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Ordinality, Ordinality_Description?)
            /// </para>
            /// </summary>
            public string Ordinality {
                get {
                    XElement x = this.GetElement(XName.Get("Ordinality", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Ordinality", ""), value, "Ordinality", OrdinalityLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// This element describes context in
            ///												which this entry is either Primary or Resultant,
            ///												depending on the corresponding value for
            ///												Ordinality.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Ordinality, Ordinality_Description?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Ordinality_Description {
                get {
                    XElement x = this.GetElement(XName.Get("Ordinality_Description", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Ordinality_Description", ""), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Weakness_Ordinality", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Weakness_OrdinalityLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Ordinality", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Ordinality_Description", ""), typeof(Structured_Text_Type));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class OrdinalityLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Primary",
                                "Resultant"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private OrdinalityLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
    /// </para>
    /// </summary>
    public partial class Applicable_PlatformsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Applicable_PlatformsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Applicable_PlatformsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Applicable_PlatformsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Languages", "")), new NamedContentModelEntity(XName.Get("Operating_Systems", "")), new NamedContentModelEntity(XName.Get("Hardware_Architectures", "")), new NamedContentModelEntity(XName.Get("Architectural_Paradigms", "")), new NamedContentModelEntity(XName.Get("Environments", "")), new NamedContentModelEntity(XName.Get("Technology_Classes", "")), new NamedContentModelEntity(XName.Get("Common_Platform_References", "")), new NamedContentModelEntity(XName.Get("Platform_Notes", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Applicable_PlatformsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This structure contains one or more Language
        ///									elements which each represent a language in which this weakness
        ///									may exist.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Languages_List_Type Languages {
            get {
                XElement x = this.GetElement(XName.Get("Languages", ""));
                return ((Languages_List_Type)(x));
            }
            set {
                this.SetElement(XName.Get("Languages", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more
        ///									Operating_System subelements which each represent an OS in which
        ///									this weakness is likely to exist. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Operating_SystemsLocalType Operating_Systems {
            get {
                XElement x = this.GetElement(XName.Get("Operating_Systems", ""));
                return ((Operating_SystemsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Operating_Systems", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more
        ///									Hardware_Architecture subelements which each represent an
        ///									architecture in which this weakness is likely to exist.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Hardware_ArchitecturesLocalType Hardware_Architectures {
            get {
                XElement x = this.GetElement(XName.Get("Hardware_Architectures", ""));
                return ((Hardware_ArchitecturesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Hardware_Architectures", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more
        ///									Architectural_Paradigm subelements which each represent an
        ///									architecture on which this weakness is likely to exist.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Architectural_ParadigmsLocalType Architectural_Paradigms {
            get {
                XElement x = this.GetElement(XName.Get("Architectural_Paradigms", ""));
                return ((Architectural_ParadigmsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Architectural_Paradigms", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more Environment
        ///									subelements which each represent an environment in which this
        ///									weakness may exist. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public EnvironmentsLocalType Environments {
            get {
                XElement x = this.GetElement(XName.Get("Environments", ""));
                return ((EnvironmentsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Environments", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more individual
        ///									Technology_Class subelements which each represent a technology
        ///									class in which this weakness is likely to exist.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Technology_ClassesLocalType Technology_Classes {
            get {
                XElement x = this.GetElement(XName.Get("Technology_Classes", ""));
                return ((Technology_ClassesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Technology_Classes", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Common_Platforms element contains references
        ///									to the Common Platform Enumeration, CPE, which will identify
        ///									common platforms on which this weakness may occur. It has one or
        ///									more Common_Platform elements as children and each child will
        ///									point to a single CPE entry which is associated with this
        ///									weakness. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Common_Platform_ReferencesLocalType Common_Platform_References {
            get {
                XElement x = this.GetElement(XName.Get("Common_Platform_References", ""));
                return ((Common_Platform_ReferencesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Common_Platform_References", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element provides additional information
        ///									related to the applicable platforms of a weakness if needed.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Structured_Text_Type Platform_Notes {
            get {
                XElement x = this.GetElement(XName.Get("Platform_Notes", ""));
                return ((Structured_Text_Type)(x));
            }
            set {
                this.SetElement(XName.Get("Platform_Notes", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Applicable_Platforms", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Applicable_PlatformsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Languages", ""), typeof(Languages_List_Type));
            localElementDictionary.Add(XName.Get("Operating_Systems", ""), typeof(Operating_SystemsLocalType));
            localElementDictionary.Add(XName.Get("Hardware_Architectures", ""), typeof(Hardware_ArchitecturesLocalType));
            localElementDictionary.Add(XName.Get("Architectural_Paradigms", ""), typeof(Architectural_ParadigmsLocalType));
            localElementDictionary.Add(XName.Get("Environments", ""), typeof(EnvironmentsLocalType));
            localElementDictionary.Add(XName.Get("Technology_Classes", ""), typeof(Technology_ClassesLocalType));
            localElementDictionary.Add(XName.Get("Common_Platform_References", ""), typeof(Common_Platform_ReferencesLocalType));
            localElementDictionary.Add(XName.Get("Platform_Notes", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Operating_System*, Operating_System_Class*)
        /// </para>
        /// </summary>
        public partial class Operating_SystemsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Operating_SystemLocalType> Operating_SystemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Operating_System_ClassLocalType> Operating_System_ClassField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Operating_SystemsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Operating_SystemsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Operating_SystemsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Operating_System", "")), new NamedContentModelEntity(XName.Get("Operating_System_Class", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Operating_System*, Operating_System_Class*)
            /// </para>
            /// </summary>
            public Operating_SystemsLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Operating_System in which this entry may exist and
            ///												with what frequency on the specified OS.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Operating_System*, Operating_System_Class*)
            /// </para>
            /// </summary>
            public IList<Weakness.Applicable_PlatformsLocalType.Operating_SystemsLocalType.Operating_SystemLocalType> Operating_System {
                get {
                    if ((this.Operating_SystemField == null)) {
                        this.Operating_SystemField = new XTypedList<Operating_SystemLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Operating_System", ""));
                    }
                    return this.Operating_SystemField;
                }
                set {
                    if ((value == null)) {
                        this.Operating_SystemField = null;
                    }
                    else {
                        if ((this.Operating_SystemField == null)) {
                            this.Operating_SystemField = XTypedList<Operating_SystemLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Operating_System", ""));
                        }
                        else {
                            XTypedServices.SetList<Operating_SystemLocalType>(this.Operating_SystemField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												class of operating systems, specified in
            ///												Operating_System_Class_Description, in which this
            ///												entry may exist. Suggested values include: Linux,
            ///												Windows, UNIX, BSD, and Mac OS.
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Operating_System*, Operating_System_Class*)
            /// </para>
            /// </summary>
            public IList<Weakness.Applicable_PlatformsLocalType.Operating_SystemsLocalType.Operating_System_ClassLocalType> Operating_System_Class {
                get {
                    if ((this.Operating_System_ClassField == null)) {
                        this.Operating_System_ClassField = new XTypedList<Operating_System_ClassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Operating_System_Class", ""));
                    }
                    return this.Operating_System_ClassField;
                }
                set {
                    if ((value == null)) {
                        this.Operating_System_ClassField = null;
                    }
                    else {
                        if ((this.Operating_System_ClassField == null)) {
                            this.Operating_System_ClassField = XTypedList<Operating_System_ClassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Operating_System_Class", ""));
                        }
                        else {
                            XTypedServices.SetList<Operating_System_ClassLocalType>(this.Operating_System_ClassField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Operating_Systems", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Operating_SystemsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Operating_System", ""), typeof(Operating_SystemLocalType));
                localElementDictionary.Add(XName.Get("Operating_System_Class", ""), typeof(Operating_System_ClassLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Operating_SystemLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Operating_SystemLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Operating_SystemLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Operating_SystemLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												operating systems in which this weakness is likely
                ///												to exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Operating_System_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Operating_System_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Operating_System_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified operating
                ///												system.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Operating_System", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Operating_SystemLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class Operating_System_ClassLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Operating_System_ClassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Operating_System_ClassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Operating_System_ClassLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												families or groups of operating systems in which
                ///												this weakness is likely to exist.
                ///												
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Operating_System_Class_Description {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Operating_System_Class_Description", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Operating_System_Class_Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified operating
                ///												system within this operating system
                ///												class.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Operating_System_Class", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Operating_System_ClassLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
        /// </para>
        /// </summary>
        public partial class Hardware_ArchitecturesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Hardware_ArchitectureLocalType> Hardware_ArchitectureField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Hardware_Architecture_ClassLocalType> Hardware_Architecture_ClassField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Hardware_ArchitecturesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Hardware_ArchitecturesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Hardware_ArchitecturesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Hardware_Architecture", "")), new NamedContentModelEntity(XName.Get("Hardware_Architecture_Class", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
            /// </para>
            /// </summary>
            public Hardware_ArchitecturesLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Hardware_Architecture on which this entry may exist
            ///												and with what frequency on the specified
            ///												architecture. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
            /// </para>
            /// </summary>
            public IList<Weakness.Applicable_PlatformsLocalType.Hardware_ArchitecturesLocalType.Hardware_ArchitectureLocalType> Hardware_Architecture {
                get {
                    if ((this.Hardware_ArchitectureField == null)) {
                        this.Hardware_ArchitectureField = new XTypedList<Hardware_ArchitectureLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Hardware_Architecture", ""));
                    }
                    return this.Hardware_ArchitectureField;
                }
                set {
                    if ((value == null)) {
                        this.Hardware_ArchitectureField = null;
                    }
                    else {
                        if ((this.Hardware_ArchitectureField == null)) {
                            this.Hardware_ArchitectureField = XTypedList<Hardware_ArchitectureLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Hardware_Architecture", ""));
                        }
                        else {
                            XTypedServices.SetList<Hardware_ArchitectureLocalType>(this.Hardware_ArchitectureField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												class of hardware architectures, specified in
            ///												Hardware_Architecture_Class_Name, in which this
            ///												entry may exist. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
            /// </para>
            /// </summary>
            public IList<Weakness.Applicable_PlatformsLocalType.Hardware_ArchitecturesLocalType.Hardware_Architecture_ClassLocalType> Hardware_Architecture_Class {
                get {
                    if ((this.Hardware_Architecture_ClassField == null)) {
                        this.Hardware_Architecture_ClassField = new XTypedList<Hardware_Architecture_ClassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Hardware_Architecture_Class", ""));
                    }
                    return this.Hardware_Architecture_ClassField;
                }
                set {
                    if ((value == null)) {
                        this.Hardware_Architecture_ClassField = null;
                    }
                    else {
                        if ((this.Hardware_Architecture_ClassField == null)) {
                            this.Hardware_Architecture_ClassField = XTypedList<Hardware_Architecture_ClassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Hardware_Architecture_Class", ""));
                        }
                        else {
                            XTypedServices.SetList<Hardware_Architecture_ClassLocalType>(this.Hardware_Architecture_ClassField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Hardware_Architectures", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Hardware_ArchitecturesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Hardware_Architecture", ""), typeof(Hardware_ArchitectureLocalType));
                localElementDictionary.Add(XName.Get("Hardware_Architecture_Class", ""), typeof(Hardware_Architecture_ClassLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Hardware_ArchitectureLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Hardware_ArchitectureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Hardware_ArchitectureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Hardware_ArchitectureLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												architectures on which this weakness is likely to
                ///												exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Hardware_Architecture_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Hardware_Architecture_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Hardware_Architecture_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified hardware
                ///												architecture.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Hardware_Architecture", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Hardware_ArchitectureLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class Hardware_Architecture_ClassLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Hardware_Architecture_ClassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Hardware_Architecture_ClassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Hardware_Architecture_ClassLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												architectures in which this weakness is likely to
                ///												exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Hardware_Architecture_Class_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Hardware_Architecture_Class_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Hardware_Architecture_Class_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified hardware
                ///												architecture within the specified hardware
                ///												architecture class.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Hardware_Architecture_Class", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Hardware_Architecture_ClassLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Architectural_Paradigm+)
        /// </para>
        /// </summary>
        public partial class Architectural_ParadigmsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Architectural_ParadigmLocalType> Architectural_ParadigmField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Architectural_ParadigmsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Architectural_ParadigmsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Architectural_ParadigmsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Architectural_Paradigm", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Architectural_Paradigm+)
            /// </para>
            /// </summary>
            public Architectural_ParadigmsLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Architectural_Paradigm in which this entry may exist
            ///												and with what frequency in the specified paradigm.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Architectural_Paradigm+)
            /// </para>
            /// </summary>
            public IList<Weakness.Applicable_PlatformsLocalType.Architectural_ParadigmsLocalType.Architectural_ParadigmLocalType> Architectural_Paradigm {
                get {
                    if ((this.Architectural_ParadigmField == null)) {
                        this.Architectural_ParadigmField = new XTypedList<Architectural_ParadigmLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Architectural_Paradigm", ""));
                    }
                    return this.Architectural_ParadigmField;
                }
                set {
                    if ((value == null)) {
                        this.Architectural_ParadigmField = null;
                    }
                    else {
                        if ((this.Architectural_ParadigmField == null)) {
                            this.Architectural_ParadigmField = XTypedList<Architectural_ParadigmLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Architectural_Paradigm", ""));
                        }
                        else {
                            XTypedServices.SetList<Architectural_ParadigmLocalType>(this.Architectural_ParadigmField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Architectural_Paradigms", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Architectural_ParadigmsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Architectural_Paradigm", ""), typeof(Architectural_ParadigmLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Architectural_ParadigmLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Architectural_ParadigmLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Architectural_ParadigmLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Architectural_ParadigmLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												paradigms in which this weakness is likely to
                ///												exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Architectural_Paradigm_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Architectural_Paradigm_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Architectural_Paradigm_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified
                ///												paradigm.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Architectural_Paradigm", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Architectural_ParadigmLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Environment+)
        /// </para>
        /// </summary>
        public partial class EnvironmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<EnvironmentLocalType> EnvironmentField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator EnvironmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EnvironmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EnvironmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Environment", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Environment+)
            /// </para>
            /// </summary>
            public EnvironmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Environment in which this entry may exist and with
            ///												what frequency in the specified environment.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Environment+)
            /// </para>
            /// </summary>
            public IList<Weakness.Applicable_PlatformsLocalType.EnvironmentsLocalType.EnvironmentLocalType> Environment {
                get {
                    if ((this.EnvironmentField == null)) {
                        this.EnvironmentField = new XTypedList<EnvironmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Environment", ""));
                    }
                    return this.EnvironmentField;
                }
                set {
                    if ((value == null)) {
                        this.EnvironmentField = null;
                    }
                    else {
                        if ((this.EnvironmentField == null)) {
                            this.EnvironmentField = XTypedList<EnvironmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Environment", ""));
                        }
                        else {
                            XTypedServices.SetList<EnvironmentLocalType>(this.EnvironmentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Environments", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EnvironmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Environment", ""), typeof(EnvironmentLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class EnvironmentLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator EnvironmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EnvironmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public EnvironmentLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This attribute is the name of
                ///												the Environment we are identifying.
                ///												
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Environment_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Environment_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Environment_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified
                ///												environment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Environment", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<EnvironmentLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Technology_Class+)
        /// </para>
        /// </summary>
        public partial class Technology_ClassesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Technology_ClassLocalType> Technology_ClassField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Technology_ClassesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Technology_ClassesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Technology_ClassesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Technology_Class", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Technology_Class+)
            /// </para>
            /// </summary>
            public Technology_ClassesLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Technology_Class in which this entry may exist and
            ///												with what frequency in the specified
            ///												class.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Technology_Class+)
            /// </para>
            /// </summary>
            public IList<Weakness.Applicable_PlatformsLocalType.Technology_ClassesLocalType.Technology_ClassLocalType> Technology_Class {
                get {
                    if ((this.Technology_ClassField == null)) {
                        this.Technology_ClassField = new XTypedList<Technology_ClassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Technology_Class", ""));
                    }
                    return this.Technology_ClassField;
                }
                set {
                    if ((value == null)) {
                        this.Technology_ClassField = null;
                    }
                    else {
                        if ((this.Technology_ClassField == null)) {
                            this.Technology_ClassField = XTypedList<Technology_ClassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Technology_Class", ""));
                        }
                        else {
                            XTypedServices.SetList<Technology_ClassLocalType>(this.Technology_ClassField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Technology_Classes", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Technology_ClassesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Technology_Class", ""), typeof(Technology_ClassLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Technology_ClassLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Technology_ClassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Technology_ClassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Technology_ClassLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies a
                ///												technology class in which this weakness is likely
                ///												to exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Technology_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Technology_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Technology_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified technology
                ///												class.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Technology_Class", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Technology_ClassLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Common_Platform_Reference+)
        /// </para>
        /// </summary>
        public partial class Common_Platform_ReferencesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Common_Platform_ReferenceLocalType> Common_Platform_ReferenceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Common_Platform_ReferencesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Common_Platform_ReferencesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Common_Platform_ReferencesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Common_Platform_Reference", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Common_Platform_Reference+)
            /// </para>
            /// </summary>
            public Common_Platform_ReferencesLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  The Common_Platform subelement
            ///												identifies a single platform that is associated with
            ///												this weakness. Its only child, CPE_ID is required
            ///												and identifies the related CPE entry. More than one
            ///												Common_Platform_Reference element can exist, but
            ///												they must all be contained within a single
            ///												Common_Platform_References element.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Common_Platform_Reference+)
            /// </para>
            /// </summary>
            public IList<Weakness.Applicable_PlatformsLocalType.Common_Platform_ReferencesLocalType.Common_Platform_ReferenceLocalType> Common_Platform_Reference {
                get {
                    if ((this.Common_Platform_ReferenceField == null)) {
                        this.Common_Platform_ReferenceField = new XTypedList<Common_Platform_ReferenceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Common_Platform_Reference", ""));
                    }
                    return this.Common_Platform_ReferenceField;
                }
                set {
                    if ((value == null)) {
                        this.Common_Platform_ReferenceField = null;
                    }
                    else {
                        if ((this.Common_Platform_ReferenceField == null)) {
                            this.Common_Platform_ReferenceField = XTypedList<Common_Platform_ReferenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Common_Platform_Reference", ""));
                        }
                        else {
                            XTypedServices.SetList<Common_Platform_ReferenceLocalType>(this.Common_Platform_ReferenceField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Common_Platform_References", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Common_Platform_ReferencesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Common_Platform_Reference", ""), typeof(Common_Platform_ReferenceLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CPE_ID)
            /// </para>
            /// </summary>
            public partial class Common_Platform_ReferenceLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator Common_Platform_ReferenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Common_Platform_ReferenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static Common_Platform_ReferenceLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CPE_ID", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (CPE_ID)
                /// </para>
                /// </summary>
                public Common_Platform_ReferenceLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  The CPE_ID stores the value for
                ///												the related CPE entry identifier as a string. Only
                ///												one CPE_ID element can exist for each
                ///												Common_Platform element. 
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CPE_ID)
                /// </para>
                /// </summary>
                public string CPE_ID {
                    get {
                        XElement x = this.GetElement(XName.Get("CPE_ID", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("CPE_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Common_Platform_Reference", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Common_Platform_ReferenceLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("CPE_ID", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Background_Detail+)
    /// </para>
    /// </summary>
    public partial class Background_DetailsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Background_DetailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Background_DetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Background_DetailsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Background_DetailsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Background_Detail", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Background_Detail+)
        /// </para>
        /// </summary>
        public Background_DetailsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element contains background information
        ///									regarding the entry or any technologies that are related to it,
        ///									where the background information is not related to the nature of
        ///									the weakness itself. It should be filled out where appropriate.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Background_Detail+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Background_Detail {
            get {
                if ((this.Background_DetailField == null)) {
                    this.Background_DetailField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Background_Detail", ""));
                }
                return this.Background_DetailField;
            }
            set {
                if ((value == null)) {
                    this.Background_DetailField = null;
                }
                else {
                    if ((this.Background_DetailField == null)) {
                        this.Background_DetailField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Background_Detail", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Background_DetailField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Background_Details", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Background_DetailsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Background_Detail", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Terminology_Note+)
    /// </para>
    /// </summary>
    public partial class Terminology_NotesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Terminology_NoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Terminology_NotesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Terminology_NotesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Terminology_NotesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Terminology_Note", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Terminology_Note+)
        /// </para>
        /// </summary>
        public Terminology_NotesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element is used for general discussion of
        ///									terminology issues associated with this weakness. It is
        ///									different from the Alternate_Terms element, which is focused on
        ///									discussion of specific terms that are commonly used. It should
        ///									be filled out in any entry for which there is no established
        ///									terminology, or if there are multiple uses of the same key
        ///									term.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Terminology_Note+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Terminology_Note {
            get {
                if ((this.Terminology_NoteField == null)) {
                    this.Terminology_NoteField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Terminology_Note", ""));
                }
                return this.Terminology_NoteField;
            }
            set {
                if ((value == null)) {
                    this.Terminology_NoteField = null;
                }
                else {
                    if ((this.Terminology_NoteField == null)) {
                        this.Terminology_NoteField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Terminology_Note", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Terminology_NoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Terminology_Notes", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Terminology_NotesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Terminology_Note", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Introductory_Phase*)
    /// </para>
    /// </summary>
    public partial class Time_of_IntroductionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Introductory_PhaseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Time_of_IntroductionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Time_of_IntroductionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Time_of_IntroductionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Introductory_Phase", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Introductory_Phase*)
        /// </para>
        /// </summary>
        public Time_of_IntroductionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies the point of time in the
        ///									software life cycle at which the weakness may be introduced.
        ///									Possible values are Architecture and Design, Implementation and
        ///									Operational to name a few. If there are multiple points of time
        ///									at which the weakness may be introduced, then separate
        ///									Introductory_Phase elements should be included for each. This
        ///									element should be populated for all weakness bases and variants.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Introductory_Phase*)
        /// </para>
        /// </summary>
        public IList<string> Introductory_Phase {
            get {
                if ((this.Introductory_PhaseField == null)) {
                    this.Introductory_PhaseField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Introductory_Phase", ""));
                }
                return this.Introductory_PhaseField;
            }
            set {
                if ((value == null)) {
                    this.Introductory_PhaseField = null;
                }
                else {
                    if ((this.Introductory_PhaseField == null)) {
                        this.Introductory_PhaseField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Introductory_Phase", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Introductory_PhaseField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Time_of_Introduction", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Time_of_IntroductionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Introductory_Phase", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Mode_of_Introduction*)
    /// </para>
    /// </summary>
    public partial class Modes_of_IntroductionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Mode_of_IntroductionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Modes_of_IntroductionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Modes_of_IntroductionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Modes_of_IntroductionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mode_of_Introduction", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Mode_of_Introduction*)
        /// </para>
        /// </summary>
        public Modes_of_IntroductionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies the mode by which the
        ///									weakness may be introduced. If there are multiple ways in which
        ///									the weakness may be introduced, then separate
        ///									Mode_of_Introduction elements should be included for each. This
        ///									element should be populated for all weakness bases and variants.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Mode_of_Introduction*)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Mode_of_Introduction {
            get {
                if ((this.Mode_of_IntroductionField == null)) {
                    this.Mode_of_IntroductionField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Mode_of_Introduction", ""));
                }
                return this.Mode_of_IntroductionField;
            }
            set {
                if ((value == null)) {
                    this.Mode_of_IntroductionField = null;
                }
                else {
                    if ((this.Mode_of_IntroductionField == null)) {
                        this.Mode_of_IntroductionField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Mode_of_Introduction", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Mode_of_IntroductionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Modes_of_Introduction", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Modes_of_IntroductionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Mode_of_Introduction", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabling_Factor_for_Exploitation+)
    /// </para>
    /// </summary>
    public partial class Enabling_Factors_for_ExploitationLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Enabling_Factor_for_ExploitationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Enabling_Factors_for_ExploitationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Enabling_Factors_for_ExploitationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Enabling_Factors_for_ExploitationLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Enabling_Factor_for_Exploitation", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabling_Factor_for_Exploitation+)
        /// </para>
        /// </summary>
        public Enabling_Factors_for_ExploitationLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies a condition or factor
        ///									that could increase the likelihood of exploit for this weakness.
        ///									This element should contain structured text with enough detail
        ///									to make the enabling factor clear. This should be filled out for
        ///									most weakness bases. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Enabling_Factor_for_Exploitation+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Enabling_Factor_for_Exploitation {
            get {
                if ((this.Enabling_Factor_for_ExploitationField == null)) {
                    this.Enabling_Factor_for_ExploitationField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Enabling_Factor_for_Exploitation", ""));
                }
                return this.Enabling_Factor_for_ExploitationField;
            }
            set {
                if ((value == null)) {
                    this.Enabling_Factor_for_ExploitationField = null;
                }
                else {
                    if ((this.Enabling_Factor_for_ExploitationField == null)) {
                        this.Enabling_Factor_for_ExploitationField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Enabling_Factor_for_Exploitation", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Enabling_Factor_for_ExploitationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Enabling_Factors_for_Exploitation", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Enabling_Factors_for_ExploitationLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Enabling_Factor_for_Exploitation", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    private class Likelihood_of_ExploitLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Very High",
                        "High to Very High",
                        "High",
                        "Medium to High",
                        "Medium",
                        "Low to Medium",
                        "Low",
                        "Very Low"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Likelihood_of_ExploitLocalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Common_Consequence+)
    /// </para>
    /// </summary>
    public partial class Common_ConsequencesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Common_Consequence> Common_ConsequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Common_ConsequencesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Common_ConsequencesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Common_ConsequencesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Common_Consequence", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Common_Consequence+)
        /// </para>
        /// </summary>
        public Common_ConsequencesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Common_Consequence+)
        /// </para>
        /// </summary>
        public IList<Common_Consequence> Common_Consequence {
            get {
                if ((this.Common_ConsequenceField == null)) {
                    this.Common_ConsequenceField = new XTypedList<Common_Consequence>(this, LinqToXsdTypeManager.Instance, XName.Get("Common_Consequence", ""));
                }
                return this.Common_ConsequenceField;
            }
            set {
                if ((value == null)) {
                    this.Common_ConsequenceField = null;
                }
                else {
                    if ((this.Common_ConsequenceField == null)) {
                        this.Common_ConsequenceField = XTypedList<Common_Consequence>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Common_Consequence", ""));
                    }
                    else {
                        XTypedServices.SetList<Common_Consequence>(this.Common_ConsequenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Common_Consequences", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Common_ConsequencesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Common_Consequence", ""), typeof(Common_Consequence));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Detection_Method+)
    /// </para>
    /// </summary>
    public partial class Detection_MethodsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Detection_MethodLocalType> Detection_MethodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Detection_MethodsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Detection_MethodsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Detection_MethodsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Detection_Method", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Detection_Method+)
        /// </para>
        /// </summary>
        public Detection_MethodsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// The Detection_Method element is intended to
        ///									provide information on different techniques that can be used to
        ///									detect a weakness, including their strengths and limitations.
        ///									This should be filled out for some weakness classes and bases.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Detection_Method+)
        /// </para>
        /// </summary>
        public IList<Weakness.Detection_MethodsLocalType.Detection_MethodLocalType> Detection_Method {
            get {
                if ((this.Detection_MethodField == null)) {
                    this.Detection_MethodField = new XTypedList<Detection_MethodLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Detection_Method", ""));
                }
                return this.Detection_MethodField;
            }
            set {
                if ((value == null)) {
                    this.Detection_MethodField = null;
                }
                else {
                    if ((this.Detection_MethodField == null)) {
                        this.Detection_MethodField = XTypedList<Detection_MethodLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Detection_Method", ""));
                    }
                    else {
                        XTypedServices.SetList<Detection_MethodLocalType>(this.Detection_MethodField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Detection_Methods", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Detection_MethodsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Detection_Method", ""), typeof(Detection_MethodLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
        /// </para>
        /// </summary>
        public partial class Detection_MethodLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Detection_MethodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Detection_MethodLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Detection_MethodLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Method_Name", "")), new NamedContentModelEntity(XName.Get("Method_Description", "")), new NamedContentModelEntity(XName.Get("Method_Effectiveness", "")), new NamedContentModelEntity(XName.Get("Method_Effectiveness_Notes", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public Detection_MethodLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// The Method_Name element identifies the
            ///												particular weakness detection method to be
            ///												described. This should be filled out for some
            ///												weakness classes and bases. 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public string Method_Name {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Method_Name", ""), value, "Method_Name", Method_NameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// The Method_Description element is
            ///												intended to provide some context of how this
            ///												Detection_Method can be applied to a specific
            ///												weakness. This should be filled out for some
            ///												weakness classes and bases. 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Method_Description {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Description", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Method_Description", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// This element summarizes how effective
            ///												the detection method may be in detecting the
            ///												associated weakness. This assumes the use of
            ///												best-of-breed tools, analysts, and methods. There is
            ///												limited consideration for financial costs, labor, or
            ///												time.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public string Method_Effectiveness {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Effectiveness", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Method_Effectiveness", ""), value, "Method_Effectiveness", Method_EffectivenessLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            ///  The Method_Effectiveness_Notes
            ///												element is intended to discuss the strengths and
            ///												shortcomings of this detection method. This should
            ///												be filled out for some weakness classes and bases.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Method_Effectiveness_Notes {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Effectiveness_Notes", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Method_Effectiveness_Notes", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// The Detection_Method_ID stores the value
            ///											for the related Detection_Method entry identifier as a
            ///											string. Only one Detection_Method_ID element can exist
            ///											for each Detection_Method element (ex: DM-1). However,
            ///											Detection_Methods across CWE with the same ID should
            ///											only vary in small details.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Detection_Method_ID {
                get {
                    XAttribute x = this.Attribute(XName.Get("Detection_Method_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Detection_Method_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Detection_Method", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Detection_MethodLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Method_Name", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Method_Description", ""), typeof(Structured_Text_Type));
                localElementDictionary.Add(XName.Get("Method_Effectiveness", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Method_Effectiveness_Notes", ""), typeof(Structured_Text_Type));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class Method_NameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                                "Automated Analysis",
                                "Automated Dynamic Analysis",
                                "Automated Static Analysis",
                                "Fuzzing",
                                "Manual Analysis",
                                "Manual Dynamic Analysis",
                                "Manual Static Analysis",
                                "Other",
                                "White Box",
                                "Black Box"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                
                private Method_NameLocalType() {
                }
            }
            
            private class Method_EffectivenessLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "None/Rare",
                                "Limited",
                                "Opportunistic",
                                "Moderate",
                                "High"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private Method_EffectivenessLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Mitigation+)
    /// </para>
    /// </summary>
    public partial class Potential_MitigationsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Mitigation> MitigationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Potential_MitigationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Potential_MitigationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Potential_MitigationsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mitigation", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Mitigation+)
        /// </para>
        /// </summary>
        public Potential_MitigationsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Mitigation+)
        /// </para>
        /// </summary>
        public IList<Mitigation> Mitigation {
            get {
                if ((this.MitigationField == null)) {
                    this.MitigationField = new XTypedList<Mitigation>(this, LinqToXsdTypeManager.Instance, XName.Get("Mitigation", ""));
                }
                return this.MitigationField;
            }
            set {
                if ((value == null)) {
                    this.MitigationField = null;
                }
                else {
                    if ((this.MitigationField == null)) {
                        this.MitigationField = XTypedList<Mitigation>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Mitigation", ""));
                    }
                    else {
                        XTypedServices.SetList<Mitigation>(this.MitigationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Potential_Mitigations", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Potential_MitigationsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Mitigation", ""), typeof(Mitigation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    private class Causal_NatureLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Implicit",
                        "Explicit"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Causal_NatureLocalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Demonstrative_Example+)
    /// </para>
    /// </summary>
    public partial class Demonstrative_ExamplesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Demonstrative_ExampleLocalType> Demonstrative_ExampleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Demonstrative_ExamplesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Demonstrative_ExamplesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Demonstrative_ExamplesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Demonstrative_Example", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Demonstrative_Example+)
        /// </para>
        /// </summary>
        public Demonstrative_ExamplesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element illustrates how this weakness may
        ///									look in actual code. It contains an Intro_Text element
        ///									describing the context in which this code should be viewed, an
        ///									Example_Body element which is a mixture of code and explanatory
        ///									text, and Demonstrative_Example_References that provide
        ///									additional information.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Demonstrative_Example+)
        /// </para>
        /// </summary>
        public IList<Weakness.Demonstrative_ExamplesLocalType.Demonstrative_ExampleLocalType> Demonstrative_Example {
            get {
                if ((this.Demonstrative_ExampleField == null)) {
                    this.Demonstrative_ExampleField = new XTypedList<Demonstrative_ExampleLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Demonstrative_Example", ""));
                }
                return this.Demonstrative_ExampleField;
            }
            set {
                if ((value == null)) {
                    this.Demonstrative_ExampleField = null;
                }
                else {
                    if ((this.Demonstrative_ExampleField == null)) {
                        this.Demonstrative_ExampleField = XTypedList<Demonstrative_ExampleLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Demonstrative_Example", ""));
                    }
                    else {
                        XTypedServices.SetList<Demonstrative_ExampleLocalType>(this.Demonstrative_ExampleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Demonstrative_Examples", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Demonstrative_ExamplesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Demonstrative_Example", ""), typeof(Demonstrative_ExampleLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
        /// </para>
        /// </summary>
        public partial class Demonstrative_ExampleLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Demonstrative_ExampleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Demonstrative_ExampleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Demonstrative_ExampleLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Intro_Text", "")), new NamedContentModelEntity(XName.Get("Example_Body", "")), new NamedContentModelEntity(XName.Get("Demonstrative_Example_References", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public Demonstrative_ExampleLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// This element describes the context and
            ///												setting surrounding the example to add clarity for
            ///												the reader. 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public string Intro_Text {
                get {
                    XElement x = this.GetElement(XName.Get("Intro_Text", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Intro_Text", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element consists of a
            ///												Structured_Text element which should hold the code
            ///												and some explanatory information for the
            ///												reader.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Example_Body {
                get {
                    XElement x = this.GetElement(XName.Get("Example_Body", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Example_Body", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// The Demonstrative_Example_References
            ///												element contains one or more Reference elements,
            ///												each of which provide further reading and insight
            ///												into this demonstrative example. This should be
            ///												filled out when appropriate.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public Reference_List_Type Demonstrative_Example_References {
                get {
                    XElement x = this.GetElement(XName.Get("Demonstrative_Example_References", ""));
                    return ((Reference_List_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Demonstrative_Example_References", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            ///  The Demonstrative_Example_ID stores the
            ///											value for the related Demonstrative_Example entry
            ///											identifier as a string. Only one
            ///											Demonstrative_Example_ID element can exist for each
            ///											Demonstrative_Example element (ex: DX-1). However,
            ///											Demonstrative_Examples across CWE with the same ID
            ///											should only vary in small details.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Demonstrative_Example_ID {
                get {
                    XAttribute x = this.Attribute(XName.Get("Demonstrative_Example_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Demonstrative_Example_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Demonstrative_Example", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Demonstrative_ExampleLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Intro_Text", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Example_Body", ""), typeof(Structured_Text_Type));
                localElementDictionary.Add(XName.Get("Demonstrative_Example_References", ""), typeof(Reference_List_Type));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Observed_Example+)
    /// </para>
    /// </summary>
    public partial class Observed_ExamplesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Observed_ExampleLocalType> Observed_ExampleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Observed_ExamplesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Observed_ExamplesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Observed_ExamplesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Observed_Example", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Observed_Example+)
        /// </para>
        /// </summary>
        public Observed_ExamplesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element specifies a reference to a specific
        ///									observed instance of this weakness in the real-world; Typically
        ///									this will be a CVE reference. Each Observed_Example element
        ///									represents a single example. This element should be filled out
        ///									for as many entries as possible. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Observed_Example+)
        /// </para>
        /// </summary>
        public IList<Weakness.Observed_ExamplesLocalType.Observed_ExampleLocalType> Observed_Example {
            get {
                if ((this.Observed_ExampleField == null)) {
                    this.Observed_ExampleField = new XTypedList<Observed_ExampleLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Observed_Example", ""));
                }
                return this.Observed_ExampleField;
            }
            set {
                if ((value == null)) {
                    this.Observed_ExampleField = null;
                }
                else {
                    if ((this.Observed_ExampleField == null)) {
                        this.Observed_ExampleField = XTypedList<Observed_ExampleLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Observed_Example", ""));
                    }
                    else {
                        XTypedServices.SetList<Observed_ExampleLocalType>(this.Observed_ExampleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Observed_Examples", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Observed_ExamplesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Observed_Example", ""), typeof(Observed_ExampleLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
        /// </para>
        /// </summary>
        public partial class Observed_ExampleLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> Observed_Example_ReferenceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> Observed_Example_LinkField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Observed_ExampleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Observed_ExampleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Observed_ExampleLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Observed_Example_Reference", "")), new NamedContentModelEntity(XName.Get("Observed_Example_Description", "")), new NamedContentModelEntity(XName.Get("Observed_Example_Link", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public Observed_ExampleLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This field should contain the
            ///												identifier for the example being cited. For example,
            ///												if a CVE is being cited it should be of the standard
            ///												CVE identifier format, such as CVE-2005-1951 or
            ///												CVE-1999-0046. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public IList<string> Observed_Example_Reference {
                get {
                    if ((this.Observed_Example_ReferenceField == null)) {
                        this.Observed_Example_ReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Observed_Example_Reference", ""));
                    }
                    return this.Observed_Example_ReferenceField;
                }
                set {
                    if ((value == null)) {
                        this.Observed_Example_ReferenceField = null;
                    }
                    else {
                        if ((this.Observed_Example_ReferenceField == null)) {
                            this.Observed_Example_ReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Observed_Example_Reference", ""));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.Observed_Example_ReferenceField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            ///  This field should contain a product
            ///												independent description of the example being cited.
            ///												The description should present an unambiguous
            ///												correlation between the example being described and
            ///												the weakness which it is meant to exemplify. It
            ///												should also be short and easy to understand.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public string Observed_Example_Description {
                get {
                    XElement x = this.GetElement(XName.Get("Observed_Example_Description", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Observed_Example_Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This field should provide a valid URL
            ///												where more information regarding this example can be
            ///												obtained. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public IList<string> Observed_Example_Link {
                get {
                    if ((this.Observed_Example_LinkField == null)) {
                        this.Observed_Example_LinkField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Observed_Example_Link", ""));
                    }
                    return this.Observed_Example_LinkField;
                }
                set {
                    if ((value == null)) {
                        this.Observed_Example_LinkField = null;
                    }
                    else {
                        if ((this.Observed_Example_LinkField == null)) {
                            this.Observed_Example_LinkField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Observed_Example_Link", ""));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.Observed_Example_LinkField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Observed_Example", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Observed_ExampleLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Observed_Example_Reference", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Observed_Example_Description", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Observed_Example_Link", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Theoretical_Note+)
    /// </para>
    /// </summary>
    public partial class Theoretical_NotesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Theoretical_NoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Theoretical_NotesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Theoretical_NotesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Theoretical_NotesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Theoretical_Note", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Theoretical_Note+)
        /// </para>
        /// </summary>
        public Theoretical_NotesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This element is used to describe the weakness
        ///									using vulnerability theory concepts, which can be useful in
        ///									understanding the Research view. It should be filled out as
        ///									needed, especially in cases where the application of
        ///									vulnerability theory is not necessarily obvious for the
        ///									weakness.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Theoretical_Note+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Theoretical_Note {
            get {
                if ((this.Theoretical_NoteField == null)) {
                    this.Theoretical_NoteField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Theoretical_Note", ""));
                }
                return this.Theoretical_NoteField;
            }
            set {
                if ((value == null)) {
                    this.Theoretical_NoteField = null;
                }
                else {
                    if ((this.Theoretical_NoteField == null)) {
                        this.Theoretical_NoteField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Theoretical_Note", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Theoretical_NoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Theoretical_Notes", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Theoretical_NotesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Theoretical_Note", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Functional_Area+)
    /// </para>
    /// </summary>
    public partial class Functional_AreasLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Functional_AreaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Functional_AreasLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Functional_AreasLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Functional_AreasLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Functional_Area", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Functional_Area+)
        /// </para>
        /// </summary>
        public Functional_AreasLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies the functional area of
        ///									the software in which the weakness is most likely to occur. For
        ///									example, CWE-178 Failure to Resolve Case Sensitivity is likely
        ///									to occur in functional areas of software related to file
        ///									processing and credentials. Each applicable functional area
        ///									should have a new Functional_Area element and standard title
        ///									capitalization should be applied to each area.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Functional_Area+)
        /// </para>
        /// </summary>
        public IList<string> Functional_Area {
            get {
                if ((this.Functional_AreaField == null)) {
                    this.Functional_AreaField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Functional_Area", ""));
                }
                return this.Functional_AreaField;
            }
            set {
                if ((value == null)) {
                    this.Functional_AreaField = null;
                }
                else {
                    if ((this.Functional_AreaField == null)) {
                        this.Functional_AreaField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Functional_Area", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Functional_AreaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Functional_Areas", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Functional_AreasLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Functional_Area", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Relevant_Property+)
    /// </para>
    /// </summary>
    public partial class Relevant_PropertiesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Relevant_PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Relevant_PropertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Relevant_PropertiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Relevant_PropertiesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Relevant_Property", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Relevant_Property+)
        /// </para>
        /// </summary>
        public Relevant_PropertiesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  Each Relevant_Property element identifies a
        ///									property that is required by the code or a resource in order to
        ///									function as specified. Correctly labeling all of the relevant
        ///									properties can help to figure out what the root cause of a
        ///									vulnerability might be. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Relevant_Property+)
        /// </para>
        /// </summary>
        public IList<string> Relevant_Property {
            get {
                if ((this.Relevant_PropertyField == null)) {
                    this.Relevant_PropertyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Relevant_Property", ""));
                }
                return this.Relevant_PropertyField;
            }
            set {
                if ((value == null)) {
                    this.Relevant_PropertyField = null;
                }
                else {
                    if ((this.Relevant_PropertyField == null)) {
                        this.Relevant_PropertyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Relevant_Property", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Relevant_PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Relevant_Properties", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Relevant_PropertiesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Relevant_Property", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class Relevant_PropertyLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Accessibility",
                            "Mutability",
                            "Trustability",
                            "Validity",
                            "Equivalence",
                            "Uniqueness",
                            "Predictability"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Relevant_PropertyLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Affected_Resource+)
    /// </para>
    /// </summary>
    public partial class Affected_ResourcesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Affected_ResourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Affected_ResourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Affected_ResourcesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Affected_ResourcesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Affected_Resource", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Affected_Resource+)
        /// </para>
        /// </summary>
        public Affected_ResourcesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies system resources affected
        ///									by this entry. Each resource affected by this weakness should be
        ///									given its own Affected_Resource element. For example, CWE-249,
        ///									Path Manipulation has both Memory and File/Directory listed in
        ///									separate Affected_Resource elements. This should be filled out
        ///									in weakness bases and variants where applicable.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Affected_Resource+)
        /// </para>
        /// </summary>
        public IList<string> Affected_Resource {
            get {
                if ((this.Affected_ResourceField == null)) {
                    this.Affected_ResourceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Affected_Resource", ""));
                }
                return this.Affected_ResourceField;
            }
            set {
                if ((value == null)) {
                    this.Affected_ResourceField = null;
                }
                else {
                    if ((this.Affected_ResourceField == null)) {
                        this.Affected_ResourceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Affected_Resource", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Affected_ResourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Affected_Resources", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Affected_ResourcesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Affected_Resource", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class Affected_ResourceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                            "System Process",
                            "Memory",
                            "File/Directory",
                            "CPU"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private Affected_ResourceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Taxonomy_Mapping+)
    /// </para>
    /// </summary>
    public partial class Taxonomy_MappingsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Taxonomy_MappingLocalType> Taxonomy_MappingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Taxonomy_MappingsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Taxonomy_MappingsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Taxonomy_MappingsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Taxonomy_Mapping", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Taxonomy_Mapping+)
        /// </para>
        /// </summary>
        public Taxonomy_MappingsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This structure describes mappings to nodes of
        ///									other taxonomies that are similar in meaning to this node.
        ///									Although this may sound similar to Source_Taxonomy,
        ///									Source_Taxonomy is designed to provide a history and pedigree
        ///									for the entry, whereas Taxonomy_Mapping allows similar nodes in
        ///									other collections to be identified as matching concepts with
        ///									this weakness. For example, Taxonomy_Mapping should be used to
        ///									map the CWE entries to their OWASP Top 10 equivalents. The sole
        ///									attribute is "Mapped_Taxonomy_Name" which is used to identify
        ///									the taxonomy to which this weakness is being mapped.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Taxonomy_Mapping+)
        /// </para>
        /// </summary>
        public IList<Weakness.Taxonomy_MappingsLocalType.Taxonomy_MappingLocalType> Taxonomy_Mapping {
            get {
                if ((this.Taxonomy_MappingField == null)) {
                    this.Taxonomy_MappingField = new XTypedList<Taxonomy_MappingLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Taxonomy_Mapping", ""));
                }
                return this.Taxonomy_MappingField;
            }
            set {
                if ((value == null)) {
                    this.Taxonomy_MappingField = null;
                }
                else {
                    if ((this.Taxonomy_MappingField == null)) {
                        this.Taxonomy_MappingField = XTypedList<Taxonomy_MappingLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Taxonomy_Mapping", ""));
                    }
                    else {
                        XTypedServices.SetList<Taxonomy_MappingLocalType>(this.Taxonomy_MappingField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Taxonomy_Mappings", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Taxonomy_MappingsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Taxonomy_Mapping", ""), typeof(Taxonomy_MappingLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
        /// </para>
        /// </summary>
        public partial class Taxonomy_MappingLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Taxonomy_MappingLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Taxonomy_MappingLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Taxonomy_MappingLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mapped_Node_Name", "")), new NamedContentModelEntity(XName.Get("Mapped_Node_ID", "")), new NamedContentModelEntity(XName.Get("Mapping_Fit", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public Taxonomy_MappingLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies the name of
            ///												the entry to which this weakness is being mapped in
            ///												taxonomy Taxonomy_Name. 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public string Mapped_Node_Name {
                get {
                    XElement x = this.GetElement(XName.Get("Mapped_Node_Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Mapped_Node_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies the ID of the
            ///												entry to which this weakness is being mapped in
            ///												taxonomy Taxonomy_Name. 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public string Mapped_Node_ID {
                get {
                    XElement x = this.GetElement(XName.Get("Mapped_Node_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Mapped_Node_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies how close to
            ///												the original taxonomy this node was mapped.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public string Mapping_Fit {
                get {
                    XElement x = this.GetElement(XName.Get("Mapping_Fit", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Mapping_Fit", ""), value, "Mapping_Fit", Mapping_FitLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This attribute identifies the taxonomy to
            ///											which this weakness has a similar or equivalent entry.
            ///										
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string Mapped_Taxonomy_Name {
                get {
                    XAttribute x = this.Attribute(XName.Get("Mapped_Taxonomy_Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Mapped_Taxonomy_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Taxonomy_Mapping", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Taxonomy_MappingLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Mapped_Node_Name", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Mapped_Node_ID", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Mapping_Fit", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class Mapping_FitLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Exact",
                                "CWE_More_Abstract",
                                "CWE_More_Specific",
                                "Imprecise",
                                "Perspective"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private Mapping_FitLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (White_Box_Definition+)
    /// </para>
    /// </summary>
    public partial class White_Box_DefinitionsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> White_Box_DefinitionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator White_Box_DefinitionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<White_Box_DefinitionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static White_Box_DefinitionsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("White_Box_Definition", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (White_Box_Definition+)
        /// </para>
        /// </summary>
        public White_Box_DefinitionsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element describes the weakness from a white
        ///									box perspective, meaning that the view includes the knowledge of
        ///									control flow, data flow, and all other inner workings of the
        ///									software in which the weakness exists. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (White_Box_Definition+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> White_Box_Definition {
            get {
                if ((this.White_Box_DefinitionField == null)) {
                    this.White_Box_DefinitionField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("White_Box_Definition", ""));
                }
                return this.White_Box_DefinitionField;
            }
            set {
                if ((value == null)) {
                    this.White_Box_DefinitionField = null;
                }
                else {
                    if ((this.White_Box_DefinitionField == null)) {
                        this.White_Box_DefinitionField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("White_Box_Definition", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.White_Box_DefinitionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("White_Box_Definitions", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<White_Box_DefinitionsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("White_Box_Definition", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Black_Box_Definition+)
    /// </para>
    /// </summary>
    public partial class Black_Box_DefinitionsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Black_Box_DefinitionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Black_Box_DefinitionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Black_Box_DefinitionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Black_Box_DefinitionsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Black_Box_Definition", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Black_Box_Definition+)
        /// </para>
        /// </summary>
        public Black_Box_DefinitionsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element contains elements describes the
        ///									weakness from an external perspective, meaning that the view
        ///									includes no knowledge of how the software is processing data
        ///									other than what can be inferred from observing the software's
        ///									behavior. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Black_Box_Definition+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Black_Box_Definition {
            get {
                if ((this.Black_Box_DefinitionField == null)) {
                    this.Black_Box_DefinitionField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Black_Box_Definition", ""));
                }
                return this.Black_Box_DefinitionField;
            }
            set {
                if ((value == null)) {
                    this.Black_Box_DefinitionField = null;
                }
                else {
                    if ((this.Black_Box_DefinitionField == null)) {
                        this.Black_Box_DefinitionField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Black_Box_Definition", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Black_Box_DefinitionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Black_Box_Definitions", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Black_Box_DefinitionsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Black_Box_Definition", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Related_Attack_Pattern+)
    /// </para>
    /// </summary>
    public partial class Related_Attack_PatternsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Related_Attack_PatternLocalType> Related_Attack_PatternField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Related_Attack_PatternsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Related_Attack_PatternsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Related_Attack_PatternsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Related_Attack_Pattern", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Related_Attack_Pattern+)
        /// </para>
        /// </summary>
        public Related_Attack_PatternsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  The Related_Attack_Pattern subelement identifies
        ///									a single attack pattern that is associated with this weakness.
        ///									Its only child, CAPEC_ID is required and identifies the related
        ///									CAPEC entry. It also has a required attribute, CAPEC_Version,
        ///									which identifies which version of CAPEC is being referenced.
        ///									More than one Related _Attack_Pattern element can exist, but
        ///									they must all be contained within a single
        ///									Related_Attack_Patterns element. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Related_Attack_Pattern+)
        /// </para>
        /// </summary>
        public IList<Weakness.Related_Attack_PatternsLocalType.Related_Attack_PatternLocalType> Related_Attack_Pattern {
            get {
                if ((this.Related_Attack_PatternField == null)) {
                    this.Related_Attack_PatternField = new XTypedList<Related_Attack_PatternLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Related_Attack_Pattern", ""));
                }
                return this.Related_Attack_PatternField;
            }
            set {
                if ((value == null)) {
                    this.Related_Attack_PatternField = null;
                }
                else {
                    if ((this.Related_Attack_PatternField == null)) {
                        this.Related_Attack_PatternField = XTypedList<Related_Attack_PatternLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Related_Attack_Pattern", ""));
                    }
                    else {
                        XTypedServices.SetList<Related_Attack_PatternLocalType>(this.Related_Attack_PatternField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Related_Attack_Patterns", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Related_Attack_PatternsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Related_Attack_Pattern", ""), typeof(Related_Attack_PatternLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CAPEC_ID)
        /// </para>
        /// </summary>
        public partial class Related_Attack_PatternLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Related_Attack_PatternLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Related_Attack_PatternLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Related_Attack_PatternLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CAPEC_ID", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CAPEC_ID)
            /// </para>
            /// </summary>
            public Related_Attack_PatternLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  The CAPEC_ID stores the value for the
            ///												related CAPEC entry identifier as a string. Only one
            ///												CAPEC_ID element can exist for each
            ///												Related_Attack_Pattern element. 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CAPEC_ID)
            /// </para>
            /// </summary>
            public string CAPEC_ID {
                get {
                    XElement x = this.GetElement(XName.Get("CAPEC_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("CAPEC_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// This attribute identifies which version of
            ///											CAPEC is being referenced.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string CAPEC_Version {
                get {
                    XAttribute x = this.Attribute(XName.Get("CAPEC_Version", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("CAPEC_Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Related_Attack_Pattern", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Related_Attack_PatternLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("CAPEC_ID", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
/// </para>
/// </summary>
public partial class Compound_Element : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Compound_Element(XElement xe) { return XTypedServices.ToXTypedElement<Compound_Element>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Compound_Element() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description", "")), new NamedContentModelEntity(XName.Get("Relationships", "")), new NamedContentModelEntity(XName.Get("Relationship_Notes", "")), new NamedContentModelEntity(XName.Get("Weakness_Ordinalities", "")), new NamedContentModelEntity(XName.Get("Applicable_Platforms", "")), new NamedContentModelEntity(XName.Get("Maintenance_Notes", "")), new NamedContentModelEntity(XName.Get("Background_Details", "")), new NamedContentModelEntity(XName.Get("Other_Notes", "")), new NamedContentModelEntity(XName.Get("Alternate_Terms", "")), new NamedContentModelEntity(XName.Get("Terminology_Notes", "")), new NamedContentModelEntity(XName.Get("Time_of_Introduction", "")), new NamedContentModelEntity(XName.Get("Modes_of_Introduction", "")), new NamedContentModelEntity(XName.Get("Enabling_Factors_for_Exploitation", "")), new NamedContentModelEntity(XName.Get("Likelihood_of_Exploit", "")), new NamedContentModelEntity(XName.Get("Common_Consequences", "")), new NamedContentModelEntity(XName.Get("Detection_Methods", "")), new NamedContentModelEntity(XName.Get("Potential_Mitigations", "")), new NamedContentModelEntity(XName.Get("Causal_Nature", "")), new NamedContentModelEntity(XName.Get("Demonstrative_Examples", "")), new NamedContentModelEntity(XName.Get("Observed_Examples", "")), new NamedContentModelEntity(XName.Get("Theoretical_Notes", "")), new NamedContentModelEntity(XName.Get("Functional_Areas", "")), new NamedContentModelEntity(XName.Get("Relevant_Properties", "")), new NamedContentModelEntity(XName.Get("Affected_Resources", "")), new NamedContentModelEntity(XName.Get("Research_Gaps", "")), new NamedContentModelEntity(XName.Get("References", "")), new NamedContentModelEntity(XName.Get("Taxonomy_Mappings", "")), new NamedContentModelEntity(XName.Get("White_Box_Definitions", "")), new NamedContentModelEntity(XName.Get("Black_Box_Definitions", "")), new NamedContentModelEntity(XName.Get("Related_Attack_Patterns", "")), new NamedContentModelEntity(XName.Get("Content_History", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Compound_Element() {
    }
    
    /// <summary>
    /// <para>
    ///  This field provides a description of this Structure, whether
    ///						it is a Weakness, Category or Compound Element. Its primary subelement is
    ///						Description_Summary which is intended to serve as a minimalistic description
    ///						which provides the information necessary to understand the primary focus of
    ///						this entry. Additionally, it has the subelement Extended_Description which
    ///						is optional and is used to provide further information pertaining to this
    ///						weakness. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public DescriptionLocalType Description {
        get {
            XElement x = this.GetElement(XName.Get("Description", ""));
            return ((DescriptionLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Description", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Relationships Relationships {
        get {
            XElement x = this.GetElement(XName.Get("Relationships", ""));
            return ((Relationships)(x));
        }
        set {
            this.SetElement(XName.Get("Relationships", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Relationship_Notes Relationship_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Relationship_Notes", ""));
            return ((Relationship_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Relationship_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains one or more Weakness_Ordinality
    ///						elements, each of which describes when this entry is primary - where the
    ///						weakness exists independent of other weaknesses, or when this entry might be
    ///						resultant - where the weakness is typically related to the presence of some
    ///						other weaknesses. This should be filled out for all Weakness Base and
    ///						Variant entries. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Weakness_OrdinalitiesLocalType Weakness_Ordinalities {
        get {
            XElement x = this.GetElement(XName.Get("Weakness_Ordinalities", ""));
            return ((Weakness_OrdinalitiesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Weakness_Ordinalities", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains the Languages, Operatingy_Systems,
    ///						Hardware_Architectures, Architectural_Paradigms, Environments,
    ///						Technology_Classes or Common Platforms on which this entry may exist. This
    ///						should be filled out as much as possible for all Compound_Element and
    ///						Weakness entries.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Applicable_PlatformsLocalType Applicable_Platforms {
        get {
            XElement x = this.GetElement(XName.Get("Applicable_Platforms", ""));
            return ((Applicable_PlatformsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Applicable_Platforms", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Maintenance_Notes Maintenance_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Maintenance_Notes", ""));
            return ((Maintenance_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Maintenance_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Background_Detail
    ///						elements, each of which holds information regarding the entry or any
    ///						technologies that are related to it, where the background information is not
    ///						related to the nature of the entry itself. It should be filled out where
    ///						appropriate. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Background_DetailsLocalType Background_Details {
        get {
            XElement x = this.GetElement(XName.Get("Background_Details", ""));
            return ((Background_DetailsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Background_Details", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Other_Notes Other_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Other_Notes", ""));
            return ((Other_Notes)(x));
        }
        set {
            this.SetElement(XName.Get("Other_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Alternate_Terms Alternate_Terms {
        get {
            XElement x = this.GetElement(XName.Get("Alternate_Terms", ""));
            return ((Alternate_Terms)(x));
        }
        set {
            this.SetElement(XName.Get("Alternate_Terms", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// This element contains one or more Terminology_Note elements
    ///						that each contain a discussion of terminology issues related to this
    ///						weakness. It is different from the Alternate_Terms element, which is focused
    ///						on discussion of specific terms that are commonly used. It should be filled
    ///						out in any entry for which there is no established terminology, or if there
    ///						are multiple uses of the same key term.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Terminology_NotesLocalType Terminology_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Terminology_Notes", ""));
            return ((Terminology_NotesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Terminology_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Time_of_Introduction element contains the points of time
    ///						in the software life cycle at which the weakness may be introduced. If there
    ///						are multiple points of time at which the weakness may be introduced, then
    ///						separate Introduction elements should be included for each. This element
    ///						should be populated for all weakness bases and variants. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Time_of_IntroductionLocalType Time_of_Introduction {
        get {
            XElement x = this.GetElement(XName.Get("Time_of_Introduction", ""));
            return ((Time_of_IntroductionLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Time_of_Introduction", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element describes the typical scenarios under which this
    ///						weakness can be introduced into the software. It should be filled out as
    ///						needed. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Modes_of_IntroductionLocalType Modes_of_Introduction {
        get {
            XElement x = this.GetElement(XName.Get("Modes_of_Introduction", ""));
            return ((Modes_of_IntroductionLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Modes_of_Introduction", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains one or more
    ///						Enabling_Factor_for_Exploitation, each of which points out conditions or
    ///						factors that could increase the likelihood of exploit for this weakness.
    ///						This should be filled out for most weakness bases. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Enabling_Factors_for_ExploitationLocalType Enabling_Factors_for_Exploitation {
        get {
            XElement x = this.GetElement(XName.Get("Enabling_Factors_for_Exploitation", ""));
            return ((Enabling_Factors_for_ExploitationLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Enabling_Factors_for_Exploitation", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains a rough estimate at the likelihood of
    ///						exploitation of an exposed weakness. Many factors can impact this value
    ///						which is why it should only be regarded as an approximation.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public string Likelihood_of_Exploit {
        get {
            XElement x = this.GetElement(XName.Get("Likelihood_of_Exploit", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("Likelihood_of_Exploit", ""), value, "Likelihood_of_Exploit", Likelihood_of_ExploitLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains the common consequences associated with
    ///						this weakness. It is populated by one or more individual Common_Consequence
    ///						subelements. This should be included and completed as much as possible for
    ///						all weaknesses. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Common_ConsequencesLocalType Common_Consequences {
        get {
            XElement x = this.GetElement(XName.Get("Common_Consequences", ""));
            return ((Common_ConsequencesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Common_Consequences", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Detection_Methods element is comprised of one or more
    ///						Detection_Method elements which identify methods that may be employed to
    ///						detect this weakness. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Detection_MethodsLocalType Detection_Methods {
        get {
            XElement x = this.GetElement(XName.Get("Detection_Methods", ""));
            return ((Detection_MethodsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Detection_Methods", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains the potential mitigations associated
    ///						with this weakness. It contains one or more mitigation subelements which
    ///						each represent individual mitigations for this weakness. This should be
    ///						included and completed to the extent possible for all weakness bases and
    ///						variants. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Potential_MitigationsLocalType Potential_Mitigations {
        get {
            XElement x = this.GetElement(XName.Get("Potential_Mitigations", ""));
            return ((Potential_MitigationsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Potential_Mitigations", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// This element describes the nature of the underlying cause of
    ///						the weakness. Is it an implicit underlying weakness or is it an issue of
    ///						behavior on the part of the software developer? Appropriate values are
    ///						either Implicit, occurring regardless of developer behavior, or Explicit, an
    ///						explicit weakness resulting from behavior of the developer.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public string Causal_Nature {
        get {
            XElement x = this.GetElement(XName.Get("Causal_Nature", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("Causal_Nature", ""), value, "Causal_Nature", Causal_NatureLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Demonstrative_Examples,
    ///						each of which should contain an example illustrating the problem being
    ///						described in this weakness. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Demonstrative_ExamplesLocalType Demonstrative_Examples {
        get {
            XElement x = this.GetElement(XName.Get("Demonstrative_Examples", ""));
            return ((Demonstrative_ExamplesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Demonstrative_Examples", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Observed_Example
    ///						elements, each of which is a reference to a specific observed instance of
    ///						this weakness in the real world; typically this will be a CVE reference.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Observed_ExamplesLocalType Observed_Examples {
        get {
            XElement x = this.GetElement(XName.Get("Observed_Examples", ""));
            return ((Observed_ExamplesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Observed_Examples", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// This element contains one or more Theoretical_Note elements
    ///						that each describe the weakness using vulnerability theory concepts. It
    ///						should be filled out as needed, especially in cases where the application of
    ///						vulnerability theory is not necessarily obvious for the
    ///						weakness.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Theoretical_NotesLocalType Theoretical_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Theoretical_Notes", ""));
            return ((Theoretical_NotesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Theoretical_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Functional_Area elements,
    ///						each of which identifies the functional area of the software in which the
    ///						weakness is most likely to occur. For example, CWE-178 Failure to Resolve
    ///						Case Sensitivity is likely to occur in functional areas of software related
    ///						to file processing and credentials. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Functional_AreasLocalType Functional_Areas {
        get {
            XElement x = this.GetElement(XName.Get("Functional_Areas", ""));
            return ((Functional_AreasLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Functional_Areas", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Relevant_Property
    ///						elements. Each Relevant_Property element identifies a property that is
    ///						required by the code or a resource in order to function as specified.
    ///						Correctly labeling all of the relevant properties can help to figure out
    ///						what the root cause of a vulnerability might be. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Relevant_PropertiesLocalType Relevant_Properties {
        get {
            XElement x = this.GetElement(XName.Get("Relevant_Properties", ""));
            return ((Relevant_PropertiesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Relevant_Properties", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element identifies system resources affected by this
    ///						entry. It is populated by Affected_Resource elements. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Affected_ResourcesLocalType Affected_Resources {
        get {
            XElement x = this.GetElement(XName.Get("Affected_Resources", ""));
            return ((Affected_ResourcesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Affected_Resources", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Research_Gaps Research_Gaps {
        get {
            XElement x = this.GetElement(XName.Get("Research_Gaps", ""));
            return ((Research_Gaps)(x));
        }
        set {
            this.SetElement(XName.Get("Research_Gaps", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The References element contains one or more Reference
    ///						elements, each of which provide further reading and insight into this
    ///						weakness. This may include an alternate interpretation of this weakness, a
    ///						deeper technical breakdown of this weakness such as a research paper, deeper
    ///						information on mitigations, or background details on this technical area.
    ///						This should be filled out for all weakness bases and some variants.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Reference_List_Type References {
        get {
            XElement x = this.GetElement(XName.Get("References", ""));
            return ((Reference_List_Type)(x));
        }
        set {
            this.SetElement(XName.Get("References", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// The Taxonomy_Mappings element contains one or more
    ///						Taxonomy_Mapping structures which provide a mapping from this entry to an
    ///						entry in a different taxonomy.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Taxonomy_MappingsLocalType Taxonomy_Mappings {
        get {
            XElement x = this.GetElement(XName.Get("Taxonomy_Mappings", ""));
            return ((Taxonomy_MappingsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Taxonomy_Mappings", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more White_Box_Definition
    ///						elements, each of which describes the weakness from a white box perspective,
    ///						meaning that the view includes the knowledge of control flow, data flow, and
    ///						all other inner workings of the software in which the weakness exists.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public White_Box_DefinitionsLocalType White_Box_Definitions {
        get {
            XElement x = this.GetElement(XName.Get("White_Box_Definitions", ""));
            return ((White_Box_DefinitionsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("White_Box_Definitions", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Black_Box_Definition
    ///						elements, each of which describes the weakness from an external perspective,
    ///						meaning that the view includes no knowledge of how the software is
    ///						processing data other than what can be inferred from observing the
    ///						software's behavior. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Black_Box_DefinitionsLocalType Black_Box_Definitions {
        get {
            XElement x = this.GetElement(XName.Get("Black_Box_Definitions", ""));
            return ((Black_Box_DefinitionsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Black_Box_Definitions", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Related_Attack_Patterns element contains all references
    ///						to CAPEC which will identify related attack patterns to this weakness. It
    ///						has one or more Related_Attack_Pattern elements as children and each child
    ///						will point to a single CAPEC entry which is associated with this weakness.
    ///						This should be filled out to the extent possible for most weaknesses.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Related_Attack_PatternsLocalType Related_Attack_Patterns {
        get {
            XElement x = this.GetElement(XName.Get("Related_Attack_Patterns", ""));
            return ((Related_Attack_PatternsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Related_Attack_Patterns", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Description, Relationships?, Relationship_Notes?, Weakness_Ordinalities?, Applicable_Platforms?, Maintenance_Notes?, Background_Details?, Other_Notes?, Alternate_Terms?, Terminology_Notes?, Time_of_Introduction?, Modes_of_Introduction?, Enabling_Factors_for_Exploitation?, Likelihood_of_Exploit?, Common_Consequences?, Detection_Methods?, Potential_Mitigations?, Causal_Nature?, Demonstrative_Examples?, Observed_Examples?, Theoretical_Notes?, Functional_Areas?, Relevant_Properties?, Affected_Resources?, Research_Gaps?, References?, Taxonomy_Mappings?, White_Box_Definitions?, Black_Box_Definitions?, Related_Attack_Patterns?, Content_History)
    /// </para>
    /// </summary>
    public Content_History Content_History {
        get {
            XElement x = this.GetElement(XName.Get("Content_History", ""));
            return ((Content_History)(x));
        }
        set {
            this.SetElement(XName.Get("Content_History", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This attribute provides a unique identifier for the entry. It
    ///						will be static for the lifetime of the entry. In the event that this entry
    ///						becomes deprecated, the ID will not be reused and a pointer will be left in
    ///						this entry to the replacement. This is required for all Compound_Elements.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public decimal ID {
        get {
            XAttribute x = this.Attribute(XName.Get("ID", ""));
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Name is a descriptive name used to give the reader an
    ///						idea of the meaning behind the compound weakness structure. All words in the
    ///						name should be capitalized except for articles and prepositions unless they
    ///						begin or end the name. Subsequent words in a hyphenated chain are also not
    ///						capitalized. This is required for all Compound_Elements. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Name {
        get {
            XAttribute x = this.Attribute(XName.Get("Name", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Abstraction defines the abstraction level for this
    ///						weakness. The abstractions levels for Compound_Elements and Weaknesses are
    ///						the same. For example, if the Compound_Element is a chain, and all elements
    ///						of the chain are Class level, then the Compound_Element Abstraction
    ///						attribute is Class. This is required for all Compound_Elements.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Compound_Element_Abstraction {
        get {
            XAttribute x = this.Attribute(XName.Get("Compound_Element_Abstraction", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Compound_Element_Abstraction", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Structure attribute defines the structural nature of this
    ///						compound element - that is, composed of other weaknesses concurrently, as in
    ///						a composite, or consecutively, as in a chain. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Compound_Element_Structure {
        get {
            XAttribute x = this.Attribute(XName.Get("Compound_Element_Structure", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Compound_Element_Structure", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Status attribute defines the status level for this
    ///						compound element. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// </summary>
    public string Status {
        get {
            XAttribute x = this.Attribute(XName.Get("Status", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Compound_Element", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Compound_Element Load(string xmlFile) {
        return XTypedServices.Load<Compound_Element>(xmlFile);
    }
    
    public static Compound_Element Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Compound_Element>(xmlFile);
    }
    
    public static Compound_Element Parse(string xml) {
        return XTypedServices.Parse<Compound_Element>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Compound_Element>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Description", ""), typeof(DescriptionLocalType));
        localElementDictionary.Add(XName.Get("Relationships", ""), typeof(Relationships));
        localElementDictionary.Add(XName.Get("Relationship_Notes", ""), typeof(Relationship_Notes));
        localElementDictionary.Add(XName.Get("Weakness_Ordinalities", ""), typeof(Weakness_OrdinalitiesLocalType));
        localElementDictionary.Add(XName.Get("Applicable_Platforms", ""), typeof(Applicable_PlatformsLocalType));
        localElementDictionary.Add(XName.Get("Maintenance_Notes", ""), typeof(Maintenance_Notes));
        localElementDictionary.Add(XName.Get("Background_Details", ""), typeof(Background_DetailsLocalType));
        localElementDictionary.Add(XName.Get("Other_Notes", ""), typeof(Other_Notes));
        localElementDictionary.Add(XName.Get("Alternate_Terms", ""), typeof(Alternate_Terms));
        localElementDictionary.Add(XName.Get("Terminology_Notes", ""), typeof(Terminology_NotesLocalType));
        localElementDictionary.Add(XName.Get("Time_of_Introduction", ""), typeof(Time_of_IntroductionLocalType));
        localElementDictionary.Add(XName.Get("Modes_of_Introduction", ""), typeof(Modes_of_IntroductionLocalType));
        localElementDictionary.Add(XName.Get("Enabling_Factors_for_Exploitation", ""), typeof(Enabling_Factors_for_ExploitationLocalType));
        localElementDictionary.Add(XName.Get("Likelihood_of_Exploit", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Common_Consequences", ""), typeof(Common_ConsequencesLocalType));
        localElementDictionary.Add(XName.Get("Detection_Methods", ""), typeof(Detection_MethodsLocalType));
        localElementDictionary.Add(XName.Get("Potential_Mitigations", ""), typeof(Potential_MitigationsLocalType));
        localElementDictionary.Add(XName.Get("Causal_Nature", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Demonstrative_Examples", ""), typeof(Demonstrative_ExamplesLocalType));
        localElementDictionary.Add(XName.Get("Observed_Examples", ""), typeof(Observed_ExamplesLocalType));
        localElementDictionary.Add(XName.Get("Theoretical_Notes", ""), typeof(Theoretical_NotesLocalType));
        localElementDictionary.Add(XName.Get("Functional_Areas", ""), typeof(Functional_AreasLocalType));
        localElementDictionary.Add(XName.Get("Relevant_Properties", ""), typeof(Relevant_PropertiesLocalType));
        localElementDictionary.Add(XName.Get("Affected_Resources", ""), typeof(Affected_ResourcesLocalType));
        localElementDictionary.Add(XName.Get("Research_Gaps", ""), typeof(Research_Gaps));
        localElementDictionary.Add(XName.Get("References", ""), typeof(Reference_List_Type));
        localElementDictionary.Add(XName.Get("Taxonomy_Mappings", ""), typeof(Taxonomy_MappingsLocalType));
        localElementDictionary.Add(XName.Get("White_Box_Definitions", ""), typeof(White_Box_DefinitionsLocalType));
        localElementDictionary.Add(XName.Get("Black_Box_Definitions", ""), typeof(Black_Box_DefinitionsLocalType));
        localElementDictionary.Add(XName.Get("Related_Attack_Patterns", ""), typeof(Related_Attack_PatternsLocalType));
        localElementDictionary.Add(XName.Get("Content_History", ""), typeof(Content_History));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Description_Summary, Extended_Description?)
    /// </para>
    /// </summary>
    public partial class DescriptionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DescriptionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DescriptionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DescriptionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Description_Summary", "")), new NamedContentModelEntity(XName.Get("Extended_Description", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Description_Summary, Extended_Description?)
        /// </para>
        /// </summary>
        public DescriptionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This description should be short and should limit
        ///									itself to describing the key points that define this entry.
        ///									Further explanation can be included in the extended description
        ///									element. This is required for all entries. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Description_Summary, Extended_Description?)
        /// </para>
        /// </summary>
        public string Description_Summary {
            get {
                XElement x = this.GetElement(XName.Get("Description_Summary", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Description_Summary", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element provides a place for details
        ///									important to the description of this entry to be included that
        ///									are not necessary to convey the fundamental concept behind the
        ///									entry. This is not required for all entries and should only be
        ///									included where appropriate. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Description_Summary, Extended_Description?)
        /// </para>
        /// </summary>
        public Structured_Text_Type Extended_Description {
            get {
                XElement x = this.GetElement(XName.Get("Extended_Description", ""));
                return ((Structured_Text_Type)(x));
            }
            set {
                this.SetElement(XName.Get("Extended_Description", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Description", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DescriptionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Description_Summary", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Extended_Description", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Weakness_Ordinality+)
    /// </para>
    /// </summary>
    public partial class Weakness_OrdinalitiesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Weakness_OrdinalityLocalType> Weakness_OrdinalityField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Weakness_OrdinalitiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Weakness_OrdinalitiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Weakness_OrdinalitiesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Weakness_Ordinality", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Weakness_Ordinality+)
        /// </para>
        /// </summary>
        public Weakness_OrdinalitiesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element describes when this entry is primary
        ///									- where the weakness exists independent of other weaknesses, or
        ///									when this entry might be resultant - where the weakness is
        ///									typically related to the presence of some other weaknesses. The
        ///									Ordinality subelement identifies whether or not we are providing
        ///									context around when this entry is primary, or resultant. The
        ///									Ordinality_Description contains the description of the context
        ///									in which this entry is primary or resultant. It is important to
        ///									note that it is possible for the same entry to be primary in
        ///									some instances and resultant in others.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Weakness_Ordinality+)
        /// </para>
        /// </summary>
        public IList<Compound_Element.Weakness_OrdinalitiesLocalType.Weakness_OrdinalityLocalType> Weakness_Ordinality {
            get {
                if ((this.Weakness_OrdinalityField == null)) {
                    this.Weakness_OrdinalityField = new XTypedList<Weakness_OrdinalityLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Weakness_Ordinality", ""));
                }
                return this.Weakness_OrdinalityField;
            }
            set {
                if ((value == null)) {
                    this.Weakness_OrdinalityField = null;
                }
                else {
                    if ((this.Weakness_OrdinalityField == null)) {
                        this.Weakness_OrdinalityField = XTypedList<Weakness_OrdinalityLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Weakness_Ordinality", ""));
                    }
                    else {
                        XTypedServices.SetList<Weakness_OrdinalityLocalType>(this.Weakness_OrdinalityField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Weakness_Ordinalities", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Weakness_OrdinalitiesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Weakness_Ordinality", ""), typeof(Weakness_OrdinalityLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Ordinality, Ordinality_Description?)
        /// </para>
        /// </summary>
        public partial class Weakness_OrdinalityLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Weakness_OrdinalityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Weakness_OrdinalityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Weakness_OrdinalityLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Ordinality", "")), new NamedContentModelEntity(XName.Get("Ordinality_Description", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Ordinality, Ordinality_Description?)
            /// </para>
            /// </summary>
            public Weakness_OrdinalityLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// This element indicates whether this
            ///												weakness exists independent of other weaknesses,
            ///												Primary, or whether it is the result of the presence
            ///												of some other weaknesses,
            ///												Resultant.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Ordinality, Ordinality_Description?)
            /// </para>
            /// </summary>
            public string Ordinality {
                get {
                    XElement x = this.GetElement(XName.Get("Ordinality", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Ordinality", ""), value, "Ordinality", OrdinalityLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// This element describes context in
            ///												which this entry is either Primary or Resultant,
            ///												depending on the corresponding value for
            ///												Ordinality.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Ordinality, Ordinality_Description?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Ordinality_Description {
                get {
                    XElement x = this.GetElement(XName.Get("Ordinality_Description", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Ordinality_Description", ""), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Weakness_Ordinality", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Weakness_OrdinalityLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Ordinality", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Ordinality_Description", ""), typeof(Structured_Text_Type));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class OrdinalityLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Primary",
                                "Resultant"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private OrdinalityLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
    /// </para>
    /// </summary>
    public partial class Applicable_PlatformsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Applicable_PlatformsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Applicable_PlatformsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Applicable_PlatformsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Languages", "")), new NamedContentModelEntity(XName.Get("Operating_Systems", "")), new NamedContentModelEntity(XName.Get("Hardware_Architectures", "")), new NamedContentModelEntity(XName.Get("Architectural_Paradigms", "")), new NamedContentModelEntity(XName.Get("Environments", "")), new NamedContentModelEntity(XName.Get("Technology_Classes", "")), new NamedContentModelEntity(XName.Get("Common_Platform_References", "")), new NamedContentModelEntity(XName.Get("Platform_Notes", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Applicable_PlatformsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This structure contains one or more Language
        ///									elements which each represent a language in which this weakness
        ///									may exist.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Languages_List_Type Languages {
            get {
                XElement x = this.GetElement(XName.Get("Languages", ""));
                return ((Languages_List_Type)(x));
            }
            set {
                this.SetElement(XName.Get("Languages", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more
        ///									Operating_System subelements which each represent an OS in which
        ///									this weakness is likely to exist. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Operating_SystemsLocalType Operating_Systems {
            get {
                XElement x = this.GetElement(XName.Get("Operating_Systems", ""));
                return ((Operating_SystemsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Operating_Systems", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more
        ///									Hardware_Architecture subelements which each represent an
        ///									architecture in which this weakness is likely to exist.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Hardware_ArchitecturesLocalType Hardware_Architectures {
            get {
                XElement x = this.GetElement(XName.Get("Hardware_Architectures", ""));
                return ((Hardware_ArchitecturesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Hardware_Architectures", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more
        ///									Architectural_Paradigm subelements which each represent an
        ///									architecture on which this weakness is likely to exist.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Architectural_ParadigmsLocalType Architectural_Paradigms {
            get {
                XElement x = this.GetElement(XName.Get("Architectural_Paradigms", ""));
                return ((Architectural_ParadigmsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Architectural_Paradigms", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more Environment
        ///									subelements which each represent an environment in which this
        ///									weakness may exist. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public EnvironmentsLocalType Environments {
            get {
                XElement x = this.GetElement(XName.Get("Environments", ""));
                return ((EnvironmentsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Environments", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element contains one or more individual
        ///									Technology_Class subelements which each represent a technology
        ///									class in which this weakness is likely to exist.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Technology_ClassesLocalType Technology_Classes {
            get {
                XElement x = this.GetElement(XName.Get("Technology_Classes", ""));
                return ((Technology_ClassesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Technology_Classes", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  The Common_Platforms element contains references
        ///									to the Common Platform Enumeration, CPE, which will identify
        ///									common platforms on which this weakness may occur. It has one or
        ///									more Common_Platform elements as children and each child will
        ///									point to a single CPE entry which is associated with this
        ///									weakness. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Common_Platform_ReferencesLocalType Common_Platform_References {
            get {
                XElement x = this.GetElement(XName.Get("Common_Platform_References", ""));
                return ((Common_Platform_ReferencesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Common_Platform_References", ""), value);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element provides additional information
        ///									related to the applicable platforms of a weakness if needed.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Languages?, Operating_Systems?, Hardware_Architectures?, Architectural_Paradigms?, Environments?, Technology_Classes?, Common_Platform_References?, Platform_Notes?)
        /// </para>
        /// </summary>
        public Structured_Text_Type Platform_Notes {
            get {
                XElement x = this.GetElement(XName.Get("Platform_Notes", ""));
                return ((Structured_Text_Type)(x));
            }
            set {
                this.SetElement(XName.Get("Platform_Notes", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Applicable_Platforms", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Applicable_PlatformsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Languages", ""), typeof(Languages_List_Type));
            localElementDictionary.Add(XName.Get("Operating_Systems", ""), typeof(Operating_SystemsLocalType));
            localElementDictionary.Add(XName.Get("Hardware_Architectures", ""), typeof(Hardware_ArchitecturesLocalType));
            localElementDictionary.Add(XName.Get("Architectural_Paradigms", ""), typeof(Architectural_ParadigmsLocalType));
            localElementDictionary.Add(XName.Get("Environments", ""), typeof(EnvironmentsLocalType));
            localElementDictionary.Add(XName.Get("Technology_Classes", ""), typeof(Technology_ClassesLocalType));
            localElementDictionary.Add(XName.Get("Common_Platform_References", ""), typeof(Common_Platform_ReferencesLocalType));
            localElementDictionary.Add(XName.Get("Platform_Notes", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Operating_System*, Operating_System_Class*)
        /// </para>
        /// </summary>
        public partial class Operating_SystemsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Operating_SystemLocalType> Operating_SystemField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Operating_System_ClassLocalType> Operating_System_ClassField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Operating_SystemsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Operating_SystemsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Operating_SystemsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Operating_System", "")), new NamedContentModelEntity(XName.Get("Operating_System_Class", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Operating_System*, Operating_System_Class*)
            /// </para>
            /// </summary>
            public Operating_SystemsLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Operating_System in which this entry may exist and
            ///												with what frequency on the specified OS.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Operating_System*, Operating_System_Class*)
            /// </para>
            /// </summary>
            public IList<Compound_Element.Applicable_PlatformsLocalType.Operating_SystemsLocalType.Operating_SystemLocalType> Operating_System {
                get {
                    if ((this.Operating_SystemField == null)) {
                        this.Operating_SystemField = new XTypedList<Operating_SystemLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Operating_System", ""));
                    }
                    return this.Operating_SystemField;
                }
                set {
                    if ((value == null)) {
                        this.Operating_SystemField = null;
                    }
                    else {
                        if ((this.Operating_SystemField == null)) {
                            this.Operating_SystemField = XTypedList<Operating_SystemLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Operating_System", ""));
                        }
                        else {
                            XTypedServices.SetList<Operating_SystemLocalType>(this.Operating_SystemField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												class of operating systems, specified in
            ///												Operating_System_Class_Description, in which this
            ///												entry may exist. Suggested values include: Linux,
            ///												Windows, UNIX, BSD, and Mac OS.
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Operating_System*, Operating_System_Class*)
            /// </para>
            /// </summary>
            public IList<Compound_Element.Applicable_PlatformsLocalType.Operating_SystemsLocalType.Operating_System_ClassLocalType> Operating_System_Class {
                get {
                    if ((this.Operating_System_ClassField == null)) {
                        this.Operating_System_ClassField = new XTypedList<Operating_System_ClassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Operating_System_Class", ""));
                    }
                    return this.Operating_System_ClassField;
                }
                set {
                    if ((value == null)) {
                        this.Operating_System_ClassField = null;
                    }
                    else {
                        if ((this.Operating_System_ClassField == null)) {
                            this.Operating_System_ClassField = XTypedList<Operating_System_ClassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Operating_System_Class", ""));
                        }
                        else {
                            XTypedServices.SetList<Operating_System_ClassLocalType>(this.Operating_System_ClassField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Operating_Systems", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Operating_SystemsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Operating_System", ""), typeof(Operating_SystemLocalType));
                localElementDictionary.Add(XName.Get("Operating_System_Class", ""), typeof(Operating_System_ClassLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Operating_SystemLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Operating_SystemLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Operating_SystemLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Operating_SystemLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												operating systems in which this weakness is likely
                ///												to exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Operating_System_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Operating_System_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Operating_System_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified operating
                ///												system.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Operating_System", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Operating_SystemLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class Operating_System_ClassLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Operating_System_ClassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Operating_System_ClassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Operating_System_ClassLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												families or groups of operating systems in which
                ///												this weakness is likely to exist.
                ///												
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Operating_System_Class_Description {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Operating_System_Class_Description", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Operating_System_Class_Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified operating
                ///												system within this operating system
                ///												class.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Operating_System_Class", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Operating_System_ClassLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
        /// </para>
        /// </summary>
        public partial class Hardware_ArchitecturesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Hardware_ArchitectureLocalType> Hardware_ArchitectureField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Hardware_Architecture_ClassLocalType> Hardware_Architecture_ClassField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Hardware_ArchitecturesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Hardware_ArchitecturesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Hardware_ArchitecturesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Hardware_Architecture", "")), new NamedContentModelEntity(XName.Get("Hardware_Architecture_Class", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
            /// </para>
            /// </summary>
            public Hardware_ArchitecturesLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Hardware_Architecture on which this entry may exist
            ///												and with what frequency on the specified
            ///												architecture. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
            /// </para>
            /// </summary>
            public IList<Compound_Element.Applicable_PlatformsLocalType.Hardware_ArchitecturesLocalType.Hardware_ArchitectureLocalType> Hardware_Architecture {
                get {
                    if ((this.Hardware_ArchitectureField == null)) {
                        this.Hardware_ArchitectureField = new XTypedList<Hardware_ArchitectureLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Hardware_Architecture", ""));
                    }
                    return this.Hardware_ArchitectureField;
                }
                set {
                    if ((value == null)) {
                        this.Hardware_ArchitectureField = null;
                    }
                    else {
                        if ((this.Hardware_ArchitectureField == null)) {
                            this.Hardware_ArchitectureField = XTypedList<Hardware_ArchitectureLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Hardware_Architecture", ""));
                        }
                        else {
                            XTypedServices.SetList<Hardware_ArchitectureLocalType>(this.Hardware_ArchitectureField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												class of hardware architectures, specified in
            ///												Hardware_Architecture_Class_Name, in which this
            ///												entry may exist. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Hardware_Architecture*, Hardware_Architecture_Class*)
            /// </para>
            /// </summary>
            public IList<Compound_Element.Applicable_PlatformsLocalType.Hardware_ArchitecturesLocalType.Hardware_Architecture_ClassLocalType> Hardware_Architecture_Class {
                get {
                    if ((this.Hardware_Architecture_ClassField == null)) {
                        this.Hardware_Architecture_ClassField = new XTypedList<Hardware_Architecture_ClassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Hardware_Architecture_Class", ""));
                    }
                    return this.Hardware_Architecture_ClassField;
                }
                set {
                    if ((value == null)) {
                        this.Hardware_Architecture_ClassField = null;
                    }
                    else {
                        if ((this.Hardware_Architecture_ClassField == null)) {
                            this.Hardware_Architecture_ClassField = XTypedList<Hardware_Architecture_ClassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Hardware_Architecture_Class", ""));
                        }
                        else {
                            XTypedServices.SetList<Hardware_Architecture_ClassLocalType>(this.Hardware_Architecture_ClassField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Hardware_Architectures", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Hardware_ArchitecturesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Hardware_Architecture", ""), typeof(Hardware_ArchitectureLocalType));
                localElementDictionary.Add(XName.Get("Hardware_Architecture_Class", ""), typeof(Hardware_Architecture_ClassLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Hardware_ArchitectureLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Hardware_ArchitectureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Hardware_ArchitectureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Hardware_ArchitectureLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												architectures on which this weakness is likely to
                ///												exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Hardware_Architecture_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Hardware_Architecture_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Hardware_Architecture_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified hardware
                ///												architecture.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Hardware_Architecture", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Hardware_ArchitectureLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class Hardware_Architecture_ClassLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Hardware_Architecture_ClassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Hardware_Architecture_ClassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Hardware_Architecture_ClassLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												architectures in which this weakness is likely to
                ///												exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Hardware_Architecture_Class_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Hardware_Architecture_Class_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Hardware_Architecture_Class_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified hardware
                ///												architecture within the specified hardware
                ///												architecture class.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Hardware_Architecture_Class", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Hardware_Architecture_ClassLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Architectural_Paradigm+)
        /// </para>
        /// </summary>
        public partial class Architectural_ParadigmsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Architectural_ParadigmLocalType> Architectural_ParadigmField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Architectural_ParadigmsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Architectural_ParadigmsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Architectural_ParadigmsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Architectural_Paradigm", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Architectural_Paradigm+)
            /// </para>
            /// </summary>
            public Architectural_ParadigmsLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Architectural_Paradigm in which this entry may exist
            ///												and with what frequency in the specified paradigm.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Architectural_Paradigm+)
            /// </para>
            /// </summary>
            public IList<Compound_Element.Applicable_PlatformsLocalType.Architectural_ParadigmsLocalType.Architectural_ParadigmLocalType> Architectural_Paradigm {
                get {
                    if ((this.Architectural_ParadigmField == null)) {
                        this.Architectural_ParadigmField = new XTypedList<Architectural_ParadigmLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Architectural_Paradigm", ""));
                    }
                    return this.Architectural_ParadigmField;
                }
                set {
                    if ((value == null)) {
                        this.Architectural_ParadigmField = null;
                    }
                    else {
                        if ((this.Architectural_ParadigmField == null)) {
                            this.Architectural_ParadigmField = XTypedList<Architectural_ParadigmLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Architectural_Paradigm", ""));
                        }
                        else {
                            XTypedServices.SetList<Architectural_ParadigmLocalType>(this.Architectural_ParadigmField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Architectural_Paradigms", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Architectural_ParadigmsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Architectural_Paradigm", ""), typeof(Architectural_ParadigmLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Architectural_ParadigmLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Architectural_ParadigmLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Architectural_ParadigmLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Architectural_ParadigmLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies
                ///												paradigms in which this weakness is likely to
                ///												exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Architectural_Paradigm_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Architectural_Paradigm_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Architectural_Paradigm_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified
                ///												paradigm.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Architectural_Paradigm", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Architectural_ParadigmLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Environment+)
        /// </para>
        /// </summary>
        public partial class EnvironmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<EnvironmentLocalType> EnvironmentField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator EnvironmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EnvironmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EnvironmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Environment", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Environment+)
            /// </para>
            /// </summary>
            public EnvironmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Environment in which this entry may exist and with
            ///												what frequency in the specified environment.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Environment+)
            /// </para>
            /// </summary>
            public IList<Compound_Element.Applicable_PlatformsLocalType.EnvironmentsLocalType.EnvironmentLocalType> Environment {
                get {
                    if ((this.EnvironmentField == null)) {
                        this.EnvironmentField = new XTypedList<EnvironmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Environment", ""));
                    }
                    return this.EnvironmentField;
                }
                set {
                    if ((value == null)) {
                        this.EnvironmentField = null;
                    }
                    else {
                        if ((this.EnvironmentField == null)) {
                            this.EnvironmentField = XTypedList<EnvironmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Environment", ""));
                        }
                        else {
                            XTypedServices.SetList<EnvironmentLocalType>(this.EnvironmentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Environments", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EnvironmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Environment", ""), typeof(EnvironmentLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class EnvironmentLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator EnvironmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EnvironmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public EnvironmentLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This attribute is the name of
                ///												the Environment we are identifying.
                ///												
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Environment_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Environment_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Environment_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified
                ///												environment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Environment", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<EnvironmentLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Technology_Class+)
        /// </para>
        /// </summary>
        public partial class Technology_ClassesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Technology_ClassLocalType> Technology_ClassField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Technology_ClassesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Technology_ClassesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Technology_ClassesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Technology_Class", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Technology_Class+)
            /// </para>
            /// </summary>
            public Technology_ClassesLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies a single
            ///												Technology_Class in which this entry may exist and
            ///												with what frequency in the specified
            ///												class.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Technology_Class+)
            /// </para>
            /// </summary>
            public IList<Compound_Element.Applicable_PlatformsLocalType.Technology_ClassesLocalType.Technology_ClassLocalType> Technology_Class {
                get {
                    if ((this.Technology_ClassField == null)) {
                        this.Technology_ClassField = new XTypedList<Technology_ClassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Technology_Class", ""));
                    }
                    return this.Technology_ClassField;
                }
                set {
                    if ((value == null)) {
                        this.Technology_ClassField = null;
                    }
                    else {
                        if ((this.Technology_ClassField == null)) {
                            this.Technology_ClassField = XTypedList<Technology_ClassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Technology_Class", ""));
                        }
                        else {
                            XTypedServices.SetList<Technology_ClassLocalType>(this.Technology_ClassField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Technology_Classes", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Technology_ClassesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Technology_Class", ""), typeof(Technology_ClassLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class Technology_ClassLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator Technology_ClassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Technology_ClassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public Technology_ClassLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  This subelement identifies a
                ///												technology class in which this weakness is likely
                ///												to exist. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Technology_Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Technology_Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Technology_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// This attribute identifies the
                ///												prevalence with which this weakness may occur
                ///												within code that runs on the specified technology
                ///												class.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Prevalence {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Technology_Class", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Technology_ClassLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Common_Platform_Reference+)
        /// </para>
        /// </summary>
        public partial class Common_Platform_ReferencesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Common_Platform_ReferenceLocalType> Common_Platform_ReferenceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Common_Platform_ReferencesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Common_Platform_ReferencesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Common_Platform_ReferencesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Common_Platform_Reference", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Common_Platform_Reference+)
            /// </para>
            /// </summary>
            public Common_Platform_ReferencesLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  The Common_Platform subelement
            ///												identifies a single platform that is associated with
            ///												this weakness. Its only child, CPE_ID is required
            ///												and identifies the related CPE entry. More than one
            ///												Common_Platform_Reference element can exist, but
            ///												they must all be contained within a single
            ///												Common_Platform_References element.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Common_Platform_Reference+)
            /// </para>
            /// </summary>
            public IList<Compound_Element.Applicable_PlatformsLocalType.Common_Platform_ReferencesLocalType.Common_Platform_ReferenceLocalType> Common_Platform_Reference {
                get {
                    if ((this.Common_Platform_ReferenceField == null)) {
                        this.Common_Platform_ReferenceField = new XTypedList<Common_Platform_ReferenceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Common_Platform_Reference", ""));
                    }
                    return this.Common_Platform_ReferenceField;
                }
                set {
                    if ((value == null)) {
                        this.Common_Platform_ReferenceField = null;
                    }
                    else {
                        if ((this.Common_Platform_ReferenceField == null)) {
                            this.Common_Platform_ReferenceField = XTypedList<Common_Platform_ReferenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Common_Platform_Reference", ""));
                        }
                        else {
                            XTypedServices.SetList<Common_Platform_ReferenceLocalType>(this.Common_Platform_ReferenceField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Common_Platform_References", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Common_Platform_ReferencesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Common_Platform_Reference", ""), typeof(Common_Platform_ReferenceLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CPE_ID)
            /// </para>
            /// </summary>
            public partial class Common_Platform_ReferenceLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator Common_Platform_ReferenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Common_Platform_ReferenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static Common_Platform_ReferenceLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CPE_ID", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (CPE_ID)
                /// </para>
                /// </summary>
                public Common_Platform_ReferenceLocalType() {
                }
                
                /// <summary>
                /// <para>
                ///  The CPE_ID stores the value for
                ///												the related CPE entry identifier as a string. Only
                ///												one CPE_ID element can exist for each
                ///												Common_Platform element. 
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CPE_ID)
                /// </para>
                /// </summary>
                public string CPE_ID {
                    get {
                        XElement x = this.GetElement(XName.Get("CPE_ID", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("CPE_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Common_Platform_Reference", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<Common_Platform_ReferenceLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("CPE_ID", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Background_Detail+)
    /// </para>
    /// </summary>
    public partial class Background_DetailsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Background_DetailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Background_DetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Background_DetailsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Background_DetailsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Background_Detail", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Background_Detail+)
        /// </para>
        /// </summary>
        public Background_DetailsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element contains background information
        ///									regarding the entry or any technologies that are related to it,
        ///									where the background information is not related to the nature of
        ///									the weakness itself. It should be filled out where appropriate.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Background_Detail+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Background_Detail {
            get {
                if ((this.Background_DetailField == null)) {
                    this.Background_DetailField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Background_Detail", ""));
                }
                return this.Background_DetailField;
            }
            set {
                if ((value == null)) {
                    this.Background_DetailField = null;
                }
                else {
                    if ((this.Background_DetailField == null)) {
                        this.Background_DetailField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Background_Detail", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Background_DetailField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Background_Details", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Background_DetailsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Background_Detail", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Terminology_Note+)
    /// </para>
    /// </summary>
    public partial class Terminology_NotesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Terminology_NoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Terminology_NotesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Terminology_NotesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Terminology_NotesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Terminology_Note", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Terminology_Note+)
        /// </para>
        /// </summary>
        public Terminology_NotesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element is used for general discussion of
        ///									terminology issues associated with this weakness. It is
        ///									different from the Alternate_Terms element, which is focused on
        ///									discussion of specific terms that are commonly used. It should
        ///									be filled out in any entry for which there is no established
        ///									terminology, or if there are multiple uses of the same key
        ///									term.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Terminology_Note+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Terminology_Note {
            get {
                if ((this.Terminology_NoteField == null)) {
                    this.Terminology_NoteField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Terminology_Note", ""));
                }
                return this.Terminology_NoteField;
            }
            set {
                if ((value == null)) {
                    this.Terminology_NoteField = null;
                }
                else {
                    if ((this.Terminology_NoteField == null)) {
                        this.Terminology_NoteField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Terminology_Note", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Terminology_NoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Terminology_Notes", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Terminology_NotesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Terminology_Note", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Introductory_Phase*)
    /// </para>
    /// </summary>
    public partial class Time_of_IntroductionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Introductory_PhaseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Time_of_IntroductionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Time_of_IntroductionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Time_of_IntroductionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Introductory_Phase", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Introductory_Phase*)
        /// </para>
        /// </summary>
        public Time_of_IntroductionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies the point of time in the
        ///									software life cycle at which the weakness may be introduced.
        ///									Possible values are Architecture and Design, Implementation and
        ///									Operational to name a few. If there are multiple points of time
        ///									at which the weakness may be introduced, then separate
        ///									Introductory_Phase elements should be included for each. This
        ///									element should be populated for all weakness bases and variants.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Introductory_Phase*)
        /// </para>
        /// </summary>
        public IList<string> Introductory_Phase {
            get {
                if ((this.Introductory_PhaseField == null)) {
                    this.Introductory_PhaseField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Introductory_Phase", ""));
                }
                return this.Introductory_PhaseField;
            }
            set {
                if ((value == null)) {
                    this.Introductory_PhaseField = null;
                }
                else {
                    if ((this.Introductory_PhaseField == null)) {
                        this.Introductory_PhaseField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Introductory_Phase", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Introductory_PhaseField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Time_of_Introduction", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Time_of_IntroductionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Introductory_Phase", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Mode_of_Introduction*)
    /// </para>
    /// </summary>
    public partial class Modes_of_IntroductionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Mode_of_IntroductionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Modes_of_IntroductionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Modes_of_IntroductionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Modes_of_IntroductionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mode_of_Introduction", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Mode_of_Introduction*)
        /// </para>
        /// </summary>
        public Modes_of_IntroductionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies the mode by which the
        ///									weakness may be introduced. If there are multiple ways in which
        ///									the weakness may be introduced, then separate
        ///									Mode_of_Introduction elements should be included for each. This
        ///									element should be populated for all weakness bases and variants.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Mode_of_Introduction*)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Mode_of_Introduction {
            get {
                if ((this.Mode_of_IntroductionField == null)) {
                    this.Mode_of_IntroductionField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Mode_of_Introduction", ""));
                }
                return this.Mode_of_IntroductionField;
            }
            set {
                if ((value == null)) {
                    this.Mode_of_IntroductionField = null;
                }
                else {
                    if ((this.Mode_of_IntroductionField == null)) {
                        this.Mode_of_IntroductionField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Mode_of_Introduction", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Mode_of_IntroductionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Modes_of_Introduction", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Modes_of_IntroductionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Mode_of_Introduction", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabling_Factor_for_Exploitation+)
    /// </para>
    /// </summary>
    public partial class Enabling_Factors_for_ExploitationLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Enabling_Factor_for_ExploitationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Enabling_Factors_for_ExploitationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Enabling_Factors_for_ExploitationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Enabling_Factors_for_ExploitationLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Enabling_Factor_for_Exploitation", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabling_Factor_for_Exploitation+)
        /// </para>
        /// </summary>
        public Enabling_Factors_for_ExploitationLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies a condition or factor
        ///									that could increase the likelihood of exploit for this weakness.
        ///									This element should contain structured text with enough detail
        ///									to make the enabling factor clear. This should be filled out for
        ///									most weakness bases. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Enabling_Factor_for_Exploitation+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Enabling_Factor_for_Exploitation {
            get {
                if ((this.Enabling_Factor_for_ExploitationField == null)) {
                    this.Enabling_Factor_for_ExploitationField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Enabling_Factor_for_Exploitation", ""));
                }
                return this.Enabling_Factor_for_ExploitationField;
            }
            set {
                if ((value == null)) {
                    this.Enabling_Factor_for_ExploitationField = null;
                }
                else {
                    if ((this.Enabling_Factor_for_ExploitationField == null)) {
                        this.Enabling_Factor_for_ExploitationField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Enabling_Factor_for_Exploitation", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Enabling_Factor_for_ExploitationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Enabling_Factors_for_Exploitation", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Enabling_Factors_for_ExploitationLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Enabling_Factor_for_Exploitation", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    private class Likelihood_of_ExploitLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Very High",
                        "High to Very High",
                        "High",
                        "Medium to High",
                        "Medium",
                        "Low to Medium",
                        "Low",
                        "Very Low"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Likelihood_of_ExploitLocalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Common_Consequence+)
    /// </para>
    /// </summary>
    public partial class Common_ConsequencesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Common_Consequence> Common_ConsequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Common_ConsequencesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Common_ConsequencesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Common_ConsequencesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Common_Consequence", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Common_Consequence+)
        /// </para>
        /// </summary>
        public Common_ConsequencesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Common_Consequence+)
        /// </para>
        /// </summary>
        public IList<Common_Consequence> Common_Consequence {
            get {
                if ((this.Common_ConsequenceField == null)) {
                    this.Common_ConsequenceField = new XTypedList<Common_Consequence>(this, LinqToXsdTypeManager.Instance, XName.Get("Common_Consequence", ""));
                }
                return this.Common_ConsequenceField;
            }
            set {
                if ((value == null)) {
                    this.Common_ConsequenceField = null;
                }
                else {
                    if ((this.Common_ConsequenceField == null)) {
                        this.Common_ConsequenceField = XTypedList<Common_Consequence>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Common_Consequence", ""));
                    }
                    else {
                        XTypedServices.SetList<Common_Consequence>(this.Common_ConsequenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Common_Consequences", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Common_ConsequencesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Common_Consequence", ""), typeof(Common_Consequence));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Detection_Method+)
    /// </para>
    /// </summary>
    public partial class Detection_MethodsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Detection_MethodLocalType> Detection_MethodField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Detection_MethodsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Detection_MethodsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Detection_MethodsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Detection_Method", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Detection_Method+)
        /// </para>
        /// </summary>
        public Detection_MethodsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// The Detection_Method element is intended to
        ///									provide information on different techniques that can be used to
        ///									detect a weakness, including their strengths and limitations.
        ///									This should be filled out for some weakness classes and bases.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Detection_Method+)
        /// </para>
        /// </summary>
        public IList<Compound_Element.Detection_MethodsLocalType.Detection_MethodLocalType> Detection_Method {
            get {
                if ((this.Detection_MethodField == null)) {
                    this.Detection_MethodField = new XTypedList<Detection_MethodLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Detection_Method", ""));
                }
                return this.Detection_MethodField;
            }
            set {
                if ((value == null)) {
                    this.Detection_MethodField = null;
                }
                else {
                    if ((this.Detection_MethodField == null)) {
                        this.Detection_MethodField = XTypedList<Detection_MethodLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Detection_Method", ""));
                    }
                    else {
                        XTypedServices.SetList<Detection_MethodLocalType>(this.Detection_MethodField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Detection_Methods", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Detection_MethodsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Detection_Method", ""), typeof(Detection_MethodLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
        /// </para>
        /// </summary>
        public partial class Detection_MethodLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Detection_MethodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Detection_MethodLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Detection_MethodLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Method_Name", "")), new NamedContentModelEntity(XName.Get("Method_Description", "")), new NamedContentModelEntity(XName.Get("Method_Effectiveness", "")), new NamedContentModelEntity(XName.Get("Method_Effectiveness_Notes", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public Detection_MethodLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// The Method_Name element identifies the
            ///												particular weakness detection method to be
            ///												described. This should be filled out for some
            ///												weakness classes and bases. 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public string Method_Name {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Method_Name", ""), value, "Method_Name", Method_NameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// The Method_Description element is
            ///												intended to provide some context of how this
            ///												Detection_Method can be applied to a specific
            ///												weakness. This should be filled out for some
            ///												weakness classes and bases. 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Method_Description {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Description", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Method_Description", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// This element summarizes how effective
            ///												the detection method may be in detecting the
            ///												associated weakness. This assumes the use of
            ///												best-of-breed tools, analysts, and methods. There is
            ///												limited consideration for financial costs, labor, or
            ///												time.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public string Method_Effectiveness {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Effectiveness", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Method_Effectiveness", ""), value, "Method_Effectiveness", Method_EffectivenessLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            ///  The Method_Effectiveness_Notes
            ///												element is intended to discuss the strengths and
            ///												shortcomings of this detection method. This should
            ///												be filled out for some weakness classes and bases.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Method_Name, Method_Description?, Method_Effectiveness?, Method_Effectiveness_Notes?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Method_Effectiveness_Notes {
                get {
                    XElement x = this.GetElement(XName.Get("Method_Effectiveness_Notes", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Method_Effectiveness_Notes", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// The Detection_Method_ID stores the value
            ///											for the related Detection_Method entry identifier as a
            ///											string. Only one Detection_Method_ID element can exist
            ///											for each Detection_Method element (ex: DM-1). However,
            ///											Detection_Methods across CWE with the same ID should
            ///											only vary in small details.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Detection_Method_ID {
                get {
                    XAttribute x = this.Attribute(XName.Get("Detection_Method_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Detection_Method_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Detection_Method", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Detection_MethodLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Method_Name", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Method_Description", ""), typeof(Structured_Text_Type));
                localElementDictionary.Add(XName.Get("Method_Effectiveness", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Method_Effectiveness_Notes", ""), typeof(Structured_Text_Type));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class Method_NameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                                "Automated Analysis",
                                "Automated Dynamic Analysis",
                                "Automated Static Analysis",
                                "Fuzzing",
                                "Manual Analysis",
                                "Manual Dynamic Analysis",
                                "Manual Static Analysis",
                                "Other",
                                "White Box",
                                "Black Box"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                
                private Method_NameLocalType() {
                }
            }
            
            private class Method_EffectivenessLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "None/Rare",
                                "Limited",
                                "Opportunistic",
                                "Moderate",
                                "High"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private Method_EffectivenessLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Mitigation+)
    /// </para>
    /// </summary>
    public partial class Potential_MitigationsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Mitigation> MitigationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Potential_MitigationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Potential_MitigationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Potential_MitigationsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mitigation", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Mitigation+)
        /// </para>
        /// </summary>
        public Potential_MitigationsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Mitigation+)
        /// </para>
        /// </summary>
        public IList<Mitigation> Mitigation {
            get {
                if ((this.MitigationField == null)) {
                    this.MitigationField = new XTypedList<Mitigation>(this, LinqToXsdTypeManager.Instance, XName.Get("Mitigation", ""));
                }
                return this.MitigationField;
            }
            set {
                if ((value == null)) {
                    this.MitigationField = null;
                }
                else {
                    if ((this.MitigationField == null)) {
                        this.MitigationField = XTypedList<Mitigation>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Mitigation", ""));
                    }
                    else {
                        XTypedServices.SetList<Mitigation>(this.MitigationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Potential_Mitigations", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Potential_MitigationsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Mitigation", ""), typeof(Mitigation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    private class Causal_NatureLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Implicit",
                        "Explicit"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Causal_NatureLocalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Demonstrative_Example+)
    /// </para>
    /// </summary>
    public partial class Demonstrative_ExamplesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Demonstrative_ExampleLocalType> Demonstrative_ExampleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Demonstrative_ExamplesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Demonstrative_ExamplesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Demonstrative_ExamplesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Demonstrative_Example", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Demonstrative_Example+)
        /// </para>
        /// </summary>
        public Demonstrative_ExamplesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element illustrates how this weakness may
        ///									look in actual code. It contains an Intro_Text element
        ///									describing the context in which this code should be viewed, an
        ///									Example_Body element which is a mixture of code and explanatory
        ///									text, and Demonstrative_Example_References that provide
        ///									additional information.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Demonstrative_Example+)
        /// </para>
        /// </summary>
        public IList<Compound_Element.Demonstrative_ExamplesLocalType.Demonstrative_ExampleLocalType> Demonstrative_Example {
            get {
                if ((this.Demonstrative_ExampleField == null)) {
                    this.Demonstrative_ExampleField = new XTypedList<Demonstrative_ExampleLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Demonstrative_Example", ""));
                }
                return this.Demonstrative_ExampleField;
            }
            set {
                if ((value == null)) {
                    this.Demonstrative_ExampleField = null;
                }
                else {
                    if ((this.Demonstrative_ExampleField == null)) {
                        this.Demonstrative_ExampleField = XTypedList<Demonstrative_ExampleLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Demonstrative_Example", ""));
                    }
                    else {
                        XTypedServices.SetList<Demonstrative_ExampleLocalType>(this.Demonstrative_ExampleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Demonstrative_Examples", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Demonstrative_ExamplesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Demonstrative_Example", ""), typeof(Demonstrative_ExampleLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
        /// </para>
        /// </summary>
        public partial class Demonstrative_ExampleLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Demonstrative_ExampleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Demonstrative_ExampleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Demonstrative_ExampleLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Intro_Text", "")), new NamedContentModelEntity(XName.Get("Example_Body", "")), new NamedContentModelEntity(XName.Get("Demonstrative_Example_References", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public Demonstrative_ExampleLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// This element describes the context and
            ///												setting surrounding the example to add clarity for
            ///												the reader. 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public string Intro_Text {
                get {
                    XElement x = this.GetElement(XName.Get("Intro_Text", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Intro_Text", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element consists of a
            ///												Structured_Text element which should hold the code
            ///												and some explanatory information for the
            ///												reader.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public Structured_Text_Type Example_Body {
                get {
                    XElement x = this.GetElement(XName.Get("Example_Body", ""));
                    return ((Structured_Text_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Example_Body", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// The Demonstrative_Example_References
            ///												element contains one or more Reference elements,
            ///												each of which provide further reading and insight
            ///												into this demonstrative example. This should be
            ///												filled out when appropriate.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Intro_Text, Example_Body?, Demonstrative_Example_References?)
            /// </para>
            /// </summary>
            public Reference_List_Type Demonstrative_Example_References {
                get {
                    XElement x = this.GetElement(XName.Get("Demonstrative_Example_References", ""));
                    return ((Reference_List_Type)(x));
                }
                set {
                    this.SetElement(XName.Get("Demonstrative_Example_References", ""), value);
                }
            }
            
            /// <summary>
            /// <para>
            ///  The Demonstrative_Example_ID stores the
            ///											value for the related Demonstrative_Example entry
            ///											identifier as a string. Only one
            ///											Demonstrative_Example_ID element can exist for each
            ///											Demonstrative_Example element (ex: DX-1). However,
            ///											Demonstrative_Examples across CWE with the same ID
            ///											should only vary in small details.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Demonstrative_Example_ID {
                get {
                    XAttribute x = this.Attribute(XName.Get("Demonstrative_Example_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Demonstrative_Example_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Demonstrative_Example", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Demonstrative_ExampleLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Intro_Text", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Example_Body", ""), typeof(Structured_Text_Type));
                localElementDictionary.Add(XName.Get("Demonstrative_Example_References", ""), typeof(Reference_List_Type));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Observed_Example+)
    /// </para>
    /// </summary>
    public partial class Observed_ExamplesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Observed_ExampleLocalType> Observed_ExampleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Observed_ExamplesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Observed_ExamplesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Observed_ExamplesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Observed_Example", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Observed_Example+)
        /// </para>
        /// </summary>
        public Observed_ExamplesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element specifies a reference to a specific
        ///									observed instance of this weakness in the real-world; Typically
        ///									this will be a CVE reference. Each Observed_Example element
        ///									represents a single example. This element should be filled out
        ///									for as many entries as possible. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Observed_Example+)
        /// </para>
        /// </summary>
        public IList<Compound_Element.Observed_ExamplesLocalType.Observed_ExampleLocalType> Observed_Example {
            get {
                if ((this.Observed_ExampleField == null)) {
                    this.Observed_ExampleField = new XTypedList<Observed_ExampleLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Observed_Example", ""));
                }
                return this.Observed_ExampleField;
            }
            set {
                if ((value == null)) {
                    this.Observed_ExampleField = null;
                }
                else {
                    if ((this.Observed_ExampleField == null)) {
                        this.Observed_ExampleField = XTypedList<Observed_ExampleLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Observed_Example", ""));
                    }
                    else {
                        XTypedServices.SetList<Observed_ExampleLocalType>(this.Observed_ExampleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Observed_Examples", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Observed_ExamplesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Observed_Example", ""), typeof(Observed_ExampleLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
        /// </para>
        /// </summary>
        public partial class Observed_ExampleLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> Observed_Example_ReferenceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> Observed_Example_LinkField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Observed_ExampleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Observed_ExampleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Observed_ExampleLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Observed_Example_Reference", "")), new NamedContentModelEntity(XName.Get("Observed_Example_Description", "")), new NamedContentModelEntity(XName.Get("Observed_Example_Link", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public Observed_ExampleLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This field should contain the
            ///												identifier for the example being cited. For example,
            ///												if a CVE is being cited it should be of the standard
            ///												CVE identifier format, such as CVE-2005-1951 or
            ///												CVE-1999-0046. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public IList<string> Observed_Example_Reference {
                get {
                    if ((this.Observed_Example_ReferenceField == null)) {
                        this.Observed_Example_ReferenceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Observed_Example_Reference", ""));
                    }
                    return this.Observed_Example_ReferenceField;
                }
                set {
                    if ((value == null)) {
                        this.Observed_Example_ReferenceField = null;
                    }
                    else {
                        if ((this.Observed_Example_ReferenceField == null)) {
                            this.Observed_Example_ReferenceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Observed_Example_Reference", ""));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.Observed_Example_ReferenceField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            ///  This field should contain a product
            ///												independent description of the example being cited.
            ///												The description should present an unambiguous
            ///												correlation between the example being described and
            ///												the weakness which it is meant to exemplify. It
            ///												should also be short and easy to understand.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public string Observed_Example_Description {
                get {
                    XElement x = this.GetElement(XName.Get("Observed_Example_Description", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Observed_Example_Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This field should provide a valid URL
            ///												where more information regarding this example can be
            ///												obtained. 
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Observed_Example_Reference*, Observed_Example_Description, Observed_Example_Link*)
            /// </para>
            /// </summary>
            public IList<string> Observed_Example_Link {
                get {
                    if ((this.Observed_Example_LinkField == null)) {
                        this.Observed_Example_LinkField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Observed_Example_Link", ""));
                    }
                    return this.Observed_Example_LinkField;
                }
                set {
                    if ((value == null)) {
                        this.Observed_Example_LinkField = null;
                    }
                    else {
                        if ((this.Observed_Example_LinkField == null)) {
                            this.Observed_Example_LinkField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Observed_Example_Link", ""));
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.Observed_Example_LinkField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Observed_Example", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Observed_ExampleLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Observed_Example_Reference", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Observed_Example_Description", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Observed_Example_Link", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Theoretical_Note+)
    /// </para>
    /// </summary>
    public partial class Theoretical_NotesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Theoretical_NoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Theoretical_NotesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Theoretical_NotesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Theoretical_NotesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Theoretical_Note", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Theoretical_Note+)
        /// </para>
        /// </summary>
        public Theoretical_NotesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This element is used to describe the weakness
        ///									using vulnerability theory concepts, which can be useful in
        ///									understanding the Research view. It should be filled out as
        ///									needed, especially in cases where the application of
        ///									vulnerability theory is not necessarily obvious for the
        ///									weakness.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Theoretical_Note+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Theoretical_Note {
            get {
                if ((this.Theoretical_NoteField == null)) {
                    this.Theoretical_NoteField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Theoretical_Note", ""));
                }
                return this.Theoretical_NoteField;
            }
            set {
                if ((value == null)) {
                    this.Theoretical_NoteField = null;
                }
                else {
                    if ((this.Theoretical_NoteField == null)) {
                        this.Theoretical_NoteField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Theoretical_Note", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Theoretical_NoteField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Theoretical_Notes", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Theoretical_NotesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Theoretical_Note", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Functional_Area+)
    /// </para>
    /// </summary>
    public partial class Functional_AreasLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Functional_AreaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Functional_AreasLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Functional_AreasLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Functional_AreasLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Functional_Area", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Functional_Area+)
        /// </para>
        /// </summary>
        public Functional_AreasLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies the functional area of
        ///									the software in which the weakness is most likely to occur. For
        ///									example, CWE-178 Failure to Resolve Case Sensitivity is likely
        ///									to occur in functional areas of software related to file
        ///									processing and credentials. Each applicable functional area
        ///									should have a new Functional_Area element and standard title
        ///									capitalization should be applied to each area.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Functional_Area+)
        /// </para>
        /// </summary>
        public IList<string> Functional_Area {
            get {
                if ((this.Functional_AreaField == null)) {
                    this.Functional_AreaField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Functional_Area", ""));
                }
                return this.Functional_AreaField;
            }
            set {
                if ((value == null)) {
                    this.Functional_AreaField = null;
                }
                else {
                    if ((this.Functional_AreaField == null)) {
                        this.Functional_AreaField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Functional_Area", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Functional_AreaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Functional_Areas", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Functional_AreasLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Functional_Area", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Relevant_Property+)
    /// </para>
    /// </summary>
    public partial class Relevant_PropertiesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Relevant_PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Relevant_PropertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Relevant_PropertiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Relevant_PropertiesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Relevant_Property", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Relevant_Property+)
        /// </para>
        /// </summary>
        public Relevant_PropertiesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  Each Relevant_Property element identifies a
        ///									property that is required by the code or a resource in order to
        ///									function as specified. Correctly labeling all of the relevant
        ///									properties can help to figure out what the root cause of a
        ///									vulnerability might be. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Relevant_Property+)
        /// </para>
        /// </summary>
        public IList<string> Relevant_Property {
            get {
                if ((this.Relevant_PropertyField == null)) {
                    this.Relevant_PropertyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Relevant_Property", ""));
                }
                return this.Relevant_PropertyField;
            }
            set {
                if ((value == null)) {
                    this.Relevant_PropertyField = null;
                }
                else {
                    if ((this.Relevant_PropertyField == null)) {
                        this.Relevant_PropertyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Relevant_Property", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Relevant_PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Relevant_Properties", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Relevant_PropertiesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Relevant_Property", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class Relevant_PropertyLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "Accessibility",
                            "Mutability",
                            "Trustability",
                            "Validity",
                            "Equivalence",
                            "Uniqueness",
                            "Predictability"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Relevant_PropertyLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Affected_Resource+)
    /// </para>
    /// </summary>
    public partial class Affected_ResourcesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Affected_ResourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Affected_ResourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Affected_ResourcesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Affected_ResourcesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Affected_Resource", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Affected_Resource+)
        /// </para>
        /// </summary>
        public Affected_ResourcesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies system resources affected
        ///									by this entry. Each resource affected by this weakness should be
        ///									given its own Affected_Resource element. For example, CWE-249,
        ///									Path Manipulation has both Memory and File/Directory listed in
        ///									separate Affected_Resource elements. This should be filled out
        ///									in weakness bases and variants where applicable.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Affected_Resource+)
        /// </para>
        /// </summary>
        public IList<string> Affected_Resource {
            get {
                if ((this.Affected_ResourceField == null)) {
                    this.Affected_ResourceField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Affected_Resource", ""));
                }
                return this.Affected_ResourceField;
            }
            set {
                if ((value == null)) {
                    this.Affected_ResourceField = null;
                }
                else {
                    if ((this.Affected_ResourceField == null)) {
                        this.Affected_ResourceField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Affected_Resource", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Affected_ResourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Affected_Resources", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Affected_ResourcesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Affected_Resource", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class Affected_ResourceLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                            "System Process",
                            "Memory",
                            "File/Directory",
                            "CPU"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private Affected_ResourceLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Taxonomy_Mapping+)
    /// </para>
    /// </summary>
    public partial class Taxonomy_MappingsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Taxonomy_MappingLocalType> Taxonomy_MappingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Taxonomy_MappingsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Taxonomy_MappingsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Taxonomy_MappingsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Taxonomy_Mapping", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Taxonomy_Mapping+)
        /// </para>
        /// </summary>
        public Taxonomy_MappingsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This structure describes mappings to nodes of
        ///									other taxonomies that are similar in meaning to this node.
        ///									Although this may sound similar to Source_Taxonomy,
        ///									Source_Taxonomy is designed to provide a history and pedigree
        ///									for the entry, whereas Taxonomy_Mapping allows similar nodes in
        ///									other collections to be identified as matching concepts with
        ///									this weakness. For example, Taxonomy_Mapping should be used to
        ///									map the CWE entries to their OWASP Top 10 equivalents. The sole
        ///									attribute is "Mapped_Taxonomy_Name" which is used to identify
        ///									the taxonomy to which this weakness is being mapped.
        ///								
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Taxonomy_Mapping+)
        /// </para>
        /// </summary>
        public IList<Compound_Element.Taxonomy_MappingsLocalType.Taxonomy_MappingLocalType> Taxonomy_Mapping {
            get {
                if ((this.Taxonomy_MappingField == null)) {
                    this.Taxonomy_MappingField = new XTypedList<Taxonomy_MappingLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Taxonomy_Mapping", ""));
                }
                return this.Taxonomy_MappingField;
            }
            set {
                if ((value == null)) {
                    this.Taxonomy_MappingField = null;
                }
                else {
                    if ((this.Taxonomy_MappingField == null)) {
                        this.Taxonomy_MappingField = XTypedList<Taxonomy_MappingLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Taxonomy_Mapping", ""));
                    }
                    else {
                        XTypedServices.SetList<Taxonomy_MappingLocalType>(this.Taxonomy_MappingField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Taxonomy_Mappings", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Taxonomy_MappingsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Taxonomy_Mapping", ""), typeof(Taxonomy_MappingLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
        /// </para>
        /// </summary>
        public partial class Taxonomy_MappingLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Taxonomy_MappingLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Taxonomy_MappingLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Taxonomy_MappingLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mapped_Node_Name", "")), new NamedContentModelEntity(XName.Get("Mapped_Node_ID", "")), new NamedContentModelEntity(XName.Get("Mapping_Fit", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public Taxonomy_MappingLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies the name of
            ///												the entry to which this weakness is being mapped in
            ///												taxonomy Taxonomy_Name. 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public string Mapped_Node_Name {
                get {
                    XElement x = this.GetElement(XName.Get("Mapped_Node_Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Mapped_Node_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies the ID of the
            ///												entry to which this weakness is being mapped in
            ///												taxonomy Taxonomy_Name. 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public string Mapped_Node_ID {
                get {
                    XElement x = this.GetElement(XName.Get("Mapped_Node_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Mapped_Node_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This element identifies how close to
            ///												the original taxonomy this node was mapped.
            ///											
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Mapped_Node_Name?, Mapped_Node_ID?, Mapping_Fit?)
            /// </para>
            /// </summary>
            public string Mapping_Fit {
                get {
                    XElement x = this.GetElement(XName.Get("Mapping_Fit", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(XName.Get("Mapping_Fit", ""), value, "Mapping_Fit", Mapping_FitLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            ///  This attribute identifies the taxonomy to
            ///											which this weakness has a similar or equivalent entry.
            ///										
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string Mapped_Taxonomy_Name {
                get {
                    XAttribute x = this.Attribute(XName.Get("Mapped_Taxonomy_Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Mapped_Taxonomy_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Taxonomy_Mapping", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Taxonomy_MappingLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Mapped_Node_Name", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Mapped_Node_ID", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Mapping_Fit", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class Mapping_FitLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "Exact",
                                "CWE_More_Abstract",
                                "CWE_More_Specific",
                                "Imprecise",
                                "Perspective"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private Mapping_FitLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (White_Box_Definition+)
    /// </para>
    /// </summary>
    public partial class White_Box_DefinitionsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> White_Box_DefinitionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator White_Box_DefinitionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<White_Box_DefinitionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static White_Box_DefinitionsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("White_Box_Definition", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (White_Box_Definition+)
        /// </para>
        /// </summary>
        public White_Box_DefinitionsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element describes the weakness from a white
        ///									box perspective, meaning that the view includes the knowledge of
        ///									control flow, data flow, and all other inner workings of the
        ///									software in which the weakness exists. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (White_Box_Definition+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> White_Box_Definition {
            get {
                if ((this.White_Box_DefinitionField == null)) {
                    this.White_Box_DefinitionField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("White_Box_Definition", ""));
                }
                return this.White_Box_DefinitionField;
            }
            set {
                if ((value == null)) {
                    this.White_Box_DefinitionField = null;
                }
                else {
                    if ((this.White_Box_DefinitionField == null)) {
                        this.White_Box_DefinitionField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("White_Box_Definition", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.White_Box_DefinitionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("White_Box_Definitions", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<White_Box_DefinitionsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("White_Box_Definition", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Black_Box_Definition+)
    /// </para>
    /// </summary>
    public partial class Black_Box_DefinitionsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Structured_Text_Type> Black_Box_DefinitionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Black_Box_DefinitionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Black_Box_DefinitionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Black_Box_DefinitionsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Black_Box_Definition", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Black_Box_Definition+)
        /// </para>
        /// </summary>
        public Black_Box_DefinitionsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element contains elements describes the
        ///									weakness from an external perspective, meaning that the view
        ///									includes no knowledge of how the software is processing data
        ///									other than what can be inferred from observing the software's
        ///									behavior. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Black_Box_Definition+)
        /// </para>
        /// </summary>
        public IList<Structured_Text_Type> Black_Box_Definition {
            get {
                if ((this.Black_Box_DefinitionField == null)) {
                    this.Black_Box_DefinitionField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Black_Box_Definition", ""));
                }
                return this.Black_Box_DefinitionField;
            }
            set {
                if ((value == null)) {
                    this.Black_Box_DefinitionField = null;
                }
                else {
                    if ((this.Black_Box_DefinitionField == null)) {
                        this.Black_Box_DefinitionField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Black_Box_Definition", ""));
                    }
                    else {
                        XTypedServices.SetList<Structured_Text_Type>(this.Black_Box_DefinitionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Black_Box_Definitions", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Black_Box_DefinitionsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Black_Box_Definition", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Related_Attack_Pattern+)
    /// </para>
    /// </summary>
    public partial class Related_Attack_PatternsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Related_Attack_PatternLocalType> Related_Attack_PatternField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Related_Attack_PatternsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Related_Attack_PatternsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Related_Attack_PatternsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Related_Attack_Pattern", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Related_Attack_Pattern+)
        /// </para>
        /// </summary>
        public Related_Attack_PatternsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  The Related_Attack_Pattern subelement identifies
        ///									a single attack pattern that is associated with this weakness.
        ///									Its only child, CAPEC_ID is required and identifies the related
        ///									CAPEC entry. It also has a required attribute, CAPEC_Version,
        ///									which identifies which version of CAPEC is being referenced.
        ///									More than one Related _Attack_Pattern element can exist, but
        ///									they must all be contained within a single
        ///									Related_Attack_Patterns element. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Related_Attack_Pattern+)
        /// </para>
        /// </summary>
        public IList<Compound_Element.Related_Attack_PatternsLocalType.Related_Attack_PatternLocalType> Related_Attack_Pattern {
            get {
                if ((this.Related_Attack_PatternField == null)) {
                    this.Related_Attack_PatternField = new XTypedList<Related_Attack_PatternLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Related_Attack_Pattern", ""));
                }
                return this.Related_Attack_PatternField;
            }
            set {
                if ((value == null)) {
                    this.Related_Attack_PatternField = null;
                }
                else {
                    if ((this.Related_Attack_PatternField == null)) {
                        this.Related_Attack_PatternField = XTypedList<Related_Attack_PatternLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Related_Attack_Pattern", ""));
                    }
                    else {
                        XTypedServices.SetList<Related_Attack_PatternLocalType>(this.Related_Attack_PatternField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Related_Attack_Patterns", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Related_Attack_PatternsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Related_Attack_Pattern", ""), typeof(Related_Attack_PatternLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CAPEC_ID)
        /// </para>
        /// </summary>
        public partial class Related_Attack_PatternLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator Related_Attack_PatternLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Related_Attack_PatternLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static Related_Attack_PatternLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CAPEC_ID", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (CAPEC_ID)
            /// </para>
            /// </summary>
            public Related_Attack_PatternLocalType() {
            }
            
            /// <summary>
            /// <para>
            ///  The CAPEC_ID stores the value for the
            ///												related CAPEC entry identifier as a string. Only one
            ///												CAPEC_ID element can exist for each
            ///												Related_Attack_Pattern element. 
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (CAPEC_ID)
            /// </para>
            /// </summary>
            public string CAPEC_ID {
                get {
                    XElement x = this.GetElement(XName.Get("CAPEC_ID", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("CAPEC_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// This attribute identifies which version of
            ///											CAPEC is being referenced.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string CAPEC_Version {
                get {
                    XAttribute x = this.Attribute(XName.Get("CAPEC_Version", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("CAPEC_Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Related_Attack_Pattern", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Related_Attack_PatternLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("CAPEC_ID", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (Relationship_Views, Relationship_Chains?, Relationship_Target_Form, Relationship_Nature, Relationship_Target_ID)
/// </para>
/// </summary>
public partial class Relationship : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Relationship(XElement xe) { return XTypedServices.ToXTypedElement<Relationship>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Relationship() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Relationship_Views", "")), new NamedContentModelEntity(XName.Get("Relationship_Chains", "")), new NamedContentModelEntity(XName.Get("Relationship_Target_Form", "")), new NamedContentModelEntity(XName.Get("Relationship_Nature", "")), new NamedContentModelEntity(XName.Get("Relationship_Target_ID", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Relationship_Views, Relationship_Chains?, Relationship_Target_Form, Relationship_Nature, Relationship_Target_ID)
    /// </para>
    /// </summary>
    public Relationship() {
    }
    
    /// <summary>
    /// <para>
    ///  This element contains a list of the individual Views to
    ///							which this relationship pertains. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Relationship_Views, Relationship_Chains?, Relationship_Target_Form, Relationship_Nature, Relationship_Target_ID)
    /// </para>
    /// </summary>
    public Relationship_ViewsLocalType Relationship_Views {
        get {
            XElement x = this.GetElement(XName.Get("Relationship_Views", ""));
            return ((Relationship_ViewsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Relationship_Views", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element contains a list of the individual Chains
    ///							this relationship pertains to. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Relationship_Views, Relationship_Chains?, Relationship_Target_Form, Relationship_Nature, Relationship_Target_ID)
    /// </para>
    /// </summary>
    public Relationship_ChainsLocalType Relationship_Chains {
        get {
            XElement x = this.GetElement(XName.Get("Relationship_Chains", ""));
            return ((Relationship_ChainsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Relationship_Chains", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// The Relationship_Target_Form element defines the form of
    ///							the target of this relationship, such as Category, Weakness, View or
    ///							Compound_Element.
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Relationship_Views, Relationship_Chains?, Relationship_Target_Form, Relationship_Nature, Relationship_Target_ID)
    /// </para>
    /// </summary>
    public string Relationship_Target_Form {
        get {
            XElement x = this.GetElement(XName.Get("Relationship_Target_Form", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("Relationship_Target_Form", ""), value, "Relationship_Target_Form", Relationship_Target_FormLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Relationship_Nature element defines the nature of the
    ///							relationship between this element and the target element, such as
    ///							ChildOf, HasMember or Requires to name a few. 
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Relationship_Views, Relationship_Chains?, Relationship_Target_Form, Relationship_Nature, Relationship_Target_ID)
    /// </para>
    /// </summary>
    public string Relationship_Nature {
        get {
            XElement x = this.GetElement(XName.Get("Relationship_Nature", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("Relationship_Nature", ""), value, "Relationship_Nature", Relationship_NatureLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    /// The Relationship_Target_ID specifies the unique ID of the
    ///							target element of the relationship.
    /// </para>
    /// <para>
    /// Occurrence: required
    /// </para>
    /// <para>
    /// Regular expression: (Relationship_Views, Relationship_Chains?, Relationship_Target_Form, Relationship_Nature, Relationship_Target_ID)
    /// </para>
    /// </summary>
    public decimal Relationship_Target_ID {
        get {
            XElement x = this.GetElement(XName.Get("Relationship_Target_ID", ""));
            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
        }
        set {
            this.SetElement(XName.Get("Relationship_Target_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Relationship", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Relationship Load(string xmlFile) {
        return XTypedServices.Load<Relationship>(xmlFile);
    }
    
    public static Relationship Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Relationship>(xmlFile);
    }
    
    public static Relationship Parse(string xml) {
        return XTypedServices.Parse<Relationship>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Relationship>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Relationship_Views", ""), typeof(Relationship_ViewsLocalType));
        localElementDictionary.Add(XName.Get("Relationship_Chains", ""), typeof(Relationship_ChainsLocalType));
        localElementDictionary.Add(XName.Get("Relationship_Target_Form", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Relationship_Nature", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Relationship_Target_ID", ""), typeof(decimal));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Relationship_View_ID+)
    /// </para>
    /// </summary>
    public partial class Relationship_ViewsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Relationship_View_IDLocalType> Relationship_View_IDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Relationship_ViewsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Relationship_ViewsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Relationship_ViewsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Relationship_View_ID", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Relationship_View_ID+)
        /// </para>
        /// </summary>
        public Relationship_ViewsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  Specifies the unique ID of the individual
        ///										view element to which this relationship pertains. This ID
        ///										must correspond to a View. 
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Relationship_View_ID+)
        /// </para>
        /// </summary>
        public IList<Relationship.Relationship_ViewsLocalType.Relationship_View_IDLocalType> Relationship_View_ID {
            get {
                if ((this.Relationship_View_IDField == null)) {
                    this.Relationship_View_IDField = new XTypedList<Relationship_View_IDLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Relationship_View_ID", ""));
                }
                return this.Relationship_View_IDField;
            }
            set {
                if ((value == null)) {
                    this.Relationship_View_IDField = null;
                }
                else {
                    if ((this.Relationship_View_IDField == null)) {
                        this.Relationship_View_IDField = XTypedList<Relationship_View_IDLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Relationship_View_ID", ""));
                    }
                    else {
                        XTypedServices.SetList<Relationship_View_IDLocalType>(this.Relationship_View_IDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Relationship_Views", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Relationship_ViewsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Relationship_View_ID", ""), typeof(Relationship_View_IDLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class Relationship_View_IDLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator Relationship_View_IDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Relationship_View_IDLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public Relationship_View_IDLocalType() {
            }
            
            public decimal TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            ///  The ordinal attribute is used
            ///												to determine if this relationship is the primary
            ///												ChildOf relationship for this weakness entry for a
            ///												given Relationship_View_ID element.. This
            ///												attribute can only have the value "Primary" and
            ///												should only be included for the primary
            ///												parent/child relationship. 
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Ordinal {
                get {
                    XAttribute x = this.Attribute(XName.Get("Ordinal", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Ordinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Relationship_View_ID", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Relationship_View_IDLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Relationship_Chain_ID*)
    /// </para>
    /// </summary>
    public partial class Relationship_ChainsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<decimal> Relationship_Chain_IDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Relationship_ChainsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Relationship_ChainsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Relationship_ChainsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Relationship_Chain_ID", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Relationship_Chain_ID*)
        /// </para>
        /// </summary>
        public Relationship_ChainsLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element specifies the unique ID of an
        ///										individual chain element this relationship pertains to.
        ///									
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Relationship_Chain_ID*)
        /// </para>
        /// </summary>
        public IList<decimal> Relationship_Chain_ID {
            get {
                if ((this.Relationship_Chain_IDField == null)) {
                    this.Relationship_Chain_IDField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, XName.Get("Relationship_Chain_ID", ""));
                }
                return this.Relationship_Chain_IDField;
            }
            set {
                if ((value == null)) {
                    this.Relationship_Chain_IDField = null;
                }
                else {
                    if ((this.Relationship_Chain_IDField == null)) {
                        this.Relationship_Chain_IDField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, value, XName.Get("Relationship_Chain_ID", ""));
                    }
                    else {
                        XTypedServices.SetList<System.Decimal>(this.Relationship_Chain_IDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Relationship_Chains", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Relationship_ChainsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Relationship_Chain_ID", ""), typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    private class Relationship_Target_FormLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Category",
                        "Weakness",
                        "View",
                        "Compound_Element"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Relationship_Target_FormLocalType() {
        }
    }
    
    private class Relationship_NatureLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HasMember",
                        "MemberOf",
                        "ChildOf",
                        "ParentOf",
                        "PeerOf",
                        "Requires",
                        "RequiredBy",
                        "StartsWith",
                        "StartsChain",
                        "CanPrecede",
                        "CanFollow",
                        "CanAlsoBe"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Relationship_NatureLocalType() {
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (Submission*, Contribution*, Modification*, Previous_Entry_Names?)
/// </para>
/// </summary>
public partial class Content_History : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<SubmissionLocalType> SubmissionField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<ContributionLocalType> ContributionField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<ModificationLocalType> ModificationField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Content_History(XElement xe) { return XTypedServices.ToXTypedElement<Content_History>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Content_History() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Submission", "")), new NamedContentModelEntity(XName.Get("Contribution", "")), new NamedContentModelEntity(XName.Get("Modification", "")), new NamedContentModelEntity(XName.Get("Previous_Entry_Names", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Submission*, Contribution*, Modification*, Previous_Entry_Names?)
    /// </para>
    /// </summary>
    public Content_History() {
    }
    
    /// <summary>
    /// <para>
    ///  This element houses the subelements which identify the
    ///							submitter and the submitter's comments related to this entry. This
    ///							element has a single attribute, Submission_Source, which provides a
    ///							general idea of how the initial information for this entry was obtained,
    ///							whether internal to MITRE, external, donated, etc.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Submission*, Contribution*, Modification*, Previous_Entry_Names?)
    /// </para>
    /// </summary>
    public IList<Content_History.SubmissionLocalType> Submission {
        get {
            if ((this.SubmissionField == null)) {
                this.SubmissionField = new XTypedList<SubmissionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Submission", ""));
            }
            return this.SubmissionField;
        }
        set {
            if ((value == null)) {
                this.SubmissionField = null;
            }
            else {
                if ((this.SubmissionField == null)) {
                    this.SubmissionField = XTypedList<SubmissionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Submission", ""));
                }
                else {
                    XTypedServices.SetList<SubmissionLocalType>(this.SubmissionField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element houses the subelements which identify the
    ///							contributor and contributor's comments related to this entry. This
    ///							element has a single attribute, Contribution_Mode, which indicates
    ///							whether the contribution was part of feedback given to the CWE team or
    ///							actual content that was donated.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Submission*, Contribution*, Modification*, Previous_Entry_Names?)
    /// </para>
    /// </summary>
    public IList<Content_History.ContributionLocalType> Contribution {
        get {
            if ((this.ContributionField == null)) {
                this.ContributionField = new XTypedList<ContributionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Contribution", ""));
            }
            return this.ContributionField;
        }
        set {
            if ((value == null)) {
                this.ContributionField = null;
            }
            else {
                if ((this.ContributionField == null)) {
                    this.ContributionField = XTypedList<ContributionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Contribution", ""));
                }
                else {
                    XTypedServices.SetList<ContributionLocalType>(this.ContributionField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element houses the subelements which identify the
    ///							modifier and modifier's comments related to this entry. A new
    ///							Modification element should exist for each modification of the entry
    ///							content. This element has a single attribute, Modification_Source, which
    ///							indicates whether this modification was made by a CWE team member or an
    ///							external party.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Submission*, Contribution*, Modification*, Previous_Entry_Names?)
    /// </para>
    /// </summary>
    public IList<Content_History.ModificationLocalType> Modification {
        get {
            if ((this.ModificationField == null)) {
                this.ModificationField = new XTypedList<ModificationLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Modification", ""));
            }
            return this.ModificationField;
        }
        set {
            if ((value == null)) {
                this.ModificationField = null;
            }
            else {
                if ((this.ModificationField == null)) {
                    this.ModificationField = XTypedList<ModificationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Modification", ""));
                }
                else {
                    XTypedServices.SetList<ModificationLocalType>(this.ModificationField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  This structure contains one or more Previous_Entry_Name
    ///							elements, each of which describes a previous name that was used for this
    ///							entry. This should be filled out whenever a substantive name change
    ///							occurs.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Submission*, Contribution*, Modification*, Previous_Entry_Names?)
    /// </para>
    /// </summary>
    public Previous_Entry_NamesLocalType Previous_Entry_Names {
        get {
            XElement x = this.GetElement(XName.Get("Previous_Entry_Names", ""));
            return ((Previous_Entry_NamesLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("Previous_Entry_Names", ""), value);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Content_History", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Content_History Load(string xmlFile) {
        return XTypedServices.Load<Content_History>(xmlFile);
    }
    
    public static Content_History Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Content_History>(xmlFile);
    }
    
    public static Content_History Parse(string xml) {
        return XTypedServices.Parse<Content_History>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Content_History>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Submission", ""), typeof(SubmissionLocalType));
        localElementDictionary.Add(XName.Get("Contribution", ""), typeof(ContributionLocalType));
        localElementDictionary.Add(XName.Get("Modification", ""), typeof(ModificationLocalType));
        localElementDictionary.Add(XName.Get("Previous_Entry_Names", ""), typeof(Previous_Entry_NamesLocalType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Submitter?, Submitter_Organization?, Submission_Date?, Submission_Comment?)
    /// </para>
    /// </summary>
    public partial class SubmissionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubmissionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SubmissionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubmissionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Submitter", "")), new NamedContentModelEntity(XName.Get("Submitter_Organization", "")), new NamedContentModelEntity(XName.Get("Submission_Date", "")), new NamedContentModelEntity(XName.Get("Submission_Comment", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Submitter?, Submitter_Organization?, Submission_Date?, Submission_Comment?)
        /// </para>
        /// </summary>
        public SubmissionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element should contain the name of the
        ///										author for this entry. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Submitter?, Submitter_Organization?, Submission_Date?, Submission_Comment?)
        /// </para>
        /// </summary>
        public string Submitter {
            get {
                XElement x = this.GetElement(XName.Get("Submitter", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Submitter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element should identify the author's
        ///										organization. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Submitter?, Submitter_Organization?, Submission_Date?, Submission_Comment?)
        /// </para>
        /// </summary>
        public string Submitter_Organization {
            get {
                XElement x = this.GetElement(XName.Get("Submitter_Organization", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Submitter_Organization", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element should provide the date on which
        ///										this content was authored in YYYY-MM-DD format.
        ///									
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Submitter?, Submitter_Organization?, Submission_Date?, Submission_Comment?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> Submission_Date {
            get {
                XElement x = this.GetElement(XName.Get("Submission_Date", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("Submission_Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element provides the author with a place
        ///										to store any comments regarding the content of this weakness
        ///										entry, such as assumptions made, reasons for omitting
        ///										elements, contact information, pending questions, etc.
        ///									
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Submitter?, Submitter_Organization?, Submission_Date?, Submission_Comment?)
        /// </para>
        /// </summary>
        public string Submission_Comment {
            get {
                XElement x = this.GetElement(XName.Get("Submission_Comment", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Submission_Comment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This attribute identifies how the initial
        ///									information for this entry was obtained. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Submission_Source {
            get {
                XAttribute x = this.Attribute(XName.Get("Submission_Source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Submission_Source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Submission", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubmissionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Submitter", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Submitter_Organization", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Submission_Date", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("Submission_Comment", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Contributor?, Contribution_Organization?, Contribution_Date?, Contribution_Comment?)
    /// </para>
    /// </summary>
    public partial class ContributionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ContributionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ContributionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContributionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Contributor", "")), new NamedContentModelEntity(XName.Get("Contribution_Organization", "")), new NamedContentModelEntity(XName.Get("Contribution_Date", "")), new NamedContentModelEntity(XName.Get("Contribution_Comment", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Contributor?, Contribution_Organization?, Contribution_Date?, Contribution_Comment?)
        /// </para>
        /// </summary>
        public ContributionLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element should contain the name of the
        ///										author for this entry. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Contributor?, Contribution_Organization?, Contribution_Date?, Contribution_Comment?)
        /// </para>
        /// </summary>
        public string Contributor {
            get {
                XElement x = this.GetElement(XName.Get("Contributor", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Contributor", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element should identify the author's
        ///										organization. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Contributor?, Contribution_Organization?, Contribution_Date?, Contribution_Comment?)
        /// </para>
        /// </summary>
        public string Contribution_Organization {
            get {
                XElement x = this.GetElement(XName.Get("Contribution_Organization", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Contribution_Organization", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element should provide the date on which
        ///										this content was authored in YYYY-MM-DD format.
        ///									
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Contributor?, Contribution_Organization?, Contribution_Date?, Contribution_Comment?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> Contribution_Date {
            get {
                XElement x = this.GetElement(XName.Get("Contribution_Date", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("Contribution_Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element provides the author with a place
        ///										to store any comments regarding the content of this weakness
        ///										entry, such as assumptions made, reasons for omitting
        ///										elements, contact information, pending questions, etc.
        ///									
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Contributor?, Contribution_Organization?, Contribution_Date?, Contribution_Comment?)
        /// </para>
        /// </summary>
        public string Contribution_Comment {
            get {
                XElement x = this.GetElement(XName.Get("Contribution_Comment", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Contribution_Comment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This attribute indicates whether the contribution
        ///									was part of feedback given to the CWE team or actual content
        ///									that was donated.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Contribution_Mode {
            get {
                XAttribute x = this.Attribute(XName.Get("Contribution_Mode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Contribution_Mode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Contribution", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContributionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Contributor", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Contribution_Organization", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Contribution_Date", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("Contribution_Comment", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Modifier?, Modifier_Organization?, Modification_Date?, Modification_Comment?)
    /// </para>
    /// </summary>
    public partial class ModificationLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ModificationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ModificationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModificationLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Modifier", "")), new NamedContentModelEntity(XName.Get("Modifier_Organization", "")), new NamedContentModelEntity(XName.Get("Modification_Date", "")), new NamedContentModelEntity(XName.Get("Modification_Comment", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Modifier?, Modifier_Organization?, Modification_Date?, Modification_Comment?)
        /// </para>
        /// </summary>
        public ModificationLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element should contain the name of the
        ///										person modifying this entry. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Modifier?, Modifier_Organization?, Modification_Date?, Modification_Comment?)
        /// </para>
        /// </summary>
        public string Modifier {
            get {
                XElement x = this.GetElement(XName.Get("Modifier", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Modifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element should contain the modifier's
        ///										organization. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Modifier?, Modifier_Organization?, Modification_Date?, Modification_Comment?)
        /// </para>
        /// </summary>
        public string Modifier_Organization {
            get {
                XElement x = this.GetElement(XName.Get("Modifier_Organization", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Modifier_Organization", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element should contain the date of the
        ///										modifications. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Modifier?, Modifier_Organization?, Modification_Date?, Modification_Comment?)
        /// </para>
        /// </summary>
        public System.Nullable<System.DateTime> Modification_Date {
            get {
                XElement x = this.GetElement(XName.Get("Modification_Date", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(XName.Get("Modification_Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element provides the modifier with a
        ///										place to store any comments regarding the content of this
        ///										weakness entry, such as assumptions made, reasons for
        ///										omitting elements, contact information, pending questions,
        ///										etc. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Modifier?, Modifier_Organization?, Modification_Date?, Modification_Comment?)
        /// </para>
        /// </summary>
        public string Modification_Comment {
            get {
                XElement x = this.GetElement(XName.Get("Modification_Comment", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Modification_Comment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This attribute identifies how significant the
        ///									modification is to the weakness with regard to the meaning and
        ///									interpretation of the weakness. If a modification has a value of
        ///									Critical, then the meaning of the entry or how it might be
        ///									interpreted has changed and requires attention from anyone
        ///									previously dependent on the weakness. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Modification_Importance {
            get {
                XAttribute x = this.Attribute(XName.Get("Modification_Importance", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Modification_Importance", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This attribute indicates whether this
        ///									modification was created by a CWE team member or provided by an
        ///									external party.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Modification_Source {
            get {
                XAttribute x = this.Attribute(XName.Get("Modification_Source", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Modification_Source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Modification", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModificationLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Modifier", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Modifier_Organization", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Modification_Date", ""), typeof(System.DateTime));
            localElementDictionary.Add(XName.Get("Modification_Comment", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Previous_Entry_Name+)
    /// </para>
    /// </summary>
    public partial class Previous_Entry_NamesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Previous_Entry_NameLocalType> Previous_Entry_NameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Previous_Entry_NamesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Previous_Entry_NamesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Previous_Entry_NamesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Previous_Entry_Name", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Previous_Entry_Name+)
        /// </para>
        /// </summary>
        public Previous_Entry_NamesLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element identifies a name that was
        ///										previously used for this entry.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Previous_Entry_Name+)
        /// </para>
        /// </summary>
        public IList<Content_History.Previous_Entry_NamesLocalType.Previous_Entry_NameLocalType> Previous_Entry_Name {
            get {
                if ((this.Previous_Entry_NameField == null)) {
                    this.Previous_Entry_NameField = new XTypedList<Previous_Entry_NameLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Previous_Entry_Name", ""));
                }
                return this.Previous_Entry_NameField;
            }
            set {
                if ((value == null)) {
                    this.Previous_Entry_NameField = null;
                }
                else {
                    if ((this.Previous_Entry_NameField == null)) {
                        this.Previous_Entry_NameField = XTypedList<Previous_Entry_NameLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Previous_Entry_Name", ""));
                    }
                    else {
                        XTypedServices.SetList<Previous_Entry_NameLocalType>(this.Previous_Entry_NameField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Previous_Entry_Names", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Previous_Entry_NamesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Previous_Entry_Name", ""), typeof(Previous_Entry_NameLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class Previous_Entry_NameLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator Previous_Entry_NameLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Previous_Entry_NameLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public Previous_Entry_NameLocalType() {
            }
            
            public string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// This lists the date on which
            ///												this name was changed to something else.
            ///												Typically, this date will be closely aligned with
            ///												new releases of CWE.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public System.DateTime Name_Change_Date {
                get {
                    XAttribute x = this.Attribute(XName.Get("Name_Change_Date", ""));
                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Name_Change_Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Previous_Entry_Name", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<Previous_Entry_NameLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (Mitigation_Phase*, Mitigation_Strategy*, Applicable_Languages?, Mitigation_Description?, Mitigation_Effectiveness?, Mitigation_Effectiveness_Notes?, SubMitigations?, References?)
/// </para>
/// </summary>
public partial class Mitigation : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> Mitigation_PhaseField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> Mitigation_StrategyField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Mitigation(XElement xe) { return XTypedServices.ToXTypedElement<Mitigation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Mitigation() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mitigation_Phase", "")), new NamedContentModelEntity(XName.Get("Mitigation_Strategy", "")), new NamedContentModelEntity(XName.Get("Applicable_Languages", "")), new NamedContentModelEntity(XName.Get("Mitigation_Description", "")), new NamedContentModelEntity(XName.Get("Mitigation_Effectiveness", "")), new NamedContentModelEntity(XName.Get("Mitigation_Effectiveness_Notes", "")), new NamedContentModelEntity(XName.Get("SubMitigations", "")), new NamedContentModelEntity(XName.Get("References", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Mitigation_Phase*, Mitigation_Strategy*, Applicable_Languages?, Mitigation_Description?, Mitigation_Effectiveness?, Mitigation_Effectiveness_Notes?, SubMitigations?, References?)
    /// </para>
    /// </summary>
    public Mitigation() {
    }
    
    /// <summary>
    /// <para>
    ///  The Mitigation_Phase element indicates the development
    ///							life cycle phase during which this particular mitigation may be applied.
    ///						
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Mitigation_Phase*, Mitigation_Strategy*, Applicable_Languages?, Mitigation_Description?, Mitigation_Effectiveness?, Mitigation_Effectiveness_Notes?, SubMitigations?, References?)
    /// </para>
    /// </summary>
    public IList<string> Mitigation_Phase {
        get {
            if ((this.Mitigation_PhaseField == null)) {
                this.Mitigation_PhaseField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Mitigation_Phase", ""));
            }
            return this.Mitigation_PhaseField;
        }
        set {
            if ((value == null)) {
                this.Mitigation_PhaseField = null;
            }
            else {
                if ((this.Mitigation_PhaseField == null)) {
                    this.Mitigation_PhaseField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Mitigation_Phase", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.Mitigation_PhaseField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// The general strategy for protecting a system to which this
    ///							mitigation contributes.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Mitigation_Phase*, Mitigation_Strategy*, Applicable_Languages?, Mitigation_Description?, Mitigation_Effectiveness?, Mitigation_Effectiveness_Notes?, SubMitigations?, References?)
    /// </para>
    /// </summary>
    public IList<string> Mitigation_Strategy {
        get {
            if ((this.Mitigation_StrategyField == null)) {
                this.Mitigation_StrategyField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Mitigation_Strategy", ""));
            }
            return this.Mitigation_StrategyField;
        }
        set {
            if ((value == null)) {
                this.Mitigation_StrategyField = null;
            }
            else {
                if ((this.Mitigation_StrategyField == null)) {
                    this.Mitigation_StrategyField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Mitigation_Strategy", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.Mitigation_StrategyField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// This structure contains one or more Language elements
    ///							which each represent a language in which this mitigation may
    ///							exist.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Mitigation_Phase*, Mitigation_Strategy*, Applicable_Languages?, Mitigation_Description?, Mitigation_Effectiveness?, Mitigation_Effectiveness_Notes?, SubMitigations?, References?)
    /// </para>
    /// </summary>
    public Languages_List_Type Applicable_Languages {
        get {
            XElement x = this.GetElement(XName.Get("Applicable_Languages", ""));
            return ((Languages_List_Type)(x));
        }
        set {
            this.SetElement(XName.Get("Applicable_Languages", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This subelement contains the description of this
    ///							individual mitigation.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Mitigation_Phase*, Mitigation_Strategy*, Applicable_Languages?, Mitigation_Description?, Mitigation_Effectiveness?, Mitigation_Effectiveness_Notes?, SubMitigations?, References?)
    /// </para>
    /// </summary>
    public Structured_Text_Type Mitigation_Description {
        get {
            XElement x = this.GetElement(XName.Get("Mitigation_Description", ""));
            return ((Structured_Text_Type)(x));
        }
        set {
            this.SetElement(XName.Get("Mitigation_Description", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// This element summarizes how effective the mitigation may
    ///							be in preventing the weakness.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Mitigation_Phase*, Mitigation_Strategy*, Applicable_Languages?, Mitigation_Description?, Mitigation_Effectiveness?, Mitigation_Effectiveness_Notes?, SubMitigations?, References?)
    /// </para>
    /// </summary>
    public string Mitigation_Effectiveness {
        get {
            XElement x = this.GetElement(XName.Get("Mitigation_Effectiveness", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElementWithValidation(XName.Get("Mitigation_Effectiveness", ""), value, "Mitigation_Effectiveness", Mitigation_EffectivenessLocalType.TypeDefinition);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Mitigation_Effectiveness_Notes element is intended to
    ///							identify the strengths and shortcomings of this mitigation on a specific
    ///							weakness. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Mitigation_Phase*, Mitigation_Strategy*, Applicable_Languages?, Mitigation_Description?, Mitigation_Effectiveness?, Mitigation_Effectiveness_Notes?, SubMitigations?, References?)
    /// </para>
    /// </summary>
    public Structured_Text_Type Mitigation_Effectiveness_Notes {
        get {
            XElement x = this.GetElement(XName.Get("Mitigation_Effectiveness_Notes", ""));
            return ((Structured_Text_Type)(x));
        }
        set {
            this.SetElement(XName.Get("Mitigation_Effectiveness_Notes", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Mitigation_Phase*, Mitigation_Strategy*, Applicable_Languages?, Mitigation_Description?, Mitigation_Effectiveness?, Mitigation_Effectiveness_Notes?, SubMitigations?, References?)
    /// </para>
    /// </summary>
    public SubMitigationsLocalType SubMitigations {
        get {
            XElement x = this.GetElement(XName.Get("SubMitigations", ""));
            return ((SubMitigationsLocalType)(x));
        }
        set {
            this.SetElement(XName.Get("SubMitigations", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    /// The References element contains one or more Reference
    ///							elements, each of which provide further reading and insight into this
    ///							view. This should be filled out when the view is based on sources or
    ///							projects that are external to the CWE project.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Mitigation_Phase*, Mitigation_Strategy*, Applicable_Languages?, Mitigation_Description?, Mitigation_Effectiveness?, Mitigation_Effectiveness_Notes?, SubMitigations?, References?)
    /// </para>
    /// </summary>
    public Reference_List_Type References {
        get {
            XElement x = this.GetElement(XName.Get("References", ""));
            return ((Reference_List_Type)(x));
        }
        set {
            this.SetElement(XName.Get("References", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Mitigation_ID stores the value for the related Mitigation
    ///						entry identifier as a string. Only one Mitigation_ID element can exist for
    ///						each Mitigation element (ex: MIT-1). However, Mitigations across CWE with
    ///						the same ID should only vary in small details.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string Mitigation_ID {
        get {
            XAttribute x = this.Attribute(XName.Get("Mitigation_ID", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Mitigation_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Mitigation", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Mitigation Load(string xmlFile) {
        return XTypedServices.Load<Mitigation>(xmlFile);
    }
    
    public static Mitigation Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Mitigation>(xmlFile);
    }
    
    public static Mitigation Parse(string xml) {
        return XTypedServices.Parse<Mitigation>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Mitigation>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Mitigation_Phase", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Mitigation_Strategy", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Applicable_Languages", ""), typeof(Languages_List_Type));
        localElementDictionary.Add(XName.Get("Mitigation_Description", ""), typeof(Structured_Text_Type));
        localElementDictionary.Add(XName.Get("Mitigation_Effectiveness", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Mitigation_Effectiveness_Notes", ""), typeof(Structured_Text_Type));
        localElementDictionary.Add(XName.Get("SubMitigations", ""), typeof(SubMitigationsLocalType));
        localElementDictionary.Add(XName.Get("References", ""), typeof(Reference_List_Type));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    private class Mitigation_StrategyLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                        "Compilation or Build Hardening",
                        "Enforcement by Conversion",
                        "Environment Hardening",
                        "Firewall",
                        "Identify and Reduce Attack Surface",
                        "Input Validation",
                        "Language Selection",
                        "Libraries or Frameworks",
                        "Output Encoding",
                        "Parameterization",
                        "Sandbox or Jail",
                        "Separation of Privilege",
                        "Threat Modeling"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Mitigation_StrategyLocalType() {
        }
    }
    
    private class Mitigation_EffectivenessLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "None",
                        "Defense in Depth",
                        "Limited",
                        "Incidental",
                        "Moderate",
                        "High"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Mitigation_EffectivenessLocalType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Mitigation+)
    /// </para>
    /// </summary>
    public partial class SubMitigationsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Mitigation> MitigationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SubMitigationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SubMitigationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SubMitigationsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Mitigation", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Mitigation+)
        /// </para>
        /// </summary>
        public SubMitigationsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Mitigation+)
        /// </para>
        /// </summary>
        public IList<Mitigation> Mitigation {
            get {
                if ((this.MitigationField == null)) {
                    this.MitigationField = new XTypedList<Mitigation>(this, LinqToXsdTypeManager.Instance, XName.Get("Mitigation", ""));
                }
                return this.MitigationField;
            }
            set {
                if ((value == null)) {
                    this.MitigationField = null;
                }
                else {
                    if ((this.MitigationField == null)) {
                        this.MitigationField = XTypedList<Mitigation>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Mitigation", ""));
                    }
                    else {
                        XTypedServices.SetList<Mitigation>(this.MitigationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubMitigations", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubMitigationsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Mitigation", ""), typeof(Mitigation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (Consequence_Scope*, Consequence_Technical_Impact*, Consequence_Note?)
/// </para>
/// </summary>
public partial class Common_Consequence : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> Consequence_ScopeField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Consequence_Technical_ImpactLocalType> Consequence_Technical_ImpactField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Common_Consequence(XElement xe) { return XTypedServices.ToXTypedElement<Common_Consequence>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Common_Consequence() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Consequence_Scope", "")), new NamedContentModelEntity(XName.Get("Consequence_Technical_Impact", "")), new NamedContentModelEntity(XName.Get("Consequence_Note", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Consequence_Scope*, Consequence_Technical_Impact*, Consequence_Note?)
    /// </para>
    /// </summary>
    public Common_Consequence() {
    }
    
    /// <summary>
    /// <para>
    ///  This subelement identifies an individual consequence that
    ///							may be associated with this weakness. Possible effects are detailed in
    ///							Consequence_Effect. 
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Consequence_Scope*, Consequence_Technical_Impact*, Consequence_Note?)
    /// </para>
    /// </summary>
    public IList<string> Consequence_Scope {
        get {
            if ((this.Consequence_ScopeField == null)) {
                this.Consequence_ScopeField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Consequence_Scope", ""));
            }
            return this.Consequence_ScopeField;
        }
        set {
            if ((value == null)) {
                this.Consequence_ScopeField = null;
            }
            else {
                if ((this.Consequence_ScopeField == null)) {
                    this.Consequence_ScopeField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Consequence_Scope", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.Consequence_ScopeField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// This subelement describes the technical impacts that can
    ///							arise if an attacker attempts to exploit this
    ///							weakness.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Consequence_Scope*, Consequence_Technical_Impact*, Consequence_Note?)
    /// </para>
    /// </summary>
    public IList<Common_Consequence.Consequence_Technical_ImpactLocalType> Consequence_Technical_Impact {
        get {
            if ((this.Consequence_Technical_ImpactField == null)) {
                this.Consequence_Technical_ImpactField = new XTypedList<Consequence_Technical_ImpactLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Consequence_Technical_Impact", ""));
            }
            return this.Consequence_Technical_ImpactField;
        }
        set {
            if ((value == null)) {
                this.Consequence_Technical_ImpactField = null;
            }
            else {
                if ((this.Consequence_Technical_ImpactField == null)) {
                    this.Consequence_Technical_ImpactField = XTypedList<Consequence_Technical_ImpactLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Consequence_Technical_Impact", ""));
                }
                else {
                    XTypedServices.SetList<Consequence_Technical_ImpactLocalType>(this.Consequence_Technical_ImpactField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// This subelement provides additional commentary about this
    ///							consequence.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Consequence_Scope*, Consequence_Technical_Impact*, Consequence_Note?)
    /// </para>
    /// </summary>
    public Structured_Text_Type Consequence_Note {
        get {
            XElement x = this.GetElement(XName.Get("Consequence_Note", ""));
            return ((Structured_Text_Type)(x));
        }
        set {
            this.SetElement(XName.Get("Consequence_Note", ""), value);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Common_Consequence_ID stores the value for the related
    ///						Common_Consequence entry identifier as a string. Only one
    ///						Common_Consequence_ID element can exist for each Common_Consequence element
    ///						(ex: CC-1). However, Common_Consequences across CWE with the same ID should
    ///						only vary in small details.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string Common_Consequence_ID {
        get {
            XAttribute x = this.Attribute(XName.Get("Common_Consequence_ID", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Common_Consequence_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Common_Consequence", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Common_Consequence Load(string xmlFile) {
        return XTypedServices.Load<Common_Consequence>(xmlFile);
    }
    
    public static Common_Consequence Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Common_Consequence>(xmlFile);
    }
    
    public static Common_Consequence Parse(string xml) {
        return XTypedServices.Parse<Common_Consequence>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Common_Consequence>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Consequence_Scope", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Consequence_Technical_Impact", ""), typeof(Consequence_Technical_ImpactLocalType));
        localElementDictionary.Add(XName.Get("Consequence_Note", ""), typeof(Structured_Text_Type));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    private class Consequence_ScopeLocalType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Confidentiality",
                        "Integrity",
                        "Availability",
                        "Access_Control",
                        "Non-Repudiation",
                        "Accountability",
                        "Authentication",
                        "Authorization",
                        "Non-Repudiation",
                        "Other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private Consequence_ScopeLocalType() {
        }
    }
    
    public partial class Consequence_Technical_ImpactLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator Consequence_Technical_ImpactLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Consequence_Technical_ImpactLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Consequence_Technical_ImpactLocalType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", Impact_Type.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// This attribute identifies how likely an
        ///											impact is based on the weakness.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Likelihood {
            get {
                XAttribute x = this.Attribute(XName.Get("Likelihood", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Likelihood", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Consequence_Technical_Impact", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Consequence_Technical_ImpactLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block1)+
/// </para>
/// </summary>
public partial class Block : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> Text_TitleField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> TextField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> Code_Example_LanguageField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> CodeField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> CommentField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<ImageLocalType> ImageField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Block> Block1Field;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
         public static explicit operator Block(XElement xe) { return XTypedServices.ToXTypedElement<Block>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Block() {
        BuildElementDictionary();
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block1)+
    /// </para>
    /// </summary>
    public Block() {
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to define
    ///							bold-faced title for a subsequent block of text.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: (((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block1)+
    /// </para>
    /// </summary>
    public IList<string> Text_Title {
        get {
            if ((this.Text_TitleField == null)) {
                this.Text_TitleField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Text_Title", ""));
            }
            return this.Text_TitleField;
        }
        set {
            if ((value == null)) {
                this.Text_TitleField = null;
            }
            else {
                if ((this.Text_TitleField == null)) {
                    this.Text_TitleField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Text_Title", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.Text_TitleField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to define a
    ///							paragraph of text.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: (((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block1)+
    /// </para>
    /// </summary>
    public IList<string> Text {
        get {
            if ((this.TextField == null)) {
                this.TextField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Text", ""));
            }
            return this.TextField;
        }
        set {
            if ((value == null)) {
                this.TextField = null;
            }
            else {
                if ((this.TextField == null)) {
                    this.TextField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Text", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.TextField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to identify the
    ///							programming language being used in the following block of
    ///							Code
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: (((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block1)+
    /// </para>
    /// </summary>
    public IList<string> Code_Example_Language {
        get {
            if ((this.Code_Example_LanguageField == null)) {
                this.Code_Example_LanguageField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Code_Example_Language", ""));
            }
            return this.Code_Example_LanguageField;
        }
        set {
            if ((value == null)) {
                this.Code_Example_LanguageField = null;
            }
            else {
                if ((this.Code_Example_LanguageField == null)) {
                    this.Code_Example_LanguageField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Code_Example_Language", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.Code_Example_LanguageField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to define a
    ///							line of code.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: (((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block1)+
    /// </para>
    /// </summary>
    public IList<string> Code {
        get {
            if ((this.CodeField == null)) {
                this.CodeField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Code", ""));
            }
            return this.CodeField;
        }
        set {
            if ((value == null)) {
                this.CodeField = null;
            }
            else {
                if ((this.CodeField == null)) {
                    this.CodeField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Code", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.CodeField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to define a
    ///							comment in code.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: (((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block1)+
    /// </para>
    /// </summary>
    public IList<string> Comment {
        get {
            if ((this.CommentField == null)) {
                this.CommentField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Comment", ""));
            }
            return this.CommentField;
        }
        set {
            if ((value == null)) {
                this.CommentField = null;
            }
            else {
                if ((this.CommentField == null)) {
                    this.CommentField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Comment", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.CommentField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to define an
    ///							image.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: (((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block1)+
    /// </para>
    /// </summary>
    public IList<Block.ImageLocalType> Image {
        get {
            if ((this.ImageField == null)) {
                this.ImageField = new XTypedList<ImageLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Image", ""));
            }
            return this.ImageField;
        }
        set {
            if ((value == null)) {
                this.ImageField = null;
            }
            else {
                if ((this.ImageField == null)) {
                    this.ImageField = XTypedList<ImageLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Image", ""));
                }
                else {
                    XTypedServices.SetList<ImageLocalType>(this.ImageField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block1)+
    /// </para>
    /// </summary>
    public IList<Block> Block1 {
        get {
            if ((this.Block1Field == null)) {
                this.Block1Field = new XTypedList<Block>(this, LinqToXsdTypeManager.Instance, XName.Get("Block", ""));
            }
            return this.Block1Field;
        }
        set {
            if ((value == null)) {
                this.Block1Field = null;
            }
            else {
                if ((this.Block1Field == null)) {
                    this.Block1Field = XTypedList<Block>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Block", ""));
                }
                else {
                    XTypedServices.SetList<Block>(this.Block1Field, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// This attribute identifies the nature of the content contained
    ///						within the Block.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string Block_Nature {
        get {
            XAttribute x = this.Attribute(XName.Get("Block_Nature", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Block_Nature", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Block", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Block Load(string xmlFile) {
        return XTypedServices.Load<Block>(xmlFile);
    }
    
    public static Block Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Block>(xmlFile);
    }
    
    public static Block Parse(string xml) {
        return XTypedServices.Parse<Block>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Block>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Text_Title", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Text", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Code_Example_Language", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Code", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Comment", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Image", ""), typeof(ImageLocalType));
        localElementDictionary.Add(XName.Get("Block", ""), typeof(Block));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Image_Location, Image_Title)+
    /// </para>
    /// </summary>
    public partial class ImageLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Image_LocationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Image_TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ImageLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ImageLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ImageLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Image_Location, Image_Title)+
        /// </para>
        /// </summary>
        public ImageLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This element provides the location of the
        ///										image file.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Image_Location, Image_Title)+
        /// </para>
        /// </summary>
        public IList<string> Image_Location {
            get {
                if ((this.Image_LocationField == null)) {
                    this.Image_LocationField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Image_Location", ""));
                }
                return this.Image_LocationField;
            }
            set {
                if ((value == null)) {
                    this.Image_LocationField = null;
                }
                else {
                    if ((this.Image_LocationField == null)) {
                        this.Image_LocationField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Image_Location", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Image_LocationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// This element provides a title for the
        ///										image.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Image_Location, Image_Title)+
        /// </para>
        /// </summary>
        public IList<string> Image_Title {
            get {
                if ((this.Image_TitleField == null)) {
                    this.Image_TitleField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Image_Title", ""));
                }
                return this.Image_TitleField;
            }
            set {
                if ((value == null)) {
                    this.Image_TitleField = null;
                }
                else {
                    if ((this.Image_TitleField == null)) {
                        this.Image_TitleField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Image_Title", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Image_TitleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Image", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ImageLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Image_Location", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Image_Title", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (Relationship+)
/// </para>
/// </summary>
public partial class Relationships : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Relationship> RelationshipField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Relationships(XElement xe) { return XTypedServices.ToXTypedElement<Relationships>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Relationships() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Relationship", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Relationship+)
    /// </para>
    /// </summary>
    public Relationships() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Relationship+)
    /// </para>
    /// </summary>
    public IList<Relationship> Relationship {
        get {
            if ((this.RelationshipField == null)) {
                this.RelationshipField = new XTypedList<Relationship>(this, LinqToXsdTypeManager.Instance, XName.Get("Relationship", ""));
            }
            return this.RelationshipField;
        }
        set {
            if ((value == null)) {
                this.RelationshipField = null;
            }
            else {
                if ((this.RelationshipField == null)) {
                    this.RelationshipField = XTypedList<Relationship>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Relationship", ""));
                }
                else {
                    XTypedServices.SetList<Relationship>(this.RelationshipField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Relationships", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Relationships Load(string xmlFile) {
        return XTypedServices.Load<Relationships>(xmlFile);
    }
    
    public static Relationships Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Relationships>(xmlFile);
    }
    
    public static Relationships Parse(string xml) {
        return XTypedServices.Parse<Relationships>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Relationships>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Relationship", ""), typeof(Relationship));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
}

/// <summary>
/// <para>
/// Regular expression: (Relationship_Note+)
/// </para>
/// </summary>
public partial class Relationship_Notes : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Structured_Text_Type> Relationship_NoteField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Relationship_Notes(XElement xe) { return XTypedServices.ToXTypedElement<Relationship_Notes>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Relationship_Notes() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Relationship_Note", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Relationship_Note+)
    /// </para>
    /// </summary>
    public Relationship_Notes() {
    }
    
    /// <summary>
    /// <para>
    ///  This element contains a note regarding the relationships
    ///							between CWE entries. 
    /// </para>
    /// <para>
    /// Occurrence: required, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Relationship_Note+)
    /// </para>
    /// </summary>
    public IList<Structured_Text_Type> Relationship_Note {
        get {
            if ((this.Relationship_NoteField == null)) {
                this.Relationship_NoteField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Relationship_Note", ""));
            }
            return this.Relationship_NoteField;
        }
        set {
            if ((value == null)) {
                this.Relationship_NoteField = null;
            }
            else {
                if ((this.Relationship_NoteField == null)) {
                    this.Relationship_NoteField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Relationship_Note", ""));
                }
                else {
                    XTypedServices.SetList<Structured_Text_Type>(this.Relationship_NoteField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Relationship_Notes", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Relationship_Notes Load(string xmlFile) {
        return XTypedServices.Load<Relationship_Notes>(xmlFile);
    }
    
    public static Relationship_Notes Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Relationship_Notes>(xmlFile);
    }
    
    public static Relationship_Notes Parse(string xml) {
        return XTypedServices.Parse<Relationship_Notes>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Relationship_Notes>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Relationship_Note", ""), typeof(Structured_Text_Type));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
}

/// <summary>
/// <para>
/// Regular expression: (Maintenance_Note+)
/// </para>
/// </summary>
public partial class Maintenance_Notes : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Structured_Text_Type> Maintenance_NoteField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Maintenance_Notes(XElement xe) { return XTypedServices.ToXTypedElement<Maintenance_Notes>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Maintenance_Notes() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Maintenance_Note", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Maintenance_Note+)
    /// </para>
    /// </summary>
    public Maintenance_Notes() {
    }
    
    /// <summary>
    /// <para>
    ///  This element describes a significant maintenance task
    ///							within this entry that still need to be addressed, such as clarifying
    ///							the concepts involved or improving relationships. It should be filled
    ///							out in any entry that is still undergoing significant review by the CWE
    ///							team. 
    /// </para>
    /// <para>
    /// Occurrence: required, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Maintenance_Note+)
    /// </para>
    /// </summary>
    public IList<Structured_Text_Type> Maintenance_Note {
        get {
            if ((this.Maintenance_NoteField == null)) {
                this.Maintenance_NoteField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Maintenance_Note", ""));
            }
            return this.Maintenance_NoteField;
        }
        set {
            if ((value == null)) {
                this.Maintenance_NoteField = null;
            }
            else {
                if ((this.Maintenance_NoteField == null)) {
                    this.Maintenance_NoteField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Maintenance_Note", ""));
                }
                else {
                    XTypedServices.SetList<Structured_Text_Type>(this.Maintenance_NoteField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Maintenance_Notes", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Maintenance_Notes Load(string xmlFile) {
        return XTypedServices.Load<Maintenance_Notes>(xmlFile);
    }
    
    public static Maintenance_Notes Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Maintenance_Notes>(xmlFile);
    }
    
    public static Maintenance_Notes Parse(string xml) {
        return XTypedServices.Parse<Maintenance_Notes>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Maintenance_Notes>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Maintenance_Note", ""), typeof(Structured_Text_Type));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
}

/// <summary>
/// <para>
/// Regular expression: (Note+)
/// </para>
/// </summary>
public partial class Other_Notes : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Structured_Text_Type> NoteField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Other_Notes(XElement xe) { return XTypedServices.ToXTypedElement<Other_Notes>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Other_Notes() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Note", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Note+)
    /// </para>
    /// </summary>
    public Other_Notes() {
    }
    
    /// <summary>
    /// <para>
    ///  This element contains any additional notes or comments
    ///							that cannot be captured using other elements. New elements might be
    ///							defined in the future to contain this information. It should be filled
    ///							out where needed. 
    /// </para>
    /// <para>
    /// Occurrence: required, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Note+)
    /// </para>
    /// </summary>
    public IList<Structured_Text_Type> Note {
        get {
            if ((this.NoteField == null)) {
                this.NoteField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Note", ""));
            }
            return this.NoteField;
        }
        set {
            if ((value == null)) {
                this.NoteField = null;
            }
            else {
                if ((this.NoteField == null)) {
                    this.NoteField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Note", ""));
                }
                else {
                    XTypedServices.SetList<Structured_Text_Type>(this.NoteField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Other_Notes", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Other_Notes Load(string xmlFile) {
        return XTypedServices.Load<Other_Notes>(xmlFile);
    }
    
    public static Other_Notes Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Other_Notes>(xmlFile);
    }
    
    public static Other_Notes Parse(string xml) {
        return XTypedServices.Parse<Other_Notes>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Other_Notes>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Note", ""), typeof(Structured_Text_Type));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
}

/// <summary>
/// <para>
/// Regular expression: (Alternate_Term+)
/// </para>
/// </summary>
public partial class Alternate_Terms : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Alternate_TermLocalType> Alternate_TermField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Alternate_Terms(XElement xe) { return XTypedServices.ToXTypedElement<Alternate_Terms>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Alternate_Terms() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Alternate_Term", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Alternate_Term+)
    /// </para>
    /// </summary>
    public Alternate_Terms() {
    }
    
    /// <summary>
    /// <para>
    ///  This element contains alternate terms by which this
    ///							weakness may be known and a description to explain the context in which
    ///							the term may be relevant. For example, CWE-181 Incorrect Behavior Order:
    ///							Validate Before Filter, has the alternate terms value
    ///							"Validate-before-cleanse". This is not required for all entries and
    ///							should only be included where appropriate. 
    /// </para>
    /// <para>
    /// Occurrence: required, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Alternate_Term+)
    /// </para>
    /// </summary>
    public IList<Alternate_Terms.Alternate_TermLocalType> Alternate_Term {
        get {
            if ((this.Alternate_TermField == null)) {
                this.Alternate_TermField = new XTypedList<Alternate_TermLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Alternate_Term", ""));
            }
            return this.Alternate_TermField;
        }
        set {
            if ((value == null)) {
                this.Alternate_TermField = null;
            }
            else {
                if ((this.Alternate_TermField == null)) {
                    this.Alternate_TermField = XTypedList<Alternate_TermLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Alternate_Term", ""));
                }
                else {
                    XTypedServices.SetList<Alternate_TermLocalType>(this.Alternate_TermField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Alternate_Terms", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Alternate_Terms Load(string xmlFile) {
        return XTypedServices.Load<Alternate_Terms>(xmlFile);
    }
    
    public static Alternate_Terms Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Alternate_Terms>(xmlFile);
    }
    
    public static Alternate_Terms Parse(string xml) {
        return XTypedServices.Parse<Alternate_Terms>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Alternate_Terms>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Alternate_Term", ""), typeof(Alternate_TermLocalType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Term, Alternate_Term_Description?)
    /// </para>
    /// </summary>
    public partial class Alternate_TermLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Alternate_TermLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Alternate_TermLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Alternate_TermLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Term", "")), new NamedContentModelEntity(XName.Get("Alternate_Term_Description", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Term, Alternate_Term_Description?)
        /// </para>
        /// </summary>
        public Alternate_TermLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element contains the actual term for the
        ///										Alternate_Term element. Each term should follow the same
        ///										conventions as the entry Name attribute.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Term, Alternate_Term_Description?)
        /// </para>
        /// </summary>
        public string Term {
            get {
                XElement x = this.GetElement(XName.Get("Term", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Term", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        ///  This element provides context to each
        ///										Alternate_Term by which this weakness may be
        ///										known.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Term, Alternate_Term_Description?)
        /// </para>
        /// </summary>
        public Structured_Text_Type Alternate_Term_Description {
            get {
                XElement x = this.GetElement(XName.Get("Alternate_Term_Description", ""));
                return ((Structured_Text_Type)(x));
            }
            set {
                this.SetElement(XName.Get("Alternate_Term_Description", ""), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Alternate_Term", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Alternate_TermLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Term", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Alternate_Term_Description", ""), typeof(Structured_Text_Type));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (Research_Gap+)
/// </para>
/// </summary>
public partial class Research_Gaps : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Structured_Text_Type> Research_GapField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Research_Gaps(XElement xe) { return XTypedServices.ToXTypedElement<Research_Gaps>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Research_Gaps() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Research_Gap", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Research_Gap+)
    /// </para>
    /// </summary>
    public Research_Gaps() {
    }
    
    /// <summary>
    /// <para>
    ///  This element identifies potential opportunities for the
    ///							vulnerability research community to conduct further exploration of
    ///							issues related to this weakness. It is intended to highlight parts of
    ///							CWE that have not received sufficient attention from researchers. This
    ///							should be filled out where appropriate for weaknesses and categories.
    ///						
    /// </para>
    /// <para>
    /// Occurrence: required, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Research_Gap+)
    /// </para>
    /// </summary>
    public IList<Structured_Text_Type> Research_Gap {
        get {
            if ((this.Research_GapField == null)) {
                this.Research_GapField = new XTypedList<Structured_Text_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Research_Gap", ""));
            }
            return this.Research_GapField;
        }
        set {
            if ((value == null)) {
                this.Research_GapField = null;
            }
            else {
                if ((this.Research_GapField == null)) {
                    this.Research_GapField = XTypedList<Structured_Text_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Research_Gap", ""));
                }
                else {
                    XTypedServices.SetList<Structured_Text_Type>(this.Research_GapField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Research_Gaps", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static Research_Gaps Load(string xmlFile) {
        return XTypedServices.Load<Research_Gaps>(xmlFile);
    }
    
    public static Research_Gaps Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<Research_Gaps>(xmlFile);
    }
    
    public static Research_Gaps Parse(string xml) {
        return XTypedServices.Parse<Research_Gaps>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Research_Gaps>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Research_Gap", ""), typeof(Structured_Text_Type));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
}

public sealed class Language_Type {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                    "C",
                    "C++",
                    "C#",
                    "Java",
                    "JSP",
                    "Javascript",
                    "ASP.NET",
                    "SQL",
                    "Python",
                    "Perl",
                    "PHP",
                    "SOAP",
                    "Ruby",
                    "Shell",
                    "PseudoCode",
                    ".NET",
                    "Assembly",
                    "XML",
                    "HTML"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
    
    private Language_Type() {
    }
}

public sealed class Status_Type {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                    "Deprecated",
                    "Incomplete",
                    "Draft",
                    "Usable",
                    "Stable"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
    
    private Status_Type() {
    }
}

public sealed class Frequency_Type {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                    "Often",
                    "Sometimes",
                    "Rarely"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
    
    private Frequency_Type() {
    }
}

public sealed class SDLC_Phase_Type {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                    "Policy",
                    "Requirements",
                    "Architecture and Design",
                    "Implementation",
                    "Testing",
                    "Bundling",
                    "Distribution",
                    "Installation",
                    "Patch",
                    "Documentation",
                    "Porting",
                    "System Configuration",
                    "Operation",
                    "Build and Compilation"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
    
    private SDLC_Phase_Type() {
    }
}

public sealed class Impact_Type {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(48)), new object[] {
                    "Modify memory",
                    "Read memory",
                    "Modify files or directories",
                    "Read files or directories",
                    "Modify application data",
                    "Read application data",
                    "DoS: crash / exit / restart",
                    "DoS: amplification",
                    "DoS: instability",
                    "DoS: resource consumption (CPU)",
                    "DoS: resource consumption (memory)",
                    "DoS: resource consumption (other)",
                    "Execute unauthorized code or commands",
                    "Gain privileges / assume identity",
                    "Bypass protection mechanism",
                    "Hide activities",
                    "Alter execution logic",
                    "Other",
                    "Varies by context",
                    "Quality degradation",
                    "Unexpected state"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
    
    private Impact_Type() {
    }
}

/// <summary>
/// <para>
/// Regular expression: ((((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block)+)
/// </para>
/// </summary>
public partial class Structured_Text_Type : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> Text_TitleField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> TextField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> Code_Example_LanguageField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> CodeField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> CommentField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<ImageLocalType> ImageField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Block> BlockField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
         public static explicit operator Structured_Text_Type(XElement xe) { return XTypedServices.ToXTypedElement<Structured_Text_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Structured_Text_Type() {
        BuildElementDictionary();
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block)+)
    /// </para>
    /// </summary>
    public Structured_Text_Type() {
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to define
    ///							bold-faced title for a subsequent block of text.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: ((((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block)+)
    /// </para>
    /// </summary>
    public IList<string> Text_Title {
        get {
            if ((this.Text_TitleField == null)) {
                this.Text_TitleField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Text_Title", ""));
            }
            return this.Text_TitleField;
        }
        set {
            if ((value == null)) {
                this.Text_TitleField = null;
            }
            else {
                if ((this.Text_TitleField == null)) {
                    this.Text_TitleField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Text_Title", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.Text_TitleField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to define a
    ///							paragraph of text.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: ((((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block)+)
    /// </para>
    /// </summary>
    public IList<string> Text {
        get {
            if ((this.TextField == null)) {
                this.TextField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Text", ""));
            }
            return this.TextField;
        }
        set {
            if ((value == null)) {
                this.TextField = null;
            }
            else {
                if ((this.TextField == null)) {
                    this.TextField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Text", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.TextField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to identify the
    ///							programming language being used in the following block of
    ///							Code
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: ((((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block)+)
    /// </para>
    /// </summary>
    public IList<string> Code_Example_Language {
        get {
            if ((this.Code_Example_LanguageField == null)) {
                this.Code_Example_LanguageField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Code_Example_Language", ""));
            }
            return this.Code_Example_LanguageField;
        }
        set {
            if ((value == null)) {
                this.Code_Example_LanguageField = null;
            }
            else {
                if ((this.Code_Example_LanguageField == null)) {
                    this.Code_Example_LanguageField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Code_Example_Language", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.Code_Example_LanguageField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to define a
    ///							line of code.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: ((((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block)+)
    /// </para>
    /// </summary>
    public IList<string> Code {
        get {
            if ((this.CodeField == null)) {
                this.CodeField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Code", ""));
            }
            return this.CodeField;
        }
        set {
            if ((value == null)) {
                this.CodeField = null;
            }
            else {
                if ((this.CodeField == null)) {
                    this.CodeField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Code", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.CodeField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to define a
    ///							comment in code.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: ((((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block)+)
    /// </para>
    /// </summary>
    public IList<string> Comment {
        get {
            if ((this.CommentField == null)) {
                this.CommentField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Comment", ""));
            }
            return this.CommentField;
        }
        set {
            if ((value == null)) {
                this.CommentField = null;
            }
            else {
                if ((this.CommentField == null)) {
                    this.CommentField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Comment", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.CommentField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Presentation Element: This element is used to define an
    ///							image.
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: ((((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block)+)
    /// </para>
    /// </summary>
    public IList<Structured_Text_Type.ImageLocalType> Image {
        get {
            if ((this.ImageField == null)) {
                this.ImageField = new XTypedList<ImageLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Image", ""));
            }
            return this.ImageField;
        }
        set {
            if ((value == null)) {
                this.ImageField = null;
            }
            else {
                if ((this.ImageField == null)) {
                    this.ImageField = XTypedList<ImageLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Image", ""));
                }
                else {
                    XTypedServices.SetList<ImageLocalType>(this.ImageField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Setter: Appends
    /// </para>
    /// <para>
    /// Regular expression: ((((Text_Title* | Text* | Code_Example_Language* | Code* | Comment* | Image*))|Block)+)
    /// </para>
    /// </summary>
    public IList<Block> Block {
        get {
            if ((this.BlockField == null)) {
                this.BlockField = new XTypedList<Block>(this, LinqToXsdTypeManager.Instance, XName.Get("Block", ""));
            }
            return this.BlockField;
        }
        set {
            if ((value == null)) {
                this.BlockField = null;
            }
            else {
                if ((this.BlockField == null)) {
                    this.BlockField = XTypedList<Block>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Block", ""));
                }
                else {
                    XTypedServices.SetList<Block>(this.BlockField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Structured_Text_Type", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Structured_Text_Type>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Text_Title", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Text", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Code_Example_Language", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Code", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Comment", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Image", ""), typeof(ImageLocalType));
        localElementDictionary.Add(XName.Get("Block", ""), typeof(Block));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Image_Location, Image_Title)+
    /// </para>
    /// </summary>
    public partial class ImageLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Image_LocationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> Image_TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ImageLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ImageLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ImageLocalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Image_Location, Image_Title)+
        /// </para>
        /// </summary>
        public ImageLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// This element provides the location of the
        ///										image file.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Image_Location, Image_Title)+
        /// </para>
        /// </summary>
        public IList<string> Image_Location {
            get {
                if ((this.Image_LocationField == null)) {
                    this.Image_LocationField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Image_Location", ""));
                }
                return this.Image_LocationField;
            }
            set {
                if ((value == null)) {
                    this.Image_LocationField = null;
                }
                else {
                    if ((this.Image_LocationField == null)) {
                        this.Image_LocationField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Image_Location", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Image_LocationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// This element provides a title for the
        ///										image.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Image_Location, Image_Title)+
        /// </para>
        /// </summary>
        public IList<string> Image_Title {
            get {
                if ((this.Image_TitleField == null)) {
                    this.Image_TitleField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Image_Title", ""));
                }
                return this.Image_TitleField;
            }
            set {
                if ((value == null)) {
                    this.Image_TitleField = null;
                }
                else {
                    if ((this.Image_TitleField == null)) {
                        this.Image_TitleField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Image_Title", ""));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.Image_TitleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Image", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ImageLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Image_Location", ""), typeof(string));
            localElementDictionary.Add(XName.Get("Image_Title", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
}

/// <summary>
/// <para>
/// The Languages_List_Type contains one or more Language elements, each
///				of which provide further reading and insight into the item. This should be filled
///				out as appropriate.
/// </para>
/// <para>
/// Regular expression: (Language*, Language_Class*)
/// </para>
/// </summary>
public partial class Languages_List_Type : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<LanguageLocalType> LanguageField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Language_ClassLocalType> Language_ClassField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Languages_List_Type(XElement xe) { return XTypedServices.ToXTypedElement<Languages_List_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Languages_List_Type() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Language", "")), new NamedContentModelEntity(XName.Get("Language_Class", "")));
    }
    
    /// <summary>
    /// <para>
    /// The Languages_List_Type contains one or more Language elements, each
    ///				of which provide further reading and insight into the item. This should be filled
    ///				out as appropriate.
    /// </para>
    /// <para>
    /// Regular expression: (Language*, Language_Class*)
    /// </para>
    /// </summary>
    public Languages_List_Type() {
    }
    
    /// <summary>
    /// <para>
    ///  This element represents a programming language in
    ///								which this entry may occur. The language name is specified in the
    ///								Language_Name attribute. 
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Language*, Language_Class*)
    /// </para>
    /// </summary>
    public IList<Languages_List_Type.LanguageLocalType> Language {
        get {
            if ((this.LanguageField == null)) {
                this.LanguageField = new XTypedList<LanguageLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Language", ""));
            }
            return this.LanguageField;
        }
        set {
            if ((value == null)) {
                this.LanguageField = null;
            }
            else {
                if ((this.LanguageField == null)) {
                    this.LanguageField = XTypedList<LanguageLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Language", ""));
                }
                else {
                    XTypedServices.SetList<LanguageLocalType>(this.LanguageField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element houses the description of a type of
    ///								language in which this entry is likely to exist and its likely
    ///								frequency of occurrence in that language. The type may be specified
    ///								by a common property, such as Languages with Automated Memory
    ///								Management or Languages which support Format Strings, or it may
    ///								describe a more general class of language such as All Interpreted
    ///								Languages or Pseudo Code. 
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Language*, Language_Class*)
    /// </para>
    /// </summary>
    public IList<Languages_List_Type.Language_ClassLocalType> Language_Class {
        get {
            if ((this.Language_ClassField == null)) {
                this.Language_ClassField = new XTypedList<Language_ClassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Language_Class", ""));
            }
            return this.Language_ClassField;
        }
        set {
            if ((value == null)) {
                this.Language_ClassField = null;
            }
            else {
                if ((this.Language_ClassField == null)) {
                    this.Language_ClassField = XTypedList<Language_ClassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Language_Class", ""));
                }
                else {
                    XTypedServices.SetList<Language_ClassLocalType>(this.Language_ClassField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Languages_List_Type", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Languages_List_Type>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Language", ""), typeof(LanguageLocalType));
        localElementDictionary.Add(XName.Get("Language_Class", ""), typeof(Language_ClassLocalType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    public partial class LanguageLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator LanguageLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LanguageLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LanguageLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This attribute specifies the name of the
        ///										programming language in which this entry may
        ///										occur.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Language_Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Language_Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Language_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// This attribute identifies the prevalence with
        ///										which this weakness may occur within code that is written in
        ///										the specified language.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Prevalence {
            get {
                XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Language", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LanguageLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Language_ClassLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator Language_ClassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Language_ClassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Language_ClassLocalType() {
        }
        
        /// <summary>
        /// <para>
        ///  This element is the description of a type of
        ///										language in which this entry is likely to exist. The type
        ///										may be specified by a common property, such as Languages
        ///										with Automated Memory Management or Languages which support
        ///										Format Strings, or it may describe a more general class of
        ///										language such as All Interpreted Languages or Pseudo
        ///										Code.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Language_Class_Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Language_Class_Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Language_Class_Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// This attribute identifies the prevalence with
        ///										which this weakness may occur within code that is written in
        ///										languages within the specified language
        ///										class.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Prevalence {
            get {
                XAttribute x = this.Attribute(XName.Get("Prevalence", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Prevalence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Language_Class", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Language_ClassLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
}

/// <summary>
/// <para>
/// The References_List_Type contains one or more Reference elements, each
///				of which provide further reading and insight into the item. This should be filled
///				out as appropriate.
/// </para>
/// <para>
/// Regular expression: (Reference+)
/// </para>
/// </summary>
public partial class Reference_List_Type : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<Reference_Type> ReferenceField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Reference_List_Type(XElement xe) { return XTypedServices.ToXTypedElement<Reference_List_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Reference_List_Type() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Reference", "")));
    }
    
    /// <summary>
    /// <para>
    /// The References_List_Type contains one or more Reference elements, each
    ///				of which provide further reading and insight into the item. This should be filled
    ///				out as appropriate.
    /// </para>
    /// <para>
    /// Regular expression: (Reference+)
    /// </para>
    /// </summary>
    public Reference_List_Type() {
    }
    
    /// <summary>
    /// <para>
    ///  Each Reference subelement should provide a single source from
    ///						which more information and deeper insight can be obtained, such as a
    ///						research paper or an excerpt from a publication. Multiple Reference
    ///						subelements can exist. The sole attribute of this element is the id. The id
    ///						is optional and translates to a preceding footnote below the context notes
    ///						if the author of the entry wants to cite a reference. Not all subelements
    ///						need to be completed, since some are designed for web references and others
    ///						are designed for book references. The fields Reference_Author and
    ///						Reference_Title should be filled out for all references if possible.
    ///						Reference_Section and Reference_Date can be included for either book
    ///						references or online references. Reference_Edition, Reference_Publication,
    ///						Reference_Publisher, and Reference_PubDate are intended for book references,
    ///						however they can be included where appropriate for other types of
    ///						references. Reference_Link is intended for web references, however it can be
    ///						included for book references as well if applicable. 
    /// </para>
    /// <para>
    /// Occurrence: required, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Reference+)
    /// </para>
    /// </summary>
    public IList<Reference_Type> Reference {
        get {
            if ((this.ReferenceField == null)) {
                this.ReferenceField = new XTypedList<Reference_Type>(this, LinqToXsdTypeManager.Instance, XName.Get("Reference", ""));
            }
            return this.ReferenceField;
        }
        set {
            if ((value == null)) {
                this.ReferenceField = null;
            }
            else {
                if ((this.ReferenceField == null)) {
                    this.ReferenceField = XTypedList<Reference_Type>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Reference", ""));
                }
                else {
                    XTypedServices.SetList<Reference_Type>(this.ReferenceField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Reference_List_Type", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Reference_List_Type>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Reference", ""), typeof(Reference_Type));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
}

/// <summary>
/// <para>
/// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
/// </para>
/// </summary>
public partial class Reference_Type : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XSimpleList<string> Reference_AuthorField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator Reference_Type(XElement xe) { return XTypedServices.ToXTypedElement<Reference_Type>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static Reference_Type() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Reference_Author", "")), new NamedContentModelEntity(XName.Get("Reference_Title", "")), new NamedContentModelEntity(XName.Get("Reference_Section", "")), new NamedContentModelEntity(XName.Get("Reference_Edition", "")), new NamedContentModelEntity(XName.Get("Reference_Publication", "")), new NamedContentModelEntity(XName.Get("Reference_Publisher", "")), new NamedContentModelEntity(XName.Get("Reference_Date", "")), new NamedContentModelEntity(XName.Get("Reference_PubDate", "")), new NamedContentModelEntity(XName.Get("Reference_Link", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
    /// </para>
    /// </summary>
    public Reference_Type() {
    }
    
    /// <summary>
    /// <para>
    ///  This element identifies an individual author of the material
    ///						being referenced. It is not required, but may be repeated sequentially in
    ///						order to identify multiple authors for a single piece of material.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
    /// </para>
    /// </summary>
    public IList<string> Reference_Author {
        get {
            if ((this.Reference_AuthorField == null)) {
                this.Reference_AuthorField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Reference_Author", ""));
            }
            return this.Reference_AuthorField;
        }
        set {
            if ((value == null)) {
                this.Reference_AuthorField = null;
            }
            else {
                if ((this.Reference_AuthorField == null)) {
                    this.Reference_AuthorField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Reference_Author", ""));
                }
                else {
                    XTypedServices.SetList<System.String>(this.Reference_AuthorField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element identifies the title of the material being
    ///						referenced. It is not required if the material does not have a title.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
    /// </para>
    /// </summary>
    public string Reference_Title {
        get {
            XElement x = this.GetElement(XName.Get("Reference_Title", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("Reference_Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element is intended to provide a means of identifying
    ///						the exact location of the material inside of the publication source, such as
    ///						the relevant pages of a research paper, the appropriate chapters from a
    ///						book, etc. This is useful for both book references and internet references.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
    /// </para>
    /// </summary>
    public string Reference_Section {
        get {
            XElement x = this.GetElement(XName.Get("Reference_Section", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("Reference_Section", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element identifies the edition of the material being
    ///						referenced in the event that multiple editions of the material exist. This
    ///						will usually only be useful for book references. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
    /// </para>
    /// </summary>
    public string Reference_Edition {
        get {
            XElement x = this.GetElement(XName.Get("Reference_Edition", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("Reference_Edition", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element identifies the publication source of the
    ///						reference material, if one exists. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
    /// </para>
    /// </summary>
    public string Reference_Publication {
        get {
            XElement x = this.GetElement(XName.Get("Reference_Publication", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("Reference_Publication", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element identifies the publisher of the reference
    ///						material, if one exists. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
    /// </para>
    /// </summary>
    public string Reference_Publisher {
        get {
            XElement x = this.GetElement(XName.Get("Reference_Publisher", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("Reference_Publisher", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element identifies the date when the reference was
    ///						included in the entry. This provides the reader with a time line for when
    ///						the material in the reference, usually the link, was valid. The date should
    ///						be of the format YYYY-MM-DD. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
    /// </para>
    /// </summary>
    public System.Nullable<System.DateTime> Reference_Date {
        get {
            XElement x = this.GetElement(XName.Get("Reference_Date", ""));
            if ((x == null)) {
                return null;
            }
            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
        }
        set {
            this.SetElement(XName.Get("Reference_Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This field describes the date when the reference was
    ///						published YYYY. 
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
    /// </para>
    /// </summary>
    public string Reference_PubDate {
        get {
            XElement x = this.GetElement(XName.Get("Reference_PubDate", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("Reference_PubDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  This element should hold the URL for the material being
    ///						referenced, if one exists. This should always be used for web references,
    ///						and may optionally be used for book and other publication references.
    ///					
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// <para>
    /// Regular expression: (Reference_Author*, Reference_Title?, Reference_Section?, Reference_Edition?, Reference_Publication?, Reference_Publisher?, Reference_Date?, Reference_PubDate?, Reference_Link?)
    /// </para>
    /// </summary>
    public string Reference_Link {
        get {
            XElement x = this.GetElement(XName.Get("Reference_Link", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetElement(XName.Get("Reference_Link", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Reference_ID is an optional value for the related Reference
    ///					entry identifier as a string. Only one Reference_ID element can exist for each
    ///					Reference element (ex: REF-1). However, References across CWE with the same ID
    ///					should only vary in small details. Text citing this reference should use the
    ///					local reference ID, as this ID is only for reference library related consistency
    ///					checking and maintenance.
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string Reference_ID {
        get {
            XAttribute x = this.Attribute(XName.Get("Reference_ID", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Reference_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    ///  The Local_Reference_ID is an optional value for the related Local
    ///					Reference entry identifier as a string. Only one Local_Reference_ID element can
    ///					exist for each Reference element (ex: R.78.1). Text citing this reference should
    ///					use the format [R.78.1].
    /// </para>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string Local_Reference_ID {
        get {
            XAttribute x = this.Attribute(XName.Get("Local_Reference_ID", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("Local_Reference_ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("Reference_Type", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Fragment;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<Reference_Type>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Reference_Author", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Reference_Title", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Reference_Section", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Reference_Edition", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Reference_Publication", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Reference_Publisher", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Reference_Date", ""), typeof(System.DateTime));
        localElementDictionary.Add(XName.Get("Reference_PubDate", ""), typeof(string));
        localElementDictionary.Add(XName.Get("Reference_Link", ""), typeof(string));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
}

public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
    
    static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
    
    static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
    
    private static XmlSchemaSet schemaSet;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
    
    static LinqToXsdTypeManager() {
        BuildTypeDictionary();
        BuildElementDictionary();
    }
    
    XmlSchemaSet ILinqToXsdTypeManager.Schemas {
        get {
            if ((schemaSet == null)) {
                XmlSchemaSet tempSet = new XmlSchemaSet();
                System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
            }
            return schemaSet;
        }
        set {
            schemaSet = value;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
        get {
            return typeDictionary;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
        get {
            return elementDictionary;
        }
    }
    
    Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
        get {
            return XTypedServices.EmptyTypeMappingDictionary;
        }
    }
    
    public static LinqToXsdTypeManager Instance {
        get {
            return typeManagerSingleton;
        }
    }
    
    private static void BuildTypeDictionary() {
        typeDictionary.Add(XName.Get("Structured_Text_Type", ""), typeof(global::Structured_Text_Type));
        typeDictionary.Add(XName.Get("Languages_List_Type", ""), typeof(global::Languages_List_Type));
        typeDictionary.Add(XName.Get("Reference_List_Type", ""), typeof(global::Reference_List_Type));
        typeDictionary.Add(XName.Get("Reference_Type", ""), typeof(global::Reference_Type));
    }
    
    private static void BuildElementDictionary() {
        elementDictionary.Add(XName.Get("Weakness_Catalog", ""), typeof(global::Weakness_Catalog));
        elementDictionary.Add(XName.Get("View", ""), typeof(global::View));
        elementDictionary.Add(XName.Get("Category", ""), typeof(global::Category));
        elementDictionary.Add(XName.Get("Weakness", ""), typeof(global::Weakness));
        elementDictionary.Add(XName.Get("Compound_Element", ""), typeof(global::Compound_Element));
        elementDictionary.Add(XName.Get("Relationship", ""), typeof(global::Relationship));
        elementDictionary.Add(XName.Get("Content_History", ""), typeof(global::Content_History));
        elementDictionary.Add(XName.Get("Mitigation", ""), typeof(global::Mitigation));
        elementDictionary.Add(XName.Get("Common_Consequence", ""), typeof(global::Common_Consequence));
        elementDictionary.Add(XName.Get("Block", ""), typeof(global::Block));
        elementDictionary.Add(XName.Get("Relationships", ""), typeof(global::Relationships));
        elementDictionary.Add(XName.Get("Relationship_Notes", ""), typeof(global::Relationship_Notes));
        elementDictionary.Add(XName.Get("Maintenance_Notes", ""), typeof(global::Maintenance_Notes));
        elementDictionary.Add(XName.Get("Other_Notes", ""), typeof(global::Other_Notes));
        elementDictionary.Add(XName.Get("Alternate_Terms", ""), typeof(global::Alternate_Terms));
        elementDictionary.Add(XName.Get("Research_Gaps", ""), typeof(global::Research_Gaps));
    }
    
    protected internal static void AddSchemas(XmlSchemaSet schemas) {
        schemas.Add(schemaSet);
    }
    
    public static System.Type GetRootType() {
        return elementDictionary[XName.Get("Weakness_Catalog", "")];
    }
}

public partial class XRootNamespace {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public Weakness_Catalog Weakness_Catalog {  get {return rootObject as Weakness_Catalog; } }

    public View View {  get {return rootObject as View; } }

    public Category Category {  get {return rootObject as Category; } }

    public Weakness Weakness {  get {return rootObject as Weakness; } }

    public Compound_Element Compound_Element {  get {return rootObject as Compound_Element; } }

    public Relationship Relationship {  get {return rootObject as Relationship; } }

    public Content_History Content_History {  get {return rootObject as Content_History; } }

    public Mitigation Mitigation {  get {return rootObject as Mitigation; } }

    public Common_Consequence Common_Consequence {  get {return rootObject as Common_Consequence; } }

    public Block Block {  get {return rootObject as Block; } }

    public Relationships Relationships {  get {return rootObject as Relationships; } }

    public Relationship_Notes Relationship_Notes {  get {return rootObject as Relationship_Notes; } }

    public Maintenance_Notes Maintenance_Notes {  get {return rootObject as Maintenance_Notes; } }

    public Other_Notes Other_Notes {  get {return rootObject as Other_Notes; } }

    public Alternate_Terms Alternate_Terms {  get {return rootObject as Alternate_Terms; } }

    public Research_Gaps Research_Gaps {  get {return rootObject as Research_Gaps; } }
    
    private XRootNamespace() {
    }
    
    public XRootNamespace(Weakness_Catalog root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(View root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Category root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Weakness root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Compound_Element root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Relationship root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Content_History root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Mitigation root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Common_Consequence root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Block root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Relationships root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Relationship_Notes root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Maintenance_Notes root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Other_Notes root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Alternate_Terms root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(Research_Gaps root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRootNamespace Load(string xmlFile) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(string xmlFile, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(XmlReader xmlReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}

public partial class XRoot {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public Weakness_Catalog Weakness_Catalog {  get {return rootObject as Weakness_Catalog; } }

    public View View {  get {return rootObject as View; } }

    public Category Category {  get {return rootObject as Category; } }

    public Weakness Weakness {  get {return rootObject as Weakness; } }

    public Compound_Element Compound_Element {  get {return rootObject as Compound_Element; } }

    public Relationship Relationship {  get {return rootObject as Relationship; } }

    public Content_History Content_History {  get {return rootObject as Content_History; } }

    public Mitigation Mitigation {  get {return rootObject as Mitigation; } }

    public Common_Consequence Common_Consequence {  get {return rootObject as Common_Consequence; } }

    public Block Block {  get {return rootObject as Block; } }

    public Relationships Relationships {  get {return rootObject as Relationships; } }

    public Relationship_Notes Relationship_Notes {  get {return rootObject as Relationship_Notes; } }

    public Maintenance_Notes Maintenance_Notes {  get {return rootObject as Maintenance_Notes; } }

    public Other_Notes Other_Notes {  get {return rootObject as Other_Notes; } }

    public Alternate_Terms Alternate_Terms {  get {return rootObject as Alternate_Terms; } }

    public Research_Gaps Research_Gaps {  get {return rootObject as Research_Gaps; } }
    
    private XRoot() {
    }
    
    public XRoot(Weakness_Catalog root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(View root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Category root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Weakness root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Compound_Element root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Relationship root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Content_History root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Mitigation root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Common_Consequence root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Block root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Relationships root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Relationship_Notes root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Maintenance_Notes root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Other_Notes root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Alternate_Terms root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(Research_Gaps root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRoot Load(string xmlFile) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(string xmlFile, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(XmlReader xmlReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}