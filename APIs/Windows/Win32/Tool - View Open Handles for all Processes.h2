<?xml version="1.0"?>
<H2>
  <SourceCode>//var topPanel = panel.clear().add_Panel();
var topPanel = "Tool - View Open Handles for all Processes".popupWindow(1000,500);
topPanel.insert_LogViewer();
var actionsPanel = topPanel.insert_Above(40,"");
var tableList =  topPanel.add_TableList(); 
var openHandles_TreeView = topPanel.insert_Left(400, "Processes (with more than 0 handles loaded)").add_TreeView_with_PropertyGrid().sort();

var processesToMap = 500;
var onlyLoadFileHandles = true;
var stopLoading = false;
var allOpenHandles = new List&lt;OpenHandles&gt;();

 openHandles_TreeView.afterSelect&lt;OpenHandles&gt;( 
 	(openHandles)=&gt; { 
 						tableList.show(openHandles.Handles).title("Showing {0} / {1}".info(openHandles.Handles.size(), openHandles.HandlesCount)); 						
 						tableList.ascending()
 								 .makeColumnWidthMatchCellWidth();
						tableList.columns_Width(-1, 70,70,70,70);  
								 //.(); 				
 					});  

Action loadData = 
	()=&gt;{	
			stopLoading = false;
			allOpenHandles.clear();
			openHandles_TreeView.clear().azure();
			var currentProcessID = Processes.getCurrentProcessID();
			foreach(var process in Processes.getProcesses().Take(processesToMap))
			 {  	   
			 	if (process.Id == currentProcessID)	// don't process the current process
			 		continue;
			 	var openHandles = process.get_OpenHandles(onlyLoadFileHandles); 
			 	if (openHandles.Handles.size() &gt; 0) 
			 	{
			 		allOpenHandles.add(openHandles); 
			 		openHandles_TreeView.add_Node(openHandles)	;
				}
				if (stopLoading)
				{
					"stopLoading requested".error();
					break;
				}
			 } 
			 openHandles_TreeView.selectFirst().white();
		};

Action open_SearchHandlesGui = 
	()=&gt;{
			var searchGui = "Popup - Search Open Handles".popupWindow(600,600);
			var mappings = new Dictionary&lt;string, List&lt;OpenHandles&gt;&gt;();			
			var fileMappings = (from openHandles in allOpenHandles
							    from handleDetails in openHandles.Handles				    
							    select new { file = handleDetails.Path, openHandles= openHandles}).toList();				    
			foreach(var fileMapping in fileMappings)
				mappings.add(fileMapping.file, fileMapping.openHandles);			
			var filterPanel = searchGui.insert_Above(40,"");
			var files_TreeView = searchGui.title("Handles").add_TreeView().sort();
			var usage_treeView = searchGui.insert_Right("Handles Usage").add_TreeView();
			
			files_TreeView.afterSelect&lt;List&lt;OpenHandles&gt;&gt;(
				(openHandles)=&gt; usage_treeView.clear().add_Nodes(openHandles));
				
			Action&lt;string&gt; showMappings =
				(filter)=&gt;{
								files_TreeView.clear().azure();			
								foreach(var mapping in mappings)
									if(filter.notValid() || mapping.Key.regEx(filter))
										files_TreeView.add_Node(mapping.Key, mapping.Value);								  
								files_TreeView.selectFirst().white();
					      };
			filterPanel.add_Label("Filter").top(2)
					   .append_TextBox("").onTextChange((text)=&gt;showMappings(text)); 
			
			showMappings("");

		};
 
actionsPanel.add_Label("# Processes to Map").top(2).autoSize()
			.append_TextBox(processesToMap.str(),30).onTextChange((text)=&gt; processesToMap = text.toInt())
			.append_Link("Reload Data", ()=&gt; loadData()).top(2)			
			.append_CheckBox("Only Load File Handles", (value)=&gt; onlyLoadFileHandles = value  ).tick().top(0)
			.append_Link("Stop Data Load", ()=&gt; stopLoading = true).top(2)			
			.append_Link("View Serialized data", ()=&gt; allOpenHandles.serialize().showInCodeViewer()).top(2)
			.append_Link("Open Handle Search GUI", ()=&gt; open_SearchHandlesGui()).top(2);;
			 
 loadData();
 				   
 
//using System.Diagnostics
//O2File:API_Win32Processes_Handles.cs
//O2Tag_DontAddExtraO2Files  
</SourceCode>
  <ReferencedAssemblies />
</H2>