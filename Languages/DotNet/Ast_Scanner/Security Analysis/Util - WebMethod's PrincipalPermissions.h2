var topPanel = O2Gui.open<Panel>("Util - View WebMethod's PrincipalPermission Mappings",700,400); 
//var topPanel = panel.clear().add_Panel();  
topPanel.insert_Below(100).add_LogViewer();      

var control = topPanel;
var codeViewer = control.add_SourceCodeViewer();
var treeView = codeViewer.insert_Left(200).add_TreeView();
var tableList = codeViewer.insert_Above().add_TableList();			
var useCachedData = true;
var currentSourceCodeFolder = "";

tableList.afterSelect(
	(listViewItems)=>{
						if (listViewItems.size()==1)
						{
							var values = listViewItems[0].values(); 
							codeViewer.open(values[2])
									  .editor()
									  .gotoLine(values[3].toInt()); 									  
							tableList.focus();		  
						}
					});
					
Action<string> loadFilesAndShowData = 
	(sourceCodeFolder)=>
		{
			currentSourceCodeFolder = sourceCodeFolder;
			treeView.clear();
			treeView.backColor(Color.Azure);
			O2Thread.mtaThread(
				()=>{		
						var astData =  sourceCodeFolder.get_O2MappedAstData_UsingCache(useCachedData); // to reload without cache use -> sourceCodeFolder.getO2MappedAstData(); 
						
						var webMethods = (from attribute in astData.attributes()  
							  where attribute.name() == "WebMethod"				  
							  select attribute).toList();				 
			
						tableList.add_Columns("Method signature", "Method Name", "File", "Line", "Has PrincipalPermission", "Role Type", "Role");
						var roleMappings = new Dictionary<string, List<MethodDeclaration>>();			 		
						
						foreach(var webMethod in webMethods)
						{ 
							var methodDeclaration = webMethod.methodDeclaration();
							var iMethod = astData.iMethod(methodDeclaration); 
							var methodAttributes = methodDeclaration.attributes();	
							var principalPermission = methodAttributes.name("PrincipalPermission");
							var hasPrincipalPermission = principalPermission .notNull();	
							var roleValue = "...";
							var roleType = "...";
							if (hasPrincipalPermission)	
							{								
								foreach(var namedArgument in principalPermission.NamedArguments)
									if (namedArgument.Name == "Role")
										roleValue =  (namedArgument.Expression as PrimitiveExpression).Value.str();				
								foreach(var positionalArgument in principalPermission.PositionalArguments)
									if (positionalArgument is MemberReferenceExpression)
										roleType =  (positionalArgument as MemberReferenceExpression).MemberName;
							}		
							roleMappings.add(roleValue, methodDeclaration);
							
							tableList.add_Row(iMethod.fullName(), 
											  iMethod.name(), 
											  astData.file(methodDeclaration),
											  webMethod.StartLocation.Line.str(),
											  hasPrincipalPermission.str(),
											  roleType,
											  roleValue); 
						} 
						
						astData.afterSelect_ShowInSourceCodeEditor(treeView, codeViewer.editor()); 
						foreach(var item in roleMappings)
							treeView.add_Node(item.Key)
									.add_Nodes(item.Value, (methodDeclaration)=> astData.iMethod(methodDeclaration).name()); 
						treeView.backColor(Color.White);
					});
		};
		
treeView.onDrop(loadFilesAndShowData);
treeView.add_ContextMenu().add_MenuItem("Refresh", ()=> loadFilesAndShowData(currentSourceCodeFolder));
treeView.insert_Below(20).add_CheckBox("Use cached data", 0,0,(value)=> useCachedData = value).check().autoSize() 
			  		     .append_Link("refresh",  ()=> loadFilesAndShowData(currentSourceCodeFolder)).top(1);

treeView.add_Node("Drop folder with");
treeView.add_Node("    .NET source code to process it"); 

return "ok";

//using FluentSharp.CSharpAST
//using FluentSharp.CSharpAST.Utils
//using O2.XRules.Database.Languages_and_Frameworks.DotNet

//O2File:O2MappedAstData_ExtensionMethods.cs 
//O2File:SharpDevelop_O2MappedAstData_ExtensionMethods.cs				  
//using ICSharpCode.NRefactory.Ast