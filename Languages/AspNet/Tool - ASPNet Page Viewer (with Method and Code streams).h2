var topPanel = O2Gui.open<Panel>("AspNet_Page_Viewer",1400,700);  

//var topPanel = panel.clear().add_Panel();
 
topPanel.insert_Below(150).add_LogViewer();
var webSiteUrl = "";
var internetView = topPanel.insert_Right().add_GroupBox("Internet Explorer View");
var addressBar = internetView.parent().insert_Above(20).add_TextBox("Current page:","");
var ie = internetView.add_IE();
var htmlCode = internetView.parent().insert_Below(200).add_GroupBox("Html Code").add_SourceCodeEditor(); 
ie.onNavigate(
	(url)=> {
				addressBar.set_Text(url);				
				htmlCode.set_Text(ie.html(), "a.html");
			});

addressBar.onEnter((text)=> ie.open_ASync(text));
//O2Ref:Interop.SHDocVw.dll



var aspNetPages = new Dictionary<string, AspNet_Page>();

var actionsPanel = topPanel.insert_Above<Panel>(40).add_GroupBox("Actions").add_Panel() ;
var aspNet_codeViewer = topPanel.add_GroupBox("Selected ASP.NET file").add_SourceCodeEditor(); 
 
var ascxCodeStreams = aspNet_codeViewer.parent().insert_Below().add_GroupBox("Method and Code Streams").add_Control<ascx_CodeStreams>();
var availableStreams = ascxCodeStreams.insert_Left<Panel>(100).add_TreeView();
var files = topPanel.insert_Left<Panel>().add_GroupBox("ASP.NET Files").add_TreeView();
var aspNetPage_properties = files.parent().insert_Below<Panel>().add_GroupBox("Selected file properties").add_PropertyGrid();  
files.splitterDistance(300); 
var codeBlocks =  topPanel.insert_Above<Panel>(100).add_GroupBox("Selected page ASP.NET components").add_TreeView(); 
var codeBlock_properties = codeBlocks.insert_Right<Panel>(400).add_GroupBox("Selected Block Properties").add_PropertyGrid(); 

var otherFilesTab = aspNet_codeViewer.insert_Right<Panel>(aspNet_codeViewer.width()/2).add_GroupBox("Selected ASP.NET file dependencies").add_TabControl();

SourceCodeEditor csharp_codeViewer = null;

var currentPath = "";
availableStreams.afterSelect<Saved_MethodStream>((savedMethodStream)=> ascxCodeStreams.loadMethodStream(savedMethodStream));						

Action<string, int, int> handleCaretMove =
	(file, line, column) => {								
								if (availableStreams.get_Tag().str() != file)
								{
									"Finding codestreams".info();
									availableStreams.Tag = file;  
									availableStreams.clear();
									if (ascxCodeStreams.AllSavedMethodStreams_MappedByFileName.hasKey(file))																	
										foreach(var methodStreamInFile in ascxCodeStreams.AllSavedMethodStreams_MappedByFileName[file])									
										{
											if (line+1 >= methodStreamInFile.RootMethod.Location.Line && line+1 <= methodStreamInFile.RootMethod.Location.Line_End) 										    
												ascxCodeStreams.loadMethodStream(methodStreamInFile);						
											availableStreams.add_Node(methodStreamInFile.RootMethod.Name, methodStreamInFile);						
										}
								}
							};

Action<AspNet_Page> viewFile = 
	(aspNetPage)=>{				
						var virtualPath = aspNetPage.Virtual_Path;//ConfigItems[0].Value.info();
						if (currentPath == virtualPath)
							return;						
						
						ie.open_ASync(webSiteUrl + virtualPath);	
						otherFilesTab.visible(false);
						currentPath= virtualPath;
						otherFilesTab.clear();
						var csharpFile = virtualPath + ".cs";		
						
						csharp_codeViewer = otherFilesTab.add_Tab(csharpFile).add_SourceCodeEditor();    
							
						var sourceCodeFolder = aspNetPage.File_Path;  
						
						var fileContents = sourceCodeFolder.pathCombine(virtualPath).fileContents();
						if (fileContents != aspNet_codeViewer.get_Text())
							//aspNet_codeViewer.set_Text(fileContents, "a.aspx");
							aspNet_codeViewer.open(sourceCodeFolder.pathCombine(virtualPath))
											 .setDocumentHighlightingStrategy("a.aspx");
											 
						var csharp_codeViewer_File = sourceCodeFolder.pathCombine(csharpFile);						
						if (csharp_codeViewer_File.fileExists())
						{
							csharp_codeViewer.open(csharp_codeViewer_File)
											 .onCaretMove((caret)=> handleCaretMove(csharp_codeViewer_File, caret.Line, caret.Column));
						}
												
						foreach(var sourceDependency in aspNetPage.SourceDependencies)					
							if (sourceDependency != aspNetPage.Virtual_Path)
							{
								// add file
								var sourceDependency_File = sourceCodeFolder.pathCombine(sourceDependency);
								otherFilesTab.add_Tab(sourceDependency)
											 .add_SourceCodeEditor()											 
											 //.set_Text(sourceCodeFolder.pathCombine(sourceDependency).fileContents(), "a.aspx")
											 .onCaretMove((caret)=> handleCaretMove(sourceDependency_File, caret.Line, caret.Column))
											 .open(sourceCodeFolder.pathCombine(sourceDependency)).setDocumentHighlightingStrategy("a.aspx");
								// add codebehind			 
								var sourceDependency_CSharpFile = sourceCodeFolder.pathCombine(sourceDependency + ".cs");
								if (sourceDependency_CSharpFile.fileExists())
									otherFilesTab.add_Tab(sourceDependency + ".cs")
											 	.add_SourceCodeEditor()
											 	.open(sourceDependency_CSharpFile) 
											 	.onCaretMove((caret)=> handleCaretMove(sourceDependency_CSharpFile, caret.Line, caret.Column));
							}
								
						otherFilesTab.visible(true);	
						handleCaretMove(csharp_codeViewer_File,0,0);
						availableStreams.selectFirst();
						
					};


Action<AspNet_Page> load_AspNet_Page = 
	(aspNetPage) => {										
						aspNetPage_properties.show(aspNetPage);
						//aspNet_codeViewer.set_Text(aspNetPage.AspNet_SourceCode,"a.aspx");
						viewFile(aspNetPage);
						codeBlocks.clear();
						foreach(var codeBlock in aspNetPage.allCodeBlocks()) 
							if (codeBlock.BlockType != "System.String")
								codeBlocks.add_Node(codeBlock);
						codeBlocks.selectFirst(); 	
						files.focus();
					};
					
files.afterSelect<AspNet_Page>(load_AspNet_Page);
	

files.onDoubleClick<AspNet_Page>(load_AspNet_Page);
 
codeBlocks.afterSelect<CodeBlock>(
	(codeBlock)=>{
					codeBlock_properties.show(codeBlock);
					if (codeBlock.Line >0)
						aspNet_codeViewer.gotoLine(codeBlock.Line); 
					codeBlocks.focus();
				 });

Action viewAllCodeBlocks =
	()=>{			
			var allCodeBlocks = new List<CodeBlock>();
			foreach(var node in files.nodes())
			{
				var aspNetPage = (AspNet_Page)node.tag<AspNet_Page>();
				foreach(var codeBlock in aspNetPage.allCodeBlocks())
					if(codeBlock.BlockType != "System.String")
						allCodeBlocks.add(codeBlock);				 
			}
			
			allCodeBlocks.show_In_ListView()
						 .afterSelect(
						 	(selectedItems)=>{ 
			 									if (selectedItems.size()==1)
			 									{
			 										var listViewItem = selectedItems[0].values();
			 										var virtualPath = listViewItem[0];
			 										if (aspNetPages.hasKey(virtualPath))
			 										{
			 											var aspNetPage = aspNetPages[virtualPath];			 											
			 											viewFile(aspNetPage);
			 											
	 													var line = listViewItem[5].toInt();
	 													if (line >0)
															aspNet_codeViewer.gotoLine(line);  			 														 														 											
			 										}
			 									} 
						 					  });
		};

Action<string> loadFilesFromFolder = 
	(folder) => {
					O2Thread.mtaThread(
						()=>{					
								foreach(var file in folder.files())
								{						
									"processing file:{0}".info(file);
									var aspNetPage = file.load<AspNet_Page>();						
									aspNetPages.add(aspNetPage.Virtual_Path, aspNetPage);																			
								}					
								files.add_Nodes(aspNetPages.Values, (aspNetPage)=> aspNetPage.Virtual_Path);  
							});
				};
 
Action<string> loadMethodStreams = 
	(methodStreamsDir)=>{	
							if (ascxCodeStreams.AllSavedMethodStreams.isNull())
							{
								ascxCodeStreams.load_SavedMethodStreams(methodStreamsDir.files());
								O2LiveObjects.set("AllSavedMethodStreams", ascxCodeStreams.AllSavedMethodStreams);	
							}

						};	
							
Action<string,string, string> loadData = 
	(filesFolder, methodsStreamsFolder, _websiteUrl)=>{
			//loadFilesFromFolder("what is the folder with the Methods Streams".askUser());
			//loadMethodStreams("what is the folder with the Methods Streams".askUser());			
			loadFilesFromFolder(filesFolder);
			loadMethodStreams(methodsStreamsFolder);
			webSiteUrl = _websiteUrl;			
			files.selectFirst();
		};

actionsPanel.add_Link("view all codeblocks",0,0, ()=> viewAllCodeBlocks())
			.append_Link("show compiled source code", 
				()=>{
						var aspNetPage = (AspNet_Page)files.selected().get_Tag();
						aspNetPage.AspNet_Compiled_SourceCode[0].showInCodeEditor(); 
					})
			.append_Link("Compile project", 
				()=>{
						var msBuild = @"C:\Windows\Microsoft.NET\Framework\v3.5\MSBuild.exe"; 
						var parameters = @"c:\o2\demos\webclient\WebClient.sln";
						msBuild.startProcess(parameters,(log)=> log.info()); 
					})
			.append_Link("refresh IE", ()=>ie.open_ASync(ie.url()));


files.onDrop(
	(folder)=>{
					loadFilesFromFolder(folder);
					//loadMethodStreams(folder);
			  });


//TM Specific stuff
//var tmFolderWithMethodStreams = @"C:\_WorkDir\SI\O2 Data\WebSite_Library_MethodStreams_ALL_3";
//loadMethodStreams(tmFolderWithMethodStreams);

return loadData;
/*
ascxCodeStreams.AllSavedMethodStreams_MappedByFileName = new Dictionary<string,List<Saved_MethodStream>>();

foreach(var savedMethodStream in ascxCodeStreams.AllSavedMethodStreams)
{
	var remappedFile  = savedMethodStream.RootMethod
										 .Location
										 .File
										 .replace(@"C:\_WorkDir\SI\GitHub\TeamMentor\WebProjects\WebClient", @"C:\O2\Demos\WebClient");
	
	ascxCodeStreams.AllSavedMethodStreams_MappedByFileName.add(remappedFile, savedMethodStream);	
}*/	

//return ascxCodeStreams.AllSavedMethodStreams_MappedByFileName.keys();

//webSiteUrl = "http://127.0.0.1.:8181";
//var sourceFolder = @"C:\O2\Demos\HacmeBank\_AspNet_Page_HacmeBank_v2.0 (7 Dec 08)\HacmeBank_v2_Website\bin\_Saved_AspNetPage_Objects";
//var sourceFolder = @"C:\O2\Demos\WebClient\bin\_Saved_AspNetPage_Objects";

//loadFilesFromFolder(sourceFolder);
//files.selectFirst();


//viewAllCodeBlocks();

return "ok";


//O2File:AspNet_Page.cs
//O2File:ascx_CodeStreams.cs
//using O2.XRules.Database.Languages_and_Frameworks.DotNet
//using FluentSharp.Watin
//O2Ref:FluentSharp.Watin.dll
//O2Ref:Watin.Core.dll